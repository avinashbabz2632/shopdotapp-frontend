{"version":3,"file":"static/js/8893.33f542b6.chunk.js","mappings":"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","sources":["components/common/Input/divStyled.js","pages/Retailer/Settings/Security/index.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n    orange100,\n    inputTransitionSpeed,\n    inputBackground,\n    inuputHeight,\n    inputPadding,\n    inputBorderRadius,\n    inputBorderColor,\n    inputFonstSize,\n    inputFontFamily,\n    inputColor,\n    inputFocusBorderColor,\n    inputFocusBackgroundColor,\n    inputValidBorderColor,\n    inputValidBackgroundColor,\n} from '../../../theme/variables';\n\nconst Input = styled.input`\n    // display: flex;\n    // align-items: center;\n    // align-content: center;\n    // z-index: 0;\n    // -webkit-appearance: none;\n    // appearance: none;\n    // width: 100%;\n    // box-sizing: border-box;\n    // font-family: ${inputFontFamily};\n    // font-size: ${inputFonstSize};\n    // font-weight: 400;\n    // border: 0.1rem solid ${inputBorderColor};\n    // border-radius: ${inputBorderRadius};\n    // padding: ${inputPadding};\n    // height: ${inuputHeight};\n    // outline: none;\n    // background-color: ${inputBackground};\n    // transition: all ${inputTransitionSpeed} ease;\n    // caret-color: ${orange100};\n    //\n    // &::place-holder {\n    //     color: ${inputColor};\n    //     opacity: 0.64;\n    // }\n    //\n    // &.invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus:required:invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:required:valid {\n    //     border-color: var(--orange-tint-10);\n    //     background-color: var(--white);\n    // }\n    //\n    // &.valid {\n    //     border-color: ${inputValidBorderColor};\n    //     background-color: ${inputValidBackgroundColor};\n    // }\n\n    background: #fffcf9;\n    border: 1px solid #f3e0d2;\n    border-radius: 4px;\n    height: 4rem;\n    padding: 1rem 1.2rem;\n    display: block;\n    width: 100%;\n    margin-top: 0.6rem;\n    appearance: none;\n    box-sizing: border-box;\n    font-family: 'Mulish', sans-serif;\n    outline: none;\n\n    &.invalid {\n        border-color: #eb5757;\n    }\n`;\n\nexport default Input;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport Input from '../../../../components/common/Input/divStyled';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { changePassword } from '../../../../actions/brandActions';\nimport { selectUserDetails } from '../../../../redux/user/userSelector';\nimport { isEmpty } from 'lodash';\n\nconst validationSchema = yup\n    .object()\n    .shape({\n        password: yup.string().required('Password is required.'),\n        newpassword: yup\n            .string()\n            .required('Password is required.')\n            .matches(\n                /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\n                'Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character.'\n            ),\n        confirmNewPassword: yup\n            .string()\n            .oneOf([yup.ref('newpassword'), null], 'Passwords must match.')\n            .required('Password confirm is required.'),\n    })\n    .required();\n\nexport default function RetailerSecurity() {\n    const dispatch = useDispatch();\n    const [passwordType, setPasswordType] = useState(true);\n    const [passwordTypeNew, setPasswordTypeNew] = useState(true);\n    const [passwordTypeConfirmNew, setPasswordTypeConfirmNew] = useState(true);\n    const {\n        register,\n        handleSubmit,\n        reset,\n        formState: { errors },\n    } = useForm({ resolver: yupResolver(validationSchema), onChange: true });\n  const userDetails = useSelector(selectUserDetails);\n\n\n    const onSubmit = (data) => {\n        console.log('data', data);\n        if (!isEmpty(data.password)) {\n            dispatch(\n              changePassword(\n                {\n                  old_password: data.password,\n                  password: data.newpassword,\n                  confirm_password: data.confirmNewPassword,\n                },\n                userDetails.id\n              )\n            );\n            reset();\n          }\n    };\n\n    return (\n        <div className=\"products_content\">\n            <div className=\"products_head mp-head\">\n                <div className=\"products_head-content\">\n                    <div className=\"title\">\n                        <h1>Security</h1>\n                    </div>\n                </div>\n            </div>\n            <div className=\"products_body\">\n                <div className=\"content_area\">\n                    <div id=\"security\">\n                        <form onSubmit={handleSubmit(onSubmit)}>\n                            <div className=\"security_info\">\n                                <h2>Change Password</h2>\n                                <div className=\"form-area\">\n                                    <div className=\"form-input mb-4\">\n                                        <label className=\"form-label\">\n                                            Old password\n                                        </label>\n                                        <Input\n                                            className={`${\n                                                errors?.password\n                                                    ? 'is-invalid'\n                                                    : ''\n                                            } form-control password`}\n                                            type={\n                                                passwordType\n                                                    ? 'password'\n                                                    : 'text'\n                                            }\n                                            name=\"password\"\n                                            {...register('password', {\n                                                required: true,\n                                            })}\n                                        />\n                                        <span\n                                            className={`password-show ${\n                                                passwordType ? '' : 'active'\n                                            }`}\n                                            onClick={() =>\n                                                setPasswordType(!passwordType)\n                                            }\n                                        />\n                                        {errors?.password && (\n                                            <small className=\"invalid-feedback mb-0\">\n                                                {errors?.password?.message}\n                                            </small>\n                                        )}\n                                    </div>\n                                    <div className=\"form-input mb-4 password-tooltip\">\n                                        <label className=\"form-label\">\n                                            New password\n                                        </label>\n                                        <Input\n                                            className={`${\n                                                errors?.newpassword\n                                                    ? 'is-invalid'\n                                                    : ''\n                                            } form-control password`}\n                                            type={\n                                                passwordTypeNew\n                                                    ? 'password'\n                                                    : 'text'\n                                            }\n                                            name=\"newpassword\"\n                                            {...register('newpassword', {\n                                                required: true,\n                                            })}\n                                        />\n                                        <span\n                                            className={`password-show ${\n                                                passwordTypeNew ? '' : 'active'\n                                            }`}\n                                            onClick={() =>\n                                                setPasswordTypeNew(\n                                                    !passwordTypeNew\n                                                )\n                                            }\n                                        />\n                                        {errors?.newpassword && (\n                                            <small className=\"invalid-feedback mb-0\">\n                                                {errors?.newpassword?.message}\n                                            </small>\n                                        )}\n                                        <div className=\"tooltip\">\n                                            <div className=\"tooltip-icon\"></div>\n                                            <div className=\"tooltip_text\">\n                                                <div className=\"tooltip-arrow\"></div>\n                                                <div className=\"pwd-info-title\">\n                                                    Password must:\n                                                </div>\n                                                <div className=\"pwd-info\">\n                                                    <label>\n                                                        - have at least 1 number\n                                                    </label>\n                                                    <label>\n                                                        - have at least 1\n                                                        uppercase character\n                                                    </label>\n                                                    <label>\n                                                        - have at least 1\n                                                        lowercase character\n                                                    </label>\n                                                    <label>\n                                                        - have at least 1\n                                                        special character\n                                                    </label>\n                                                    <label>\n                                                        - have 8 characters\n                                                        minimum\n                                                    </label>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"form-input mb-4\">\n                                        <label className=\"form-label\">\n                                            Confirm new password\n                                        </label>\n                                        <Input\n                                            className={`${\n                                                errors?.confirmNewPassword\n                                                    ? 'is-invalid'\n                                                    : ''\n                                            } form-control password`}\n                                            type={\n                                                passwordTypeConfirmNew\n                                                    ? 'password'\n                                                    : 'text'\n                                            }\n                                            name=\"confirmNewPassword\"\n                                            {...register('confirmNewPassword', {\n                                                required: true,\n                                            })}\n                                        />\n                                        <span\n                                            className={`password-show ${\n                                                passwordTypeConfirmNew\n                                                    ? ''\n                                                    : 'active'\n                                            }`}\n                                            onClick={() =>\n                                                setPasswordTypeConfirmNew(\n                                                    !passwordTypeConfirmNew\n                                                )\n                                            }\n                                        />\n                                        {errors?.confirmNewPassword && (\n                                            <small className=\"invalid-feedback mb-0\">\n                                                {\n                                                    errors?.confirmNewPassword\n                                                        ?.message\n                                                }\n                                            </small>\n                                        )}\n                                    </div>\n                                </div>\n                                <div className=\"form-area\">\n                                    <div className=\"form-input form-submit mt-4\">\n                                        <button\n                                            onClick={() => reset()}\n                                            className=\"button button-grey cancel\"\n                                        >\n                                            Cancel\n                                        </button>\n                                        <button\n                                            type=\"submit\"\n                                            className=\"button\"\n                                        >\n                                            Save\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":["Input","styled","_templateObject","_taggedTemplateLiteral","inputFontFamily","inputFonstSize","inputBorderColor","inputBorderRadius","inputPadding","inuputHeight","inputBackground","inputTransitionSpeed","orange100","inputColor","inputFocusBorderColor","inputFocusBackgroundColor","inputValidBorderColor","inputValidBackgroundColor","validationSchema","yup","shape","password","required","newpassword","matches","confirmNewPassword","oneOf","RetailerSecurity","_errors$password","_errors$newpassword","_errors$confirmNewPas","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","passwordType","setPasswordType","_useState3","_useState4","passwordTypeNew","setPasswordTypeNew","_useState5","_useState6","passwordTypeConfirmNew","setPasswordTypeConfirmNew","_useForm","useForm","resolver","yupResolver","onChange","register","handleSubmit","reset","errors","formState","userDetails","useSelector","selectUserDetails","_jsxs","className","children","_jsx","id","onSubmit","data","console","log","isEmpty","changePassword","old_password","confirm_password","_objectSpread","concat","type","name","onClick","message"],"sourceRoot":""}