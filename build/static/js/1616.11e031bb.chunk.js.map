{"version":3,"file":"static/js/1616.11e031bb.chunk.js","mappings":"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","sources":["pages/Brand/Settings/Paid/EditBankDetails.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectBankDetails } from '../../../../redux/Brand/GettingPaid/gettingPaidSelector';\nimport { setBankDetails } from '../../../../redux/Brand/GettingPaid/gettingPaidSlice';\nimport Select from 'react-select';\nimport { BankDetailsValidationSchema } from './ValidationSchema';\nimport { brandBankDetailsAction } from '../../../../actions/brandActions';\n\nconst accountTypeOption = [\n  { value: 'CHECKING', label: 'Current' },\n  {\n    value: 'SAVINGS',\n    label: 'Savings',\n  },\n];\n\nconst accountRoleOption = [\n  { value: 'CORPORATE', label: 'Business' },\n  {\n    value: 'CONSUMER',\n    label: 'Personal',\n  },\n];\n\nconst categoryStyle = {\n  control: (styles) => {\n    return {\n      ...styles,\n      borderColor: '#ebbca2',\n      boxShadow: 'none',\n      minHeight: '40px',\n      '&:hover': {\n        boxShadow: 'none',\n      },\n    };\n  },\n  container: (style) => {\n    return {\n      ...style,\n      marginTop: '5xp',\n      marginRight: '1px',\n    };\n  },\n};\n\nconst defaultValues = {\n  account_type: accountTypeOption[0],\n  purpose: accountRoleOption[0],\n};\n\nexport default function EditBankDetail({ setEditBankDetails, customerId }) {\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: { errors },\n  } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(BankDetailsValidationSchema),\n    defaultValues,\n  });\n\n  const bankDetails = useSelector(selectBankDetails);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fields = [\n      'account_holder_name',\n      'account_type',\n      'purpose',\n      'account_number',\n      'routing_number',\n    ];\n\n    fields.forEach((field) => setValue(field, bankDetails[field]));\n  }, []);\n\n  const onSubmit = (data) => {\n    dispatch(\n      brandBankDetailsAction({\n        ...data,\n        account_type: data.account_type.value,\n        purpose: data.purpose.value,\n        customer_id: customerId,\n      })\n    );\n    // dispatch(setBankDetails(data));\n    // setEditBankDetails(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <h2 className=\"mt-5\">Bank Details</h2>\n      <div className=\"form-area\">\n        <div className=\"form-input mb-4\">\n          <label htmlFor=\"\" className=\"form-label\">\n            Name of the bank account holder&nbsp;\n            <span className=\"asterisk-red\">*</span>\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control mb-0\"\n            name=\"account_holder_name\"\n            placeholder=\"Jane Doe\"\n            {...register('account_holder_name', { required: true })}\n          />\n          {errors.account_holder_name && (\n            <span className=\"error-text\">\n              {errors.account_holder_name?.message}\n            </span>\n          )}\n        </div>\n        <div className=\"form-input mb-4\">\n          <label htmlFor=\"\" className=\"form-label\">\n            Bank account type&nbsp;\n            <span className=\"asterisk-red\">*</span>\n          </label>\n          <Controller\n            name=\"account_type\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                {...field}\n                className=\"basic-single\"\n                classNamePrefix=\"select\"\n                styles={categoryStyle}\n                components={{ IndicatorSeparator: () => null }}\n                theme={(theme) => ({\n                  ...theme,\n                  colors: {\n                    ...theme.colors,\n                    primary25: '#fbf5f0',\n                    primary: '#bd6f34',\n                  },\n                })}\n                options={accountTypeOption}\n              />\n            )}\n          />\n          {errors.account_type && (\n            <span className=\"error-text\">{errors.account_type?.message}</span>\n          )}\n        </div>\n\n        <div className=\"form-input mb-4\">\n          <label htmlFor=\"\" className=\"form-label\">\n            Purpose&nbsp;<span className=\"asterisk-red\">*</span>\n          </label>\n          <Controller\n            name=\"purpose\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                {...field}\n                className=\"basic-single\"\n                classNamePrefix=\"select\"\n                styles={categoryStyle}\n                components={{ IndicatorSeparator: () => null }}\n                theme={(theme) => ({\n                  ...theme,\n                  colors: {\n                    ...theme.colors,\n                    primary25: '#fbf5f0',\n                    primary: '#bd6f34',\n                  },\n                })}\n                options={accountRoleOption}\n              />\n            )}\n          />\n          {errors.purpose && (\n            <span className=\"error-text\">{errors.purpose?.message}</span>\n          )}\n        </div>\n\n        <div className=\"form-input mb-4\">\n          <label htmlFor=\"\" className=\"form-label\">\n            Account number&nbsp;\n            <span className=\"asterisk-red\">*</span>\n          </label>\n          <input\n            type=\"number\"\n            className=\"form-control mb-0\"\n            name=\"account_number\"\n            placeholder=\"12345678\"\n            {...register('account_number', { required: true })}\n          />\n          {errors.account_number && (\n            <span className=\"error-text\">{errors.account_number?.message}</span>\n          )}\n        </div>\n\n        <div className=\"form-input mb-4\">\n          <label htmlFor=\"\" className=\"form-label\">\n            Routing number&nbsp;\n            <span className=\"asterisk-red\">*</span>\n          </label>\n          <input\n            type=\"number\"\n            className=\"form-control mb-0\"\n            name=\"routing_number\"\n            placeholder=\"123456789\"\n            {...register('routing_number', { required: true })}\n          />\n          {errors.routing_number && (\n            <span className=\"error-text\">{errors.routing_number?.message}</span>\n          )}\n          <small>\n            9-digit Routing Number of the account used for ACH transactions.\n          </small>\n        </div>\n      </div>\n      <div className=\"form-area\">\n        <div className=\"form-input form-submit\">\n          <button className=\"button w-100\">Submit</button>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nEditBankDetail.propTypes = {\n  setEditBankDetails: PropTypes.func,\n};\n"],"names":["accountTypeOption","value","label","accountRoleOption","categoryStyle","control","styles","_objectSpread","borderColor","boxShadow","minHeight","container","style","marginTop","marginRight","defaultValues","account_type","purpose","EditBankDetail","_ref","setEditBankDetails","_errors$account_holde","_errors$account_type","_errors$purpose","_errors$account_numbe","_errors$routing_numbe","customerId","_useForm","useForm","mode","resolver","yupResolver","BankDetailsValidationSchema","register","handleSubmit","setValue","errors","formState","bankDetails","useSelector","selectBankDetails","dispatch","useDispatch","useEffect","forEach","field","_jsxs","onSubmit","data","brandBankDetailsAction","customer_id","children","_jsx","className","htmlFor","type","name","placeholder","required","account_holder_name","message","Controller","render","_ref2","Select","classNamePrefix","components","IndicatorSeparator","theme","colors","primary25","primary","options","_ref3","account_number","routing_number"],"sourceRoot":""}