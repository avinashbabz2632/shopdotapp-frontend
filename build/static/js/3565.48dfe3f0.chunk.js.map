{"version":3,"file":"static/js/3565.48dfe3f0.chunk.js","mappings":"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","sources":["components/common/A/index.js","components/common/Input/divStyled.js","pages/Auth/ResetPassword/ResetPassword.js"],"sourcesContent":["/**\n * A link to a certain page, an anchor tag\n */\n\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { orange100 } from '../../../theme/variables';\n\nexport const A = styled.a`\n  color: ${orange100};\n  font-family: 'Mulish', sans-serif;\n  font-size: 16px;\n  text-decoration: none;\n\n  &.sm {\n    font-size: 14px;\n    letter-spacing: -0.02em;\n  }\n\n  &[disabled] {\n    pointer-events: none;\n  }\n\n  &:hover {\n    color: ${orange100};\n  }\n`;\n\nexport const LinkMod = styled(Link)`\n  color: ${orange100};\n  font-family: 'Mulish', sans-serif;\n  // font-size: 14px;\n  // text-decoration: none;\n  outline: 0;\n  transition: all 0.3s ease;\n  cursor: pointer;\n  text-align: center;\n  border: none;\n  -webkit-font-smoothing: antialiased;\n  box-sizing: border-box;\n  &:hover {\n    color: ${orange100};\n    opacity: 0.8;\n  }\n`;\n","import styled from 'styled-components';\nimport {\n    orange100,\n    inputTransitionSpeed,\n    inputBackground,\n    inuputHeight,\n    inputPadding,\n    inputBorderRadius,\n    inputBorderColor,\n    inputFonstSize,\n    inputFontFamily,\n    inputColor,\n    inputFocusBorderColor,\n    inputFocusBackgroundColor,\n    inputValidBorderColor,\n    inputValidBackgroundColor,\n} from '../../../theme/variables';\n\nconst Input = styled.input`\n    // display: flex;\n    // align-items: center;\n    // align-content: center;\n    // z-index: 0;\n    // -webkit-appearance: none;\n    // appearance: none;\n    // width: 100%;\n    // box-sizing: border-box;\n    // font-family: ${inputFontFamily};\n    // font-size: ${inputFonstSize};\n    // font-weight: 400;\n    // border: 0.1rem solid ${inputBorderColor};\n    // border-radius: ${inputBorderRadius};\n    // padding: ${inputPadding};\n    // height: ${inuputHeight};\n    // outline: none;\n    // background-color: ${inputBackground};\n    // transition: all ${inputTransitionSpeed} ease;\n    // caret-color: ${orange100};\n    //\n    // &::place-holder {\n    //     color: ${inputColor};\n    //     opacity: 0.64;\n    // }\n    //\n    // &.invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus:required:invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:required:valid {\n    //     border-color: var(--orange-tint-10);\n    //     background-color: var(--white);\n    // }\n    //\n    // &.valid {\n    //     border-color: ${inputValidBorderColor};\n    //     background-color: ${inputValidBackgroundColor};\n    // }\n\n    background: #fffcf9;\n    border: 1px solid #f3e0d2;\n    border-radius: 4px;\n    height: 4rem;\n    padding: 1rem 1.2rem;\n    display: block;\n    width: 100%;\n    margin-top: 0.6rem;\n    appearance: none;\n    box-sizing: border-box;\n    font-family: 'Mulish', sans-serif;\n    outline: none;\n\n    &.invalid {\n        border-color: #eb5757;\n    }\n`;\n\nexport default Input;\n","/* eslint-disable no-unused-vars */\n\n// Auth flow:: reset password page\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport Header from '../../../components/Header/Header';\nimport PublicLayout from '../../../layout/PublicLayout';\nimport Input from '../../../components/common/Input/divStyled';\nimport Button from '../../../components/common/Button';\nimport '../auth.style.scss';\n\nimport { LinkMod } from '../../../components/common/A';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { AuthApiService } from '../../../services/apis/authApis';\nimport { toast } from 'react-toastify';\n\n// Validation schema of form field\nconst validationSchema = yup.object({\n  password: yup\n    .string()\n    .required('Password does not meet the requirements.')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\n      'Password does not meet the requirements.'\n    ),\n  passwordConfirmation: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords do not match')\n    .required('Passwords do not match'),\n});\n\nfunction ResetPassword() {\n  const params = useParams();\n  const [passwordType, setPasswordType] = useState(true);\n  const [confirmPasswordType, setConfirmPasswordType] = useState(true);\n  const navigate = useNavigate();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(validationSchema) });\n\n  const onSubmit = async (data) => {\n    const userId = params?.user_id?.split('~')?.[1] ?? '';\n\n    const response = await AuthApiService.changePassword({\n      userId,\n      password: data.password,\n      conformPassword: data.passwordConfirmation,\n    });\n\n    if (response) {\n      reset();\n      navigate('/reset-password-success');\n      return;\n    }\n  };\n\n  return (\n    <>\n      <Header pageTitle=\"Reset Password\" />\n      <PublicLayout>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"sign__form form\">\n          <div className=\"form__field password-tooltip\">\n            <Input\n              className={`password ${errors.password ? 'invalid' : ''}`}\n              type={passwordType ? 'password' : 'text'}\n              name=\"password\"\n              // required='true'\n              placeholder=\"Enter password\"\n              {...register('password', {\n                required: true,\n              })}\n            />\n            <span\n              className={`password-show ${passwordType ? '' : 'active'}`}\n              onClick={() => setPasswordType(!passwordType)}\n            />\n            <div className=\"tooltip\">\n              <div className=\"tooltip-icon\"></div>\n              <div className=\"tooltip_text\">\n                <div className=\"tooltip-arrow\"></div>\n                <div className=\"pwd-info-title\">Password must:</div>\n                <div className=\"pwd-info\">\n                  <div className=\"tooltip-text\">- have at least 1 number</div>\n                  <div className=\"tooltip-text\">\n                    - have at least 1 uppercase character\n                  </div>\n                  <div className=\"tooltip-text\">\n                    - have at least 1 lowercase character\n                  </div>\n                  <div className=\"tooltip-text\">\n                    - have at least 1 special character\n                  </div>\n                  <div className=\"tooltip-text\">\n                    - have 8 characters minimum\n                  </div>\n                </div>\n              </div>\n            </div>\n            {errors.password && (\n              <span className=\"error-text\">{errors.password?.message}</span>\n            )}\n          </div>\n          <div className=\"form__field \">\n            <Input\n              className={`password ${\n                errors.passwordConfirmation ? 'invalid' : ''\n              }`}\n              type={confirmPasswordType ? 'password' : 'text'}\n              name=\"passwordConfirmation\"\n              // required='true'\n              placeholder=\"Confirm new password\"\n              {...register('passwordConfirmation', {\n                required: true,\n              })}\n            />\n            <span\n              className={`password-show ${confirmPasswordType ? '' : 'active'}`}\n              onClick={() => setConfirmPasswordType(!confirmPasswordType)}\n            />\n            {errors.passwordConfirmation && (\n              <span className=\"error-text\">\n                {errors.passwordConfirmation?.message}\n              </span>\n            )}\n          </div>\n\n          <div className=\"form__field buttons\">\n            <Button type=\"submit\" className=\"auth_button\">\n              Confirm\n            </Button>\n          </div>\n        </form>\n      </PublicLayout>\n    </>\n  );\n}\n\nexport default ResetPassword;\n"],"names":["LinkMod","styled","_templateObject","_taggedTemplateLiteral","orange100","Link","_templateObject2","Input","inputFontFamily","inputFonstSize","inputBorderColor","inputBorderRadius","inputPadding","inuputHeight","inputBackground","inputTransitionSpeed","inputColor","inputFocusBorderColor","inputFocusBackgroundColor","inputValidBorderColor","inputValidBackgroundColor","validationSchema","yup","password","required","matches","passwordConfirmation","oneOf","_errors$password","_errors$passwordConfi","params","useParams","_useState","useState","_useState2","_slicedToArray","passwordType","setPasswordType","_useState3","_useState4","confirmPasswordType","setConfirmPasswordType","navigate","useNavigate","_useForm","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","_params$user_id$split","_params$user_id","_params$user_id$split2","userId","wrap","_context","prev","next","user_id","split","AuthApiService","conformPassword","sent","abrupt","stop","_x","apply","arguments","_jsxs","_Fragment","children","_jsx","Header","pageTitle","PublicLayout","className","_objectSpread","concat","type","name","placeholder","onClick","message","Button"],"sourceRoot":""}