{"version":3,"file":"static/js/3565.4654a642.chunk.js","mappings":"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","sources":["components/common/A/index.js","components/common/Input/divStyled.js","pages/Auth/ResetPassword/ResetPassword.js","../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","../node_modules/@hookform/resolvers/src/toNestError.ts","../node_modules/@hookform/resolvers/yup/src/yup.ts"],"sourcesContent":["/**\n * A link to a certain page, an anchor tag\n */\n\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { orange100 } from '../../../theme/variables';\n\nexport const A = styled.a`\n  color: ${orange100};\n  font-family: 'Mulish', sans-serif;\n  font-size: 16px;\n  text-decoration: none;\n\n  &.sm {\n    font-size: 14px;\n    letter-spacing: -0.02em;\n  }\n\n  &[disabled] {\n    pointer-events: none;\n  }\n\n  &:hover {\n    color: ${orange100};\n  }\n`;\n\nexport const LinkMod = styled(Link)`\n  color: ${orange100};\n  font-family: 'Mulish', sans-serif;\n  // font-size: 14px;\n  // text-decoration: none;\n  outline: 0;\n  transition: all 0.3s ease;\n  cursor: pointer;\n  text-align: center;\n  border: none;\n  -webkit-font-smoothing: antialiased;\n  box-sizing: border-box;\n  &:hover {\n    color: ${orange100};\n    opacity: 0.8;\n  }\n`;\n","import styled from 'styled-components';\nimport {\n    orange100,\n    inputTransitionSpeed,\n    inputBackground,\n    inuputHeight,\n    inputPadding,\n    inputBorderRadius,\n    inputBorderColor,\n    inputFonstSize,\n    inputFontFamily,\n    inputColor,\n    inputFocusBorderColor,\n    inputFocusBackgroundColor,\n    inputValidBorderColor,\n    inputValidBackgroundColor,\n} from '../../../theme/variables';\n\nconst Input = styled.input`\n    // display: flex;\n    // align-items: center;\n    // align-content: center;\n    // z-index: 0;\n    // -webkit-appearance: none;\n    // appearance: none;\n    // width: 100%;\n    // box-sizing: border-box;\n    // font-family: ${inputFontFamily};\n    // font-size: ${inputFonstSize};\n    // font-weight: 400;\n    // border: 0.1rem solid ${inputBorderColor};\n    // border-radius: ${inputBorderRadius};\n    // padding: ${inputPadding};\n    // height: ${inuputHeight};\n    // outline: none;\n    // background-color: ${inputBackground};\n    // transition: all ${inputTransitionSpeed} ease;\n    // caret-color: ${orange100};\n    //\n    // &::place-holder {\n    //     color: ${inputColor};\n    //     opacity: 0.64;\n    // }\n    //\n    // &.invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus:required:invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:required:valid {\n    //     border-color: var(--orange-tint-10);\n    //     background-color: var(--white);\n    // }\n    //\n    // &.valid {\n    //     border-color: ${inputValidBorderColor};\n    //     background-color: ${inputValidBackgroundColor};\n    // }\n\n    background: #fffcf9;\n    border: 1px solid #f3e0d2;\n    border-radius: 4px;\n    height: 4rem;\n    padding: 1rem 1.2rem;\n    display: block;\n    width: 100%;\n    margin-top: 0.6rem;\n    appearance: none;\n    box-sizing: border-box;\n    font-family: 'Mulish', sans-serif;\n    outline: none;\n\n    &.invalid {\n        border-color: #eb5757;\n    }\n`;\n\nexport default Input;\n","/* eslint-disable no-unused-vars */\n\n// Auth flow:: reset password page\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport Header from '../../../components/Header/Header';\nimport PublicLayout from '../../../layout/PublicLayout';\nimport Input from '../../../components/common/Input/divStyled';\nimport Button from '../../../components/common/Button';\nimport '../auth.style.scss';\n\nimport { LinkMod } from '../../../components/common/A';\nimport { useNavigate } from 'react-router-dom';\n\n// Validation schema of form field\nconst validationSchema = yup.object({\n  password: yup\n    .string()\n    .required('Password does not meet the requirements.')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\n      'Password does not meet the requirements.'\n    ),\n  passwordConfirmation: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords do not match')\n    .required('Passwords do not match'),\n});\n\nfunction ResetPassword() {\n  const [passwordType, setPasswordType] = useState(true);\n  const [confirmPasswordType, setConfirmPasswordType] = useState(true);\n  const navigate = useNavigate();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(validationSchema) });\n\n  const onSubmit = (data) => {\n    navigate('/reset-password-success');\n    reset();\n  };\n\n  return (\n    <>\n      <Header pageTitle=\"Reset Password\" />\n      <PublicLayout>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"sign__form form\">\n          <div className=\"form__field password-tooltip\">\n            <Input\n              className={`password ${errors.password ? 'invalid' : ''}`}\n              type={passwordType ? 'password' : 'text'}\n              name=\"password\"\n              // required='true'\n              placeholder=\"Enter password\"\n              {...register('password', {\n                required: true,\n              })}\n            />\n            <span\n              className={`password-show ${passwordType ? '' : 'active'}`}\n              onClick={() => setPasswordType(!passwordType)}\n            />\n            <div className=\"tooltip\">\n              <div className=\"tooltip-icon\"></div>\n              <div className=\"tooltip_text\">\n                <div className=\"tooltip-arrow\"></div>\n                <div className=\"pwd-info-title\">Password must:</div>\n                <div className=\"pwd-info\">\n                  <div className=\"tooltip-text\">- have at least 1 number</div>\n                  <div className=\"tooltip-text\">\n                    - have at least 1 uppercase character\n                  </div>\n                  <div className=\"tooltip-text\">\n                    - have at least 1 lowercase character\n                  </div>\n                  <div className=\"tooltip-text\">\n                    - have at least 1 special character\n                  </div>\n                  <div className=\"tooltip-text\">\n                    - have 8 characters minimum\n                  </div>\n                </div>\n              </div>\n            </div>\n            {errors.password && (\n              <span className=\"error-text\">{errors.password?.message}</span>\n            )}\n          </div>\n          <div className=\"form__field \">\n            <Input\n              className={`password ${\n                errors.passwordConfirmation ? 'invalid' : ''\n              }`}\n              type={confirmPasswordType ? 'password' : 'text'}\n              name=\"passwordConfirmation\"\n              // required='true'\n              placeholder=\"Confirm new password\"\n              {...register('passwordConfirmation', {\n                required: true,\n              })}\n            />\n            <span\n              className={`password-show ${confirmPasswordType ? '' : 'active'}`}\n              onClick={() => setConfirmPasswordType(!confirmPasswordType)}\n            />\n            {errors.passwordConfirmation && (\n              <span className=\"error-text\">\n                {errors.passwordConfirmation?.message}\n              </span>\n            )}\n          </div>\n\n          <div className=\"form__field buttons\">\n            <Button type=\"submit\" className=\"button\">\n              Confirm\n            </Button>\n          </div>\n        </form>\n      </PublicLayout>\n    </>\n  );\n}\n\nexport default ResetPassword;\n","import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n","import * as Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.rawValues ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"],"names":["LinkMod","styled","_templateObject","_taggedTemplateLiteral","orange100","Link","_templateObject2","Input","inputFontFamily","inputFonstSize","inputBorderColor","inputBorderRadius","inputPadding","inuputHeight","inputBackground","inputTransitionSpeed","inputColor","inputFocusBorderColor","inputFocusBackgroundColor","inputValidBorderColor","inputValidBackgroundColor","validationSchema","yup","password","required","matches","passwordConfirmation","oneOf","_errors$password","_errors$passwordConfi","_useState","useState","_useState2","_slicedToArray","passwordType","setPasswordType","_useState3","_useState4","confirmPasswordType","setConfirmPasswordType","navigate","useNavigate","_useForm","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","_jsxs","_Fragment","children","_jsx","Header","pageTitle","PublicLayout","onSubmit","data","className","_objectSpread","concat","type","name","placeholder","onClick","message","Button","e","i","t","f","r","setCustomValidity","reportValidity","fields","ref","refs","forEach","shouldUseNativeValidation","o","a","n","Object","assign","s","c","Promise","resolve","u","context","mode","abortEarly","then","values","rawValues","inner","criteriaMode","reduce","path","types","reject"],"sourceRoot":""}