{"version":3,"file":"static/js/8910.fde2756e.chunk.js","mappings":"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","sources":["pages/Brand/images/edit.svg","pages/Brand/Settings/Paid/Summary.js","pages/Brand/Settings/Paid/ValidationSchema.js"],"sourcesContent":["var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgEdit(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M2 14.0017H4.5L11.8733 6.62833L9.37333 4.12833L2 11.5017V14.0017ZM3.33333 12.055L9.37333 6.015L9.98667 6.62833L3.94667 12.6683H3.33333V12.055Z\",\n    fill: \"white\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.2467 2.195C11.9867 1.935 11.5667 1.935 11.3067 2.195L10.0867 3.415L12.5867 5.915L13.8067 4.695C14.0667 4.435 14.0667 4.015 13.8067 3.755L12.2467 2.195Z\",\n    fill: \"white\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgEdit);\nexport default __webpack_public_path__ + \"static/media/edit.d79cc2345a4faa8e651274e42f5df856.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport EditIcon from '../../images/edit.svg';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { get, map } from 'lodash';\nimport merchantServices from '../../../../../src/assets/merchant.pdf';\nimport {\n  selectBankDetails,\n  selectBusinessDetails,\n  selectRepresentativeDetails,\n  selectGettingPaidPreferance,\n} from '../../../../redux/Brand/GettingPaid/gettingPaidSelector';\nimport { SummaryValidationSchema } from './ValidationSchema';\nimport '../../Style/brand.style.scss';\nimport '../../Style/brand.media.scss';\nimport '../../Style/brand.dev.scss';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { selectUserDetails } from '../../../../redux/user/userSelector';\nimport { brandAsCustomerAction } from '../../../../actions/brandActions';\n\nexport default function Summary({\n  handleChangeTab,\n  setIsCompleteApplication,\n  setIsEdited,\n  handleConfirmationModelClose,\n}) {\n  const bankDetails = useSelector(selectBankDetails);\n  const representativeDetails = useSelector(selectRepresentativeDetails);\n  const businessDetails = useSelector(selectBusinessDetails);\n  const paidPreferance = useSelector(selectGettingPaidPreferance);\n  const useDetails = useSelector(selectUserDetails);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    watch,\n    formState: { errors, isValid },\n  } = useForm({ resolver: yupResolver(SummaryValidationSchema) });\n\n  const renderEditTab = (tabCode) => {\n    // persistor.pause();\n    // persistor.flush().then(() => {\n    //     return persistor.purge();\n    // });\n    handleChangeTab(tabCode);\n    setIsEdited(true);\n  };\n  const onSubmit = (data) => {\n    console.log('representativeDetails', representativeDetails);\n    let representativeArray = [];\n    map(representativeDetails, (rep, key) => {\n      const data = {\n        firstName: rep?.fname,\n        lastName: rep?.lname,\n        ssn: rep?.ssn,\n        dob: moment(rep?.dob).format('MM/DD/YYYY'),\n        workPhone: rep?.phoneNumber,\n        email: rep?.email,\n        mailingAddress: [\n          {\n            addressLine1: rep?.addressLine1,\n            addressLine2: rep?.addressLine2,\n            city: rep?.city,\n            state: rep?.stateAddress.value,\n            zip: rep?.zipcode,\n            isPrimary: key === 0,\n          },\n        ],\n        actAsAuthorizedSignatory: key === 0,\n        secondaryIdentification: {\n          type: rep?.secondaryIdentificationType.value,\n          id: rep?.idNumber,\n          stateOfIssuance: rep?.soInsurence?.value,\n          //   \"countryOfIssuance\": \"US\"\n        },\n        isUSCitizen: rep?.UScitizen === 'yes',\n        businessDetails: {\n          title: 'Secretary',\n          ownershipPercentage: rep?.percentageOwnership,\n        },\n      };\n      representativeArray.push(data);\n    });\n\n    const formData = {\n      legal_name: businessDetails.businessName,\n      doing_business_as: businessDetails.businessAs,\n      business_email: businessDetails.businessEmail,\n      business_website: businessDetails.website,\n      business_category: businessDetails?.businessCategory?.value,\n      ein: businessDetails.employerIdentificationNumber,\n      ssn: businessDetails?.socialSecurityNumber,\n      state_of_incorporation: businessDetails?.stateOfIncorportation?.value,\n      date_of_incorporation: moment(\n        businessDetails?.dateOfIncorportation\n      ).format('MM/DD/YYYY'),\n      taxIdType: businessDetails?.textIdType ?? 'ein',\n      prior_bankruptcy: businessDetails?.bankruptcy === 'true' ? true : false,\n      date_of_discharge: moment(businessDetails?.dateOfDischarge).format(\n        'MM/DD/YYYY'\n      ),\n      average_sales_volume: businessDetails?.averageSales,\n      average_purchase: businessDetails?.averageSalePrice,\n      average_delivery_time: businessDetails?.averageDeliveryTime?.value,\n      merchant_category_code: businessDetails?.merchantCategoryCode?.value,\n      sales_method: businessDetails?.merchantCategoryCode?.label,\n      product_description: businessDetails?.productionDescription,\n      brand_user_id: useDetails.id,\n      account_type: 'SAVINGS',\n      purpose: 'CONSUMER',\n      countryOfIssuance: businessDetails?.countryAddress?.value,\n      C_Corp_publicly_traded_or_non_profit:\n        paidPreferance.publiclyTraded === 'yes' ? 'YES' : 'NO',\n      business_owner: paidPreferance.authorizedSign === 'yes' ? 'YES' : 'NO',\n      representatives: representativeArray,\n    };\n\n    const bankFormData = {\n      account_holder_name: bankDetails.accountHolderName,\n      account_type: bankDetails.accountType.value,\n      purpose: bankDetails.accountRole.value,\n      routing_number: bankDetails.routingNumber,\n      account_number: bankDetails.accountNumber,\n    };\n\n    if (!formData.taxIdType) {\n      delete formData.taxIdType;\n    }\n    if (\n      !formData.date_of_discharge ||\n      formData.date_of_discharge === 'Invalid date'\n    ) {\n      delete formData.date_of_discharge;\n    }\n    if (!formData.ssn) {\n      delete formData.ssn;\n    }\n\n    dispatch(brandAsCustomerAction(formData, bankFormData));\n    // reset();\n    // setIsCompleteApplication(true);\n  };\n\n  const tnc = watch('tnc');\n  const confirmation = watch('confirmation');\n\n  return (\n    <>\n      <form className=\"gp-right\" onSubmit={handleSubmit(onSubmit)}>\n        <h3 className=\"heading\">Summary</h3>\n        <p>Review and confirm your application details. </p>\n        <div className=\"form-area\">\n          <div className=\"summary-area\">\n            <div className=\"summary-item\">\n              <div className=\"summary-title\">\n                <h4>\n                  Business Details\n                  <button\n                    className=\"button button-dark\"\n                    onClick={() => renderEditTab('1')}\n                  >\n                    <img src={EditIcon} />\n                    Edit Business Details\n                  </button>\n                </h4>\n              </div>\n              <div className=\"sm-item\">\n                <label>Legal name of business</label>\n                <label>{get(businessDetails, 'businessName', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Doing business as</label>\n                <label>{get(businessDetails, 'businessAs', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Business website address</label>\n                <label>{get(businessDetails, 'website', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Business email address</label>\n                <label>{get(businessDetails, 'businessEmail', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Business category</label>\n                <label>\n                  {get(businessDetails, 'businessCategory.label', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Business phone number</label>\n                <label>{get(businessDetails, 'phoneNumber', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>C_Corp - Publicly Traded or Non-Profit</label>\n                <label>{get(paidPreferance, 'publiclyTraded', '-')}</label>\n              </div>\n              {paidPreferance?.publiclyTraded === 'no' && (\n                <div className=\"sm-item\">\n                  <label>Tax ID type</label>\n                  <label>{get(businessDetails, 'textIdType.label', '-')}</label>\n                </div>\n              )}\n\n              {paidPreferance?.publiclyTraded === 'no' &&\n              businessDetails?.textIdType?.value === 'ssn' ? (\n                <div className=\"sm-item\">\n                  <label>Social Security Number (SSN)</label>\n                  <label>\n                    {get(businessDetails, 'socialSecurityNumber', '-')}\n                  </label>\n                </div>\n              ) : (\n                <div className=\"sm-item\">\n                  <label>Employer identification number (EIN)</label>\n                  <label>\n                    {get(businessDetails, 'employerIdentificationNumber', '-')}\n                  </label>\n                </div>\n              )}\n              <div className=\"sm-item\">\n                <label>Address</label>\n                <label>\n                  {get(businessDetails, 'countryAddress.label', '-')}\n                  <br />\n                  {get(businessDetails, 'stateAddress.label', '-')}\n                  <br />\n                  {get(businessDetails, 'addressLine1', '-')}\n                  <br />\n                  {get(businessDetails, 'addressLine2', '-')}\n                  <br />\n                  {get(businessDetails, 'city', '-')}{' '}\n                  {get(businessDetails, 'zipcode', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>State of incorporation</label>\n                <label>\n                  {get(businessDetails, 'stateOfIncorportation.label', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Date of incorporation</label>\n                <label>\n                  {get(businessDetails, 'dateOfIncorportation', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Prior bankruptcy</label>\n                <label>{get(businessDetails, 'bankruptcy', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>\n                  Estimated average sales volume on ShopDot (Monthly)\n                </label>\n                <label>${get(businessDetails, 'averageSales', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>\n                  Estimated average wholesale price on ShopDot (per item)\n                </label>\n                <label>${get(businessDetails, 'averageSalePrice', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Average delivery time</label>\n                <label>\n                  {get(businessDetails, 'averageDeliveryTime.label', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Merchant category code</label>\n                <label>\n                  {get(businessDetails, 'merchantCategoryCode.label', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Sales method</label>\n                <label>{get(businessDetails, 'salesMethod.label', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Product description</label>\n                <label>\n                  {get(businessDetails, 'productionDescription', '-')}\n                </label>\n              </div>\n            </div>\n            {representativeDetails.length > 0 &&\n              representativeDetails.map((item, index) => {\n                return (\n                  <div className=\"summary-item mt-3\" key={index}>\n                    <div className=\"summary-title\">\n                      <h4>\n                        Business Representative <span>#{index + 1}</span>\n                        <button\n                          className=\"button button-dark\"\n                          onClick={() => renderEditTab('2')}\n                        >\n                          <img src={EditIcon} />\n                          Edit Business Representative\n                        </button>\n                      </h4>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Legal name of business representative</label>\n                      <label>\n                        {get(item, 'fname', '-')} {get(item, 'lname', '-')}\n                      </label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Phone number</label>\n                      <label>{get(item, 'phoneNumber', '-')}</label>\n                    </div>\n\n                    <div className=\"sm-item\">\n                      <label>Social Security Number (SSN)</label>\n                      <label>{get(item, 'ssn', '-')}</label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Date of birth</label>\n                      <label>{get(item, 'dob', '-')}</label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Email address</label>\n                      <label>{get(item, 'email', '-')}</label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Address</label>\n                      <label>\n                        {get(item, 'stateAddress.label', '-')}\n                        <br />\n                        {get(item, 'addressLine1', '-')}\n                        <br />\n                        {get(item, 'addressLine2', '-')}\n                        <br />\n                        {get(item, 'city', '-')} {get(item, 'zipcode', '-')}\n                      </label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label className=\"sm-sub-title\">\n                        Secondary Identification\n                      </label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Identification type</label>\n                      <label>\n                        {get(item, 'secondaryIdentificationType.label', '-')}\n                      </label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>ID number</label>\n                      <label>{get(item, 'idNumber', '-')}</label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>State of issuance</label>\n                      <label>\n                        {get(item, 'soInsurence.label', null) ??\n                          get(item, 'stateAddress.label', '-')}\n                      </label>\n                    </div>\n                    {index === 0 && (\n                      <div className=\"sm-item\">\n                        <label>Authorized signer</label>\n                        <label>\n                          {get(paidPreferance, 'authorizedSign', '-')}\n                        </label>\n                      </div>\n                    )}\n                    <div className=\"sm-item\">\n                      <label>Business owner</label>\n                      <label>\n                        {get(paidPreferance, 'businessOwner', 'yes')}\n                      </label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>U.S. citizen</label>\n                      <label>{get(item, 'UScitizen', '-')}</label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Percentage ownership</label>\n                      <label>\n                        {' '}\n                        {get(item, 'percentageOwnership', 0)\n                          ? get(item, 'percentageOwnership')\n                          : 0}\n                        %\n                      </label>\n                    </div>\n                  </div>\n                );\n              })}\n\n            <div className=\"summary-item mt-3\">\n              <div className=\"summary-title\">\n                <h4>\n                  Bank Details\n                  <button\n                    className=\"button button-dark\"\n                    onClick={() => renderEditTab('3')}\n                  >\n                    <img src={EditIcon} />\n                    Edit Bank Details\n                  </button>\n                </h4>\n              </div>\n              <div className=\"sm-item\">\n                <label>Name of the bank account holder</label>\n                <label>{get(bankDetails, 'accountHolderName', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Bank account type</label>\n                <label>{get(bankDetails, 'accountType.label', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Purpose</label>\n                <label>{get(bankDetails, 'accountRole.label', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Account number</label>\n                <label>{get(bankDetails, 'accountNumber', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Routing number</label>\n                <label>{get(bankDetails, 'routingNumber', '-')}</label>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"form-area check-box summary-checklist\">\n          <label htmlFor=\"check-a\" className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              name=\"cehck-a\"\n              id=\"check-a\"\n              {...register('confirmation', { required: true })}\n            />\n            <div className=\"checkbox-text\">\n              <span>I confirm that the details I have entered are true.</span>\n            </div>\n            {errors.confirmation && (\n              <span className=\"error-text\">{errors.confirmation?.message}</span>\n            )}\n          </label>\n          <label htmlFor=\"check-b\" className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              name=\"check-b\"\n              id=\"check-b\"\n              {...register('tnc', { required: true })}\n            />\n            <div className=\"checkbox-text\">\n              <span>\n                I agree with the{' '}\n                <Link to={merchantServices} target=\"_blank\">\n                  Terms and Conditions\n                </Link>{' '}\n                set by Priority Technology Holdings, Inc. (&quot;PRTH&quot;)\n              </span>\n            </div>\n            {errors.tnc && (\n              <span className=\"error-text\">{errors.tnc?.message}</span>\n            )}\n          </label>\n        </div>\n        <div className=\"form-area\">\n          <div className=\"form-input form-submit\">\n            <button\n              type=\"button\"\n              onClick={() => handleConfirmationModelClose()}\n              className=\"button button-grey cancel\"\n            >\n              Back\n            </button>\n            <button\n              disabled={!isValid}\n              type=\"submit\"\n              className=\"button summary-icon\"\n            >\n              Submit\n            </button>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n}\n\nSummary.propTypes = {\n  handleChangeTab: PropTypes.func,\n  setIsCompleteApplication: PropTypes.func,\n  setIsEdited: PropTypes.func,\n  handleConfirmationModelClose: PropTypes.func,\n};\n","import * as yup from 'yup';\nimport { store } from '../../../../redux/store';\n\nexport const BusinessDetailsValidationSchema = yup.object().shape({\n  businessName: yup.string().required('Legal business name is required.'),\n  businessAs: yup\n    .string()\n    .required('Doing business is required.')\n    .test(\n      'businessname',\n      'doing business is different than the legal name',\n      function (business) {\n        return business ? business !== this.parent.businessName : true;\n      }\n    ),\n  website: yup\n    .string()\n    .url('Please enter a valid URL')\n    .required('Business website address is required.'),\n  businessEmail: yup\n    .string()\n    .email('Must be a valid email.')\n    .max(255)\n    .required('Business email address is required.'),\n  businessCategory: yup\n    .object()\n    .nullable()\n    .required('Business category is required.'),\n  textIdType: yup.object().when('businessCategory', {\n    is: (businessCategory) =>\n      businessCategory?.value === 'single_member_llc' ||\n      businessCategory?.value === 'sole_proprietor',\n    then: yup.object().nullable().required('TextID is required'),\n  }),\n  // employerIdentificationNumber: yup\n  //     .object()\n  //     .nullable()\n  //     .required('Employer identification number is required'),\n  // socialSecurityNumber: yup\n  //     .object()\n  //     .nullable()\n  //     .required('Social security number is required'),\n  // employerIdentificationNumber: yup.string().when('businessCategory', {\n  //     is: (businessCategory) =>\n  //         businessCategory?.value !== 'single_member_llc' ||\n  //         businessCategory?.value !== 'sole_proprietor',\n  //     then: yup\n  //         .string()\n  //         .required('Employer identification number is required'),\n  // }),\n  // socialSecurityNumber: yup\n  //     .string()\n  //     .when('textIdType', {\n  //         is: (textIdType) => textIdType?.value === 'ssn',\n  //         then: yup.string().required('Social security number is required'),\n  //     })\n  //     .when('businessCategory', {\n  //         is: (businessCategory) =>\n  //             businessCategory?.value === 'single_member_llc' ||\n  //             businessCategory?.value === 'sole_proprietor',\n  //         then: yup.string().required('Social security number is required'),\n  //     }),\n  phoneNumber: yup\n    .string()\n    .nullable()\n    .required('Phone number is required.')\n    .min(12, 'Phone should be 10 digits.'),\n  addressLine1: yup.string().nullable().required('Address line 1 is required.'),\n  countryAddress: yup.object().nullable().required('Country is require.'),\n  stateAddress: yup.object().nullable().required('State is require.'),\n  city: yup.string().required('City is required.'),\n  zipcode: yup\n    .string()\n    .nullable()\n    .notOneOf(\n      ['00000'],\n      'Should be in XXXXX format.Cannot containt all zeroes.'\n    )\n    .min(5, 'Should be in XXXXX format.')\n    .max(5, 'Zip-code should be 5 digits.')\n    .required('Zip-code is required.'),\n  stateOfIncorportation: yup\n    .object()\n    .nullable()\n    .required('State of incorporation is required.'),\n  dateOfIncorportation: yup\n    .string()\n    .nullable()\n    .required('Date of incorporation is required.'),\n  bankruptcy: yup.string().nullable().required('Prior bankruptcy is required.'),\n  dateOfDischarge: yup.string().when('bankruptcy', {\n    is: (bankruptcy) => bankruptcy === 'yes',\n    then: yup.string().nullable().required('Date of discharge is required.'),\n  }),\n  averageSales: yup\n    .string()\n    .required('Estimated average sales volume on shopdot is required.'),\n  averageSalePrice: yup\n    .string()\n    .required('Estimated average sale price on shopdot is required.'),\n  averageDeliveryTime: yup\n    .object()\n    .nullable()\n    .required('Average delivery time is required.'),\n  merchantCategoryCode: yup\n    .object()\n    .nullable()\n    .required('Merchant category code is required.'),\n  salesMethod: yup.object().nullable().required('Sales method is required.'),\n  productionDescription: yup\n    .string()\n    .required('Product description is required.'),\n  // phone: yup\n  //     .string()\n  //     .matches(/^\\d{10}$/, 'Phone number must be 10 digits')\n  //     .transform((value, originalValue) => {\n  //         if (!originalValue) return originalValue;\n  //         const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n  //         const phoneNumberLength = phoneNumber.length;\n  //         if (phoneNumberLength < 4) return phoneNumber;\n  //         if (phoneNumberLength < 7) {\n  //             return `${phoneNumber.slice(0, 3)}-${phoneNumber.slice(3)}`;\n  //         }\n  //         return `${phoneNumber.slice(0, 3)}-${phoneNumber.slice(\n  //             3,\n  //             6\n  //         )}-${phoneNumber.slice(6)}`;\n  //     }),\n  // phone: yup\n  //     .string()\n  //     .matches(phoneRegExp, 'Phone number is not in the correct format')\n  //     .transform((value, originalValue) => {\n  //         const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n  //         const hasNonRepeatedConsecutiveNumbers = !/(.)\\1{2,}/.test(\n  //             phoneNumber\n  //         );\n  //         console.log(\n  //             'phoneNumber',\n  //             hasNonRepeatedConsecutiveNumbers,\n  //             phoneNumber,\n  //             value\n  //         );\n  //         if (hasNonRepeatedConsecutiveNumbers) {\n  //             const newNumber = `${phoneNumber.slice(\n  //                 0,\n  //                 3\n  //             )}-${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n  //             console.log('newNumber-------------------', newNumber);\n  //             return newNumber;\n  //         }\n  //         return originalValue;\n  //     }),\n\n  // phone: yup\n  //     .string()\n  //     .required('Phone number is required')\n  //     .transform((value, originalValue) => {\n  //         // If value is not undefined, remove all non-digit characters and format\n  //         if (value) {\n  //             const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n  //             const newNumber = `${phoneNumber.slice(\n  //                 0,\n  //                 3\n  //             )}-${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n  //             return newNumber;\n  //         }\n\n  // const rawValue = value.replace(/[^\\d]/g, ''); // Remove all non-digits\n  // let formattedValue = '';\n  // if (rawValue.length < 4) {\n  //     formattedValue = rawValue;\n  // } else if (rawValue.length < 7) {\n  //     formattedValue = `${rawValue.slice(0, 3)}-${rawValue.slice(3)}`;\n  // } else {\n  //     formattedValue = `${rawValue.slice(0, 3)}-${rawValue.slice(\n  //         3,\n  //         6\n  //     )}-${rawValue.slice(6, 10)}`;\n  // }\n  // If value is undefined, return empty string\n  //     return '';\n  // })\n  // .matches(/^\\d{10}$/, 'Phone number must be 10 digits'),\n\n  // phone: yup\n  //     .string()\n  //     .matches(/^\\d{10}$/, 'Phone number must be 10 digits')\n  //     .transform((value) =>\n  //         value ? value.replace(/(\\d{2})(\\d{3})(\\d{4})/, '$1-$2-$3') : ''\n  //     )\n  //     .nullable()\n  //     .required('Phone number is required'),\n\n  // phone: yup\n  //     .string()\n  //     .matches(phoneRegExp, 'Phone number must be 10 digits')\n  //     .transform((value, originalValue) =>\n  //         originalValue\n  //             ? originalValue.replace(/^(\\d{2})(\\d{3})(\\d{4})$/, '$1-$2-$3')\n  //             : ''\n  //     )\n  //     .nullable()\n  //     .required('Phone number is required'),\n});\n\nexport const getRepresentativeValidation = () => {\n  // Get the store data\n  const storeData = store.getState();\n  const { gettingPaid } = storeData;\n  const { businessDetails } = gettingPaid;\n\n  return yup.object().shape({\n    representativeDetails: yup.array().of(\n      yup.object().shape({\n        fname: yup\n          .string()\n          .nullable()\n          .required('Legal person first name is required.'),\n        lname: yup\n          .string()\n          .nullable()\n          .required('Legal person last name is required.'),\n        phoneNumber: yup\n          .string()\n          .nullable()\n          .required('Phone number is required.')\n          .min(12, 'Phone should be 10 digits.'),\n        ssn: yup\n          .string()\n          .nullable()\n          .required('SSN is required.')\n          .min(11, 'SSN should be 9 digit.'),\n        dob: yup.string().nullable().required('Date of birth is required.'),\n        email: yup\n          .string()\n          .email('Must be a valid email.')\n          .max(255)\n          .required('Email address is required.'),\n        countryAddress: yup.object().nullable().required('Country is require.'),\n        stateAddress: yup.object().nullable().required('State is require.'),\n        addressLine1: yup\n          .string()\n          .nullable()\n          .required('Address line 1 is required.'),\n        city: yup.string().required('City is required.'),\n        zipcode: yup\n          .string()\n          .nullable()\n          .notOneOf(\n            ['00000'],\n            'Should be in XXXXX format.Cannot containt all zeroes.'\n          )\n          .min(5, 'Should be in XXXXX format.')\n          .max(5, 'Zip-code should be 5 digits.')\n          .required('Zip-code is required.'),\n        secondaryIdentificationType: yup\n          .object()\n          .nullable()\n          .required('Secondary identification is required.'),\n        soInsurence: yup\n          .object()\n          .nullable()\n          .when('secondaryIdentificationType', {\n            is: (secondaryIdentificationType) =>\n              secondaryIdentificationType?.value === 'dl',\n            then: yup\n              .object()\n              .nullable()\n              .required('State of issuance is required.'),\n          }),\n        idNumber: yup.string().nullable().required('Id number is required.'),\n        percentageOwnership: yup\n          .mixed()\n          .required('Ownership percentage must be 100%.')\n          .test(\n            'is-valid-settings',\n            'Ownership percentage must be 100%.',\n            (value, context) => {\n              console.log('context', context);\n              // Custom validation function for the 'percentageOwnership' field\n              if (businessDetails?.businessCategory?.value === 'partnership') {\n                if (\n                  value !== '' &&\n                  !isNaN(value) &&\n                  (Number(value) === 100 ||\n                    (Number(value) >= 25 && Number(value) <= 100))\n                ) {\n                  return true;\n                }\n                return context.createError({\n                  message:\n                    Number(value) > 100\n                      ? 'Ownership percentage is invalid!'\n                      : 'Ownership percentage must be 25% or more',\n                  path: context.path,\n                });\n              } else if (\n                businessDetails?.businessCategory?.value ===\n                  'single_member_llc' ||\n                businessDetails?.businessCategory?.value === 'sole_proprietor'\n              ) {\n                if (value !== '' && !isNaN(value) && Number(value) === 100) {\n                  return true;\n                }\n                return false;\n              }\n              if (\n                value !== '' &&\n                !isNaN(value) &&\n                (Number(value) === 100 ||\n                  (Number(value) >= 25 && Number(value) <= 100))\n              ) {\n                return true;\n              }\n              return context.createError({\n                message:\n                  Number(value) > 100\n                    ? 'Ownership percentage is invalid!'\n                    : 'Ownership percentage must be 25% or more',\n                path: context.path,\n              });\n            }\n          ),\n      })\n    ),\n  });\n};\n\nexport const BusinessRepresentativeValidationSchema = yup.object().shape({\n  representativeDetails: yup.array().of(\n    yup.object().shape({\n      fname: yup\n        .string()\n        .nullable()\n        .required('Legal person first name is required.'),\n      lname: yup\n        .string()\n        .nullable()\n        .required('Legal person last name is required.'),\n      // phoneNumber: yup\n      //     .string()\n      // .matches(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/, 'Invalid phone number')\n      // .notOneOf(['00000'], 'Should be in XXX-XXX-XXXX format and Cannot be all zeroes.')\n      // .min(10, 'Phone should be 10 digits.')\n      // .max(10, 'Phone should be 10 digits.')\n      // .required('Phone number is required.'),\n      phoneNumber: yup\n        .string()\n        .nullable()\n        .required('Phone number is required.')\n        .min(12, 'Phone should be 10 digits.'),\n      ssn: yup\n        .string()\n        .nullable()\n        .required('SSN is required.')\n        .min(11, 'SSN should be 9 digit.')\n        .max(11, 'SSN should be 9 digit.'),\n      dob: yup.string().nullable().required('Date of birth is required.'),\n      email: yup\n        .string()\n        .email('Must be a valid email.')\n        .max(255)\n        .required('Email address is required.'),\n      countryAddress: yup.object().nullable().required('Country is require.'),\n      stateAddress: yup.object().nullable().required('State is require.'),\n      addressLine1: yup\n        .string()\n        .nullable()\n        .required('Address line 1 is required.'),\n      city: yup.string().required('City is required.'),\n      zipcode: yup\n        .string()\n        .nullable()\n        .notOneOf(\n          ['00000'],\n          'Should be in XXXXX format.Cannot containt all zeroes.'\n        )\n        .min(5, 'Should be in XXXXX format.')\n        .max(5, 'Zip-code should be 5 digits.')\n        .required('Zip-code is required.'),\n      secondaryIdentificationType: yup\n        .object()\n        .nullable()\n        .required('Secondary identification is required.'),\n      soInsurence: yup\n        .object()\n        .nullable()\n        .when('secondaryIdentificationType', {\n          is: (secondaryIdentificationType) =>\n            secondaryIdentificationType?.value === 'dl',\n          then: yup\n            .object()\n            .nullable()\n            .required('State of issuance is required.'),\n        }),\n      idNumber: yup.string().nullable().required('Id number is required.'),\n    })\n  ),\n});\n\nexport const BankDetailsValidationSchema = yup.object().shape({\n  accountHolderName: yup\n    .string()\n    .required('Bank account holder name is required.'),\n  accountType: yup\n    .object()\n    .nullable()\n    .required('Bank account type is required.'),\n  accountRole: yup.object().nullable().required('Purpose is required.'),\n  accountNumber: yup\n    .string()\n    .required('Account number is required.')\n    .max(8, 'Account number should be 8 digits.')\n    .min(8, 'Account number should be 8 digits.'),\n  routingNumber: yup\n    .string()\n    .required('Routing number is require')\n    .max(9, 'Routing number should be 9 digits.')\n    .min(9, 'Routing number should be 9 digits.'),\n});\n\nexport const SummaryValidationSchema = yup.object().shape({\n  confirmation: yup\n    .boolean()\n    .oneOf([true], 'uou need to accept the confirm details'),\n  tnc: yup\n    .boolean()\n    .oneOf([true], 'you need to accept the terms and conditions'),\n});\n\nexport const shippingValidationSchema = yup.object().shape({\n  address1: yup.string().required('Address 1 is required.'),\n  daystofulfill: yup\n    .object()\n    .nullable()\n    .required('Days to fultill  is required.'),\n  state: yup\n    .object()\n    .shape({\n      label: yup.string().required('State is required.'),\n      value: yup.string().required('State is required.'),\n    })\n    .nullable()\n    .required('State is required.'),\n  country: yup\n    .object()\n    .shape({\n      label: yup.string().required('Country is required.'),\n      value: yup.string().required('Country is required.'),\n    })\n    .nullable()\n    .required('Country is required.'),\n  city: yup.string().required('City is required.'),\n  shippingfee: yup.string().required('Shipping fee is required.'),\n  incrementalfee: yup.string().required('Incremental fee is required.'),\n  zip: yup.string().required('Zip-code is required.'),\n});\n\nexport const brandProfileValidationSchema = yup.object().shape({\n  company_name: yup.string().required('Company name is required.'),\n  company_email_address: yup\n    .string()\n    .email('Must be a valid email.')\n    .max(255)\n    .required('Contact email is required.'),\n  company_phone_number: yup\n    .string()\n    .nullable()\n    .required('Contact phone number is required.')\n    .min(12, 'Contact phone should be 10 digits.'),\n  store_name: yup.string().required('Brand name is required.'),\n  store_website: yup\n    .string()\n    .url('Please enter a valid URL')\n    .required('Brand website is required.'),\n  brand_categories: yup\n    .array()\n    .min(1, 'At least 1 category required')\n    .nullable()\n    .required('Select max 3 category.'),\n  brand_values: yup\n    .array()\n    .min(1, 'At least 1 value required')\n    .nullable()\n    .required('Select max 3 values.'),\n  brand_story: yup.string().required('About the brand is required.'),\n  brand_promo: yup.string().url('Please enter a valid URL'),\n});\n"],"names":["Summary","_ref","_businessDetails$text2","_errors$confirmation","_errors$tnc","handleChangeTab","setIsEdited","setIsCompleteApplication","handleConfirmationModelClose","bankDetails","useSelector","selectBankDetails","representativeDetails","selectRepresentativeDetails","businessDetails","selectBusinessDetails","paidPreferance","selectGettingPaidPreferance","useDetails","selectUserDetails","dispatch","useDispatch","_useForm","useForm","resolver","yupResolver","SummaryValidationSchema","register","handleSubmit","watch","reset","_useForm$formState","formState","errors","isValid","renderEditTab","tabCode","_jsx","_Fragment","children","_jsxs","className","onSubmit","data","_businessDetails$busi","_businessDetails$stat","_businessDetails$text","_businessDetails$aver","_businessDetails$merc","_businessDetails$merc2","_businessDetails$coun","console","log","representativeArray","map","rep","key","_rep$soInsurence","firstName","fname","lastName","lname","ssn","dob","moment","format","workPhone","phoneNumber","email","mailingAddress","addressLine1","addressLine2","city","state","stateAddress","value","zip","zipcode","isPrimary","actAsAuthorizedSignatory","secondaryIdentification","type","secondaryIdentificationType","id","idNumber","stateOfIssuance","soInsurence","isUSCitizen","UScitizen","title","ownershipPercentage","percentageOwnership","push","formData","legal_name","businessName","doing_business_as","businessAs","business_email","businessEmail","business_website","website","business_category","businessCategory","ein","employerIdentificationNumber","socialSecurityNumber","state_of_incorporation","stateOfIncorportation","date_of_incorporation","dateOfIncorportation","taxIdType","textIdType","prior_bankruptcy","bankruptcy","date_of_discharge","dateOfDischarge","average_sales_volume","averageSales","average_purchase","averageSalePrice","average_delivery_time","averageDeliveryTime","merchant_category_code","merchantCategoryCode","sales_method","label","product_description","productionDescription","brand_user_id","account_type","purpose","countryOfIssuance","countryAddress","C_Corp_publicly_traded_or_non_profit","publiclyTraded","business_owner","authorizedSign","representatives","bankFormData","account_holder_name","accountHolderName","accountType","accountRole","routing_number","routingNumber","account_number","accountNumber","brandAsCustomerAction","onClick","src","EditIcon","get","length","item","index","_get","htmlFor","_objectSpread","name","required","confirmation","message","Link","to","merchantServices","target","tnc","disabled","BusinessDetailsValidationSchema","yup","shape","test","business","this","parent","url","max","nullable","when","is","then","min","notOneOf","salesMethod","getRepresentativeValidation","store","gettingPaid","of","context","_businessDetails$busi2","_businessDetails$busi3","isNaN","Number","createError","path","BusinessRepresentativeValidationSchema","BankDetailsValidationSchema","oneOf","shippingValidationSchema","address1","daystofulfill","country","shippingfee","incrementalfee","brandProfileValidationSchema","company_name","company_email_address","company_phone_number","store_name","store_website","brand_categories","brand_values","brand_story","brand_promo"],"sourceRoot":""}