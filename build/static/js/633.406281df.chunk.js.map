{"version":3,"file":"static/js/633.406281df.chunk.js","mappings":"+IAkBMA,EAAQC,EAAAA,QAAOC,MAAKC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,ygDASJC,EAAAA,GACFC,EAAAA,GAEUC,EAAAA,GACNC,EAAAA,GACNC,EAAAA,GACDC,EAAAA,GAEUC,EAAAA,GACFC,EAAAA,GACHC,EAAAA,GAGFC,EAAAA,GAKOC,EAAAA,GACIC,EAAAA,GAIJD,EAAAA,GACIC,EAAAA,GAIJD,EAAAA,GACIC,EAAAA,GASJC,EAAAA,GACIC,EAAAA,IAqB/B,K,wKCvFaC,EAAkB,SAACC,GAAK,OAAKA,EAAMC,QAAS,E,wCCYnDC,EAAmBC,EAAAA,KAEtBC,MAAM,CACLC,SAAUF,EAAAA,KAAaG,SAAS,yBAChCC,YAAaJ,EAAAA,KAEVG,SAAS,yBACTE,QACC,8DACA,uGAEJC,mBAAoBN,EAAAA,KAEjBO,MAAM,CAACP,EAAAA,GAAQ,eAAgB,MAAO,yBACtCG,SAAS,mCAEbA,WAEY,SAASK,IAAiB,IAADC,EAAAC,EAAAC,EACtCC,GAAwCC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAA8CL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAA4DT,EAAAA,EAAAA,WAAS,GAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAnEE,EAAsBD,EAAA,GAAEE,EAAyBF,EAAA,GACxDG,GAKIC,EAAAA,EAAAA,IAAQ,CAAEC,UAAUC,EAAAA,EAAAA,GAAY9B,GAAmB+B,QAAQ,IAJ7DC,EAAQL,EAARK,SACAC,EAAYN,EAAZM,aACAC,EAAKP,EAALO,MACaC,EAAMR,EAAnBS,UAAaD,OAGTE,GAAWC,EAAAA,EAAAA,MAGXC,IADWC,EAAAA,EAAAA,IAAY3C,IACT2C,EAAAA,EAAAA,IAAYC,EAAAA,KAkBhC,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,UACpCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,UACpCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,UACpBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBAIVC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UAC3BC,EAAAA,EAAAA,KAAA,OAAKC,GAAG,WAAUF,UAChBC,EAAAA,EAAAA,KAAA,QAAME,SAAUd,GA5BT,SAACe,IACXC,EAAAA,EAAAA,SAAQD,EAAK7C,YAChBkC,GACEa,EAAAA,EAAAA,IACE,CACEC,aAAcH,EAAK7C,SACnBA,SAAU6C,EAAK3C,YACf+C,iBAAkBJ,EAAKzC,oBAEzBgC,EAAYO,KAGhBZ,IAEJ,IAciDU,UACrCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,aAAYC,SAAC,kBAC9BC,EAAAA,EAAAA,KAACnE,EAAAA,GAAK2E,EAAAA,EAAAA,GAAA,CACJV,UAAS,GAAAW,OACD,OAANnB,QAAM,IAANA,GAAAA,EAAQhC,SAAW,aAAe,GAAE,0BAEtCoD,KAAMtC,EAAe,WAAa,OAClCuC,KAAK,YACDxB,EAAS,WAAY,CACvB5B,UAAU,OAGdyC,EAAAA,EAAAA,KAAA,QACEF,UAAS,iBAAAW,OACPrC,EAAe,GAAK,UAEtBwC,QAAS,kBAAMvC,GAAiBD,EAAa,KAExC,OAANkB,QAAM,IAANA,OAAM,EAANA,EAAQhC,YACP0C,EAAAA,EAAAA,KAAA,SAAOF,UAAU,wBAAuBC,SAC/B,OAANT,QAAM,IAANA,GAAgB,QAAVzB,EAANyB,EAAQhC,gBAAQ,IAAAO,OAAV,EAANA,EAAkBgD,cAIzBhB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mCAAkCC,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,aAAYC,SAAC,kBAC9BC,EAAAA,EAAAA,KAACnE,EAAAA,GAAK2E,EAAAA,EAAAA,GAAA,CACJV,UAAS,GAAAW,OACD,OAANnB,QAAM,IAANA,GAAAA,EAAQ9B,YAAc,aAAe,GAAE,0BAEzCkD,KAAMlC,EAAkB,WAAa,OACrCmC,KAAK,eACDxB,EAAS,cAAe,CAC1B5B,UAAU,OAGdyC,EAAAA,EAAAA,KAAA,QACEF,UAAS,iBAAAW,OACPjC,EAAkB,GAAK,UAEzBoC,QAAS,kBAAMnC,GAAoBD,EAAgB,KAE9C,OAANc,QAAM,IAANA,OAAM,EAANA,EAAQ9B,eACPwC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,wBAAuBC,SAC/B,OAANT,QAAM,IAANA,GAAmB,QAAbxB,EAANwB,EAAQ9B,mBAAW,IAAAM,OAAb,EAANA,EAAqB+C,WAG1BhB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBACfD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,SAAC,oBAChCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,8BACPC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,2CACPC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,2CACPC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,yCACPC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,6CAKfF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,aAAYC,SAAC,0BAC9BC,EAAAA,EAAAA,KAACnE,EAAAA,GAAK2E,EAAAA,EAAAA,GAAA,CACJV,UAAS,GAAAW,OACD,OAANnB,QAAM,IAANA,GAAAA,EAAQ5B,mBAAqB,aAAe,GAAE,0BAEhDgD,KAAM9B,EAAyB,WAAa,OAC5C+B,KAAK,sBACDxB,EAAS,qBAAsB,CACjC5B,UAAU,OAGdyC,EAAAA,EAAAA,KAAA,QACEF,UAAS,iBAAAW,OACP7B,EAAyB,GAAK,UAEhCgC,QAAS,kBACP/B,GAA2BD,EAAuB,KAG/C,OAANU,QAAM,IAANA,OAAM,EAANA,EAAQ5B,sBACPsC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,wBAAuBC,SAC/B,OAANT,QAAM,IAANA,GAA0B,QAApBvB,EAANuB,EAAQ5B,0BAAkB,IAAAK,OAApB,EAANA,EAA4B8C,iBAKrCb,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACxBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,UACEY,QAAS,kBAAMvB,GAAO,EACtBS,UAAU,4BACVC,SACD,YAGDC,EAAAA,EAAAA,KAAA,UACEU,KAAK,SACLZ,UAAU,SACVC,SACD,0BAUfC,EAAAA,EAAAA,KAACc,EAAAA,GAAc,MAGrB,C","sources":["components/common/Input/divStyled.js","redux/Brand/Security/securitySelector.js","pages/Brand/Settings/Security/index.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n    orange100,\n    inputTransitionSpeed,\n    inputBackground,\n    inuputHeight,\n    inputPadding,\n    inputBorderRadius,\n    inputBorderColor,\n    inputFonstSize,\n    inputFontFamily,\n    inputColor,\n    inputFocusBorderColor,\n    inputFocusBackgroundColor,\n    inputValidBorderColor,\n    inputValidBackgroundColor,\n} from '../../../theme/variables';\n\nconst Input = styled.input`\n    // display: flex;\n    // align-items: center;\n    // align-content: center;\n    // z-index: 0;\n    // -webkit-appearance: none;\n    // appearance: none;\n    // width: 100%;\n    // box-sizing: border-box;\n    // font-family: ${inputFontFamily};\n    // font-size: ${inputFonstSize};\n    // font-weight: 400;\n    // border: 0.1rem solid ${inputBorderColor};\n    // border-radius: ${inputBorderRadius};\n    // padding: ${inputPadding};\n    // height: ${inuputHeight};\n    // outline: none;\n    // background-color: ${inputBackground};\n    // transition: all ${inputTransitionSpeed} ease;\n    // caret-color: ${orange100};\n    //\n    // &::place-holder {\n    //     color: ${inputColor};\n    //     opacity: 0.64;\n    // }\n    //\n    // &.invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus:required:invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:required:valid {\n    //     border-color: var(--orange-tint-10);\n    //     background-color: var(--white);\n    // }\n    //\n    // &.valid {\n    //     border-color: ${inputValidBorderColor};\n    //     background-color: ${inputValidBackgroundColor};\n    // }\n\n    background: #fffcf9;\n    border: 1px solid #f3e0d2;\n    border-radius: 4px;\n    height: 4rem;\n    padding: 1rem 1.2rem;\n    display: block;\n    width: 100%;\n    margin-top: 0.6rem;\n    appearance: none;\n    box-sizing: border-box;\n    font-family: 'Mulish', sans-serif;\n    outline: none;\n\n    &.invalid {\n        border-color: #eb5757;\n    }\n`;\n\nexport default Input;\n","export const securityDetails = (state) => state.security;\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport Input from '../../../../components/common/Input/divStyled';\r\nimport { changePassword } from '../../../../actions/brandActions';\r\nimport { securityDetails } from '../../../../redux/Brand/Security/securitySelector';\r\nimport { selectUserDetails } from '../../../../redux/user/userSelector';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { isEmpty } from 'lodash';\r\n\r\nconst validationSchema = yup\r\n  .object()\r\n  .shape({\r\n    password: yup.string().required('Password is required.'),\r\n    newpassword: yup\r\n      .string()\r\n      .required('Password is required.')\r\n      .matches(\r\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\r\n        'Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character.'\r\n      ),\r\n    confirmNewPassword: yup\r\n      .string()\r\n      .oneOf([yup.ref('newpassword'), null], 'Passwords must match.')\r\n      .required('Password confirm is required.'),\r\n  })\r\n  .required();\r\n\r\nexport default function BrandSecurity() {\r\n  const [passwordType, setPasswordType] = useState(true);\r\n  const [passwordTypeNew, setPasswordTypeNew] = useState(true);\r\n  const [passwordTypeConfirmNew, setPasswordTypeConfirmNew] = useState(true);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({ resolver: yupResolver(validationSchema), onBlur: true });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const security = useSelector(securityDetails);\r\n  const userDetails = useSelector(selectUserDetails);\r\n\r\n  const onSubmit = (data) => {\r\n    if (!isEmpty(data.password)) {\r\n      dispatch(\r\n        changePassword(\r\n          {\r\n            old_password: data.password,\r\n            password: data.newpassword,\r\n            confirm_password: data.confirmNewPassword,\r\n          },\r\n          userDetails.id\r\n        )\r\n      );\r\n      reset();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"products_content\">\r\n      <div className=\"products_head mp-head\">\r\n        <div className=\"products_head-content\">\r\n          <div className=\"title\">\r\n            <h1>Security</h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"products_body\">\r\n        <div className=\"content_area\">\r\n          <div id=\"security\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <div className=\"security_info\">\r\n                <h2>Change Password</h2>\r\n                <div className=\"form-area\">\r\n                  <div className=\"form-input mb-4\">\r\n                    <label className=\"form-label\">Old password</label>\r\n                    <Input\r\n                      className={`${\r\n                        errors?.password ? 'is-invalid' : ''\r\n                      } form-control password`}\r\n                      type={passwordType ? 'password' : 'text'}\r\n                      name=\"password\"\r\n                      {...register('password', {\r\n                        required: true,\r\n                      })}\r\n                    />\r\n                    <span\r\n                      className={`password-show ${\r\n                        passwordType ? '' : 'active'\r\n                      }`}\r\n                      onClick={() => setPasswordType(!passwordType)}\r\n                    />\r\n                    {errors?.password && (\r\n                      <small className=\"invalid-feedback mb-0\">\r\n                        {errors?.password?.message}\r\n                      </small>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-input mb-4 password-tooltip\">\r\n                    <label className=\"form-label\">New password</label>\r\n                    <Input\r\n                      className={`${\r\n                        errors?.newpassword ? 'is-invalid' : ''\r\n                      } form-control password`}\r\n                      type={passwordTypeNew ? 'password' : 'text'}\r\n                      name=\"newpassword\"\r\n                      {...register('newpassword', {\r\n                        required: true,\r\n                      })}\r\n                    />\r\n                    <span\r\n                      className={`password-show ${\r\n                        passwordTypeNew ? '' : 'active'\r\n                      }`}\r\n                      onClick={() => setPasswordTypeNew(!passwordTypeNew)}\r\n                    />\r\n                    {errors?.newpassword && (\r\n                      <small className=\"invalid-feedback mb-0\">\r\n                        {errors?.newpassword?.message}\r\n                      </small>\r\n                    )}\r\n                    <div className=\"tooltip\">\r\n                      <div className=\"tooltip-icon\"></div>\r\n                      <div className=\"tooltip_text\">\r\n                        <div className=\"tooltip-arrow\"></div>\r\n                        <div className=\"pwd-info-title\">Password must:</div>\r\n                        <div className=\"pwd-info\">\r\n                          <label>- have at least 1 number</label>\r\n                          <label>- have at least 1 uppercase character</label>\r\n                          <label>- have at least 1 lowercase character</label>\r\n                          <label>- have at least 1 special character</label>\r\n                          <label>- have 8 characters minimum</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"form-input mb-4\">\r\n                    <label className=\"form-label\">Confirm new password</label>\r\n                    <Input\r\n                      className={`${\r\n                        errors?.confirmNewPassword ? 'is-invalid' : ''\r\n                      } form-control password`}\r\n                      type={passwordTypeConfirmNew ? 'password' : 'text'}\r\n                      name=\"confirmNewPassword\"\r\n                      {...register('confirmNewPassword', {\r\n                        required: true,\r\n                      })}\r\n                    />\r\n                    <span\r\n                      className={`password-show ${\r\n                        passwordTypeConfirmNew ? '' : 'active'\r\n                      }`}\r\n                      onClick={() =>\r\n                        setPasswordTypeConfirmNew(!passwordTypeConfirmNew)\r\n                      }\r\n                    />\r\n                    {errors?.confirmNewPassword && (\r\n                      <small className=\"invalid-feedback mb-0\">\r\n                        {errors?.confirmNewPassword?.message}\r\n                      </small>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-area\">\r\n                  <div className=\"form-input form-submit mt-4\">\r\n                    <button\r\n                      onClick={() => reset()}\r\n                      className=\"button button-grey cancel\"\r\n                      // disabled={security.changePasswordLoading}\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"button\"\r\n                      // disabled={security.changePasswordLoading}\r\n                    >\r\n                      Save\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n"],"names":["Input","styled","input","_templateObject","_taggedTemplateLiteral","inputFontFamily","inputFonstSize","inputBorderColor","inputBorderRadius","inputPadding","inuputHeight","inputBackground","inputTransitionSpeed","orange100","inputColor","inputFocusBorderColor","inputFocusBackgroundColor","inputValidBorderColor","inputValidBackgroundColor","securityDetails","state","security","validationSchema","yup","shape","password","required","newpassword","matches","confirmNewPassword","oneOf","BrandSecurity","_errors$password","_errors$newpassword","_errors$confirmNewPas","_useState","useState","_useState2","_slicedToArray","passwordType","setPasswordType","_useState3","_useState4","passwordTypeNew","setPasswordTypeNew","_useState5","_useState6","passwordTypeConfirmNew","setPasswordTypeConfirmNew","_useForm","useForm","resolver","yupResolver","onBlur","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","userDetails","useSelector","selectUserDetails","_jsxs","className","children","_jsx","id","onSubmit","data","isEmpty","changePassword","old_password","confirm_password","_objectSpread","concat","type","name","onClick","message","ToastContainer"],"sourceRoot":""}