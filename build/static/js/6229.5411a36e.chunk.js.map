{"version":3,"file":"static/js/6229.5411a36e.chunk.js","mappings":"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","sources":["pages/Brand/images/icons/info.svg","pages/Brand/Settings/Paid/ValidationSchema.js","pages/Brand/Settings/Shipping/index.js","redux/Brand/Shipping/shippingPaidSelector.js","redux/General/Countries/getCountriesSelector.js","redux/General/States/getStatesSelector.js"],"sourcesContent":["var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgInfo(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 20,\n    height: 20,\n    viewBox: \"0 0 20 20\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.99958 0C4.47746 0 0 4.47746 0 9.99958C0 15.5217 4.47746 20 9.99958 20C15.5217 20 20 15.5217 20 9.99958C20 4.47746 15.5217 0 9.99958 0ZM12.0813 15.498C11.5666 15.7012 11.1568 15.8552 10.8495 15.9619C10.5431 16.0686 10.1867 16.1219 9.78116 16.1219C9.1581 16.1219 8.67302 15.9695 8.32762 15.6656C7.98222 15.3617 7.81037 14.9765 7.81037 14.5084C7.81037 14.3263 7.82307 14.1401 7.84847 13.9505C7.87471 13.7608 7.91619 13.5475 7.97291 13.3079L8.61714 11.0324C8.67386 10.814 8.72296 10.6066 8.7619 10.4135C8.80085 10.2188 8.81947 10.0402 8.81947 9.87767C8.81947 9.58815 8.75937 9.38497 8.64 9.27069C8.51894 9.1564 8.29122 9.10053 7.95175 9.10053C7.78582 9.10053 7.61481 9.12508 7.43958 9.17672C7.26603 9.23005 7.11534 9.27831 6.99175 9.32571L7.1619 8.62476C7.58349 8.45291 7.9873 8.30561 8.37249 8.1837C8.75767 8.06011 9.12169 7.99915 9.46455 7.99915C10.0834 7.99915 10.5608 8.14984 10.8969 8.44783C11.2313 8.74667 11.3998 9.13524 11.3998 9.6127C11.3998 9.71175 11.3879 9.88614 11.3651 10.135C11.3422 10.3848 11.299 10.6125 11.2364 10.8216L10.5956 13.0904C10.5431 13.2724 10.4965 13.4806 10.4542 13.7134C10.4127 13.9462 10.3924 14.124 10.3924 14.2434C10.3924 14.5448 10.4593 14.7505 10.5947 14.8597C10.7285 14.9689 10.963 15.0239 11.2948 15.0239C11.4514 15.0239 11.6267 14.996 11.8248 14.9418C12.0212 14.8876 12.1634 14.8394 12.2531 14.7979L12.0813 15.498ZM11.9678 6.2891C11.669 6.56677 11.3092 6.70561 10.8885 6.70561C10.4686 6.70561 10.1062 6.56677 9.80487 6.2891C9.50519 6.01143 9.35365 5.67365 9.35365 5.27915C9.35365 4.8855 9.50603 4.54688 9.80487 4.26667C10.1062 3.98561 10.4686 3.84593 10.8885 3.84593C11.3092 3.84593 11.6698 3.98561 11.9678 4.26667C12.2667 4.54688 12.4165 4.8855 12.4165 5.27915C12.4165 5.6745 12.2667 6.01143 11.9678 6.2891Z\",\n    fill: \"#283B49\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgInfo);\nexport default __webpack_public_path__ + \"static/media/info.6b6d6ceb4e4be005c910c2459c4393f4.svg\";\nexport { ForwardRef as ReactComponent };","import * as yup from 'yup';\nimport { store } from '../../../../redux/store';\n\nexport const BusinessDetailsValidationSchema = yup.object().shape({\n  businessName: yup.string().required('Legal business name is required.'),\n  businessAs: yup\n    .string()\n    .required('Doing business is required.')\n    .test(\n      'businessname',\n      'doing business is different than the legal name',\n      function (business) {\n        return business ? business !== this.parent.businessName : true;\n      }\n    ),\n  website: yup\n    .string()\n    .url('Please enter a valid URL')\n    .required('Business website address is required.'),\n  businessEmail: yup\n    .string()\n    .email('Must be a valid email.')\n    .max(255)\n    .required('Business email address is required.'),\n  businessCategory: yup\n    .object()\n    .nullable()\n    .required('Business category is required.'),\n  textIdType: yup.object().when('businessCategory', {\n    is: (businessCategory) =>\n      businessCategory?.value === 'single_member_llc' ||\n      businessCategory?.value === 'sole_proprietor',\n    then: yup.object().nullable().required('TextID is required'),\n  }),\n  // employerIdentificationNumber: yup\n  //     .object()\n  //     .nullable()\n  //     .required('Employer identification number is required'),\n  // socialSecurityNumber: yup\n  //     .object()\n  //     .nullable()\n  //     .required('Social security number is required'),\n  // employerIdentificationNumber: yup.string().when('businessCategory', {\n  //     is: (businessCategory) =>\n  //         businessCategory?.value !== 'single_member_llc' ||\n  //         businessCategory?.value !== 'sole_proprietor',\n  //     then: yup\n  //         .string()\n  //         .required('Employer identification number is required'),\n  // }),\n  // socialSecurityNumber: yup\n  //     .string()\n  //     .when('textIdType', {\n  //         is: (textIdType) => textIdType?.value === 'ssn',\n  //         then: yup.string().required('Social security number is required'),\n  //     })\n  //     .when('businessCategory', {\n  //         is: (businessCategory) =>\n  //             businessCategory?.value === 'single_member_llc' ||\n  //             businessCategory?.value === 'sole_proprietor',\n  //         then: yup.string().required('Social security number is required'),\n  //     }),\n  phoneNumber: yup\n    .string()\n    .nullable()\n    .required('Phone number is required.')\n    .min(12, 'Phone should be 10 digits.'),\n  addressLine1: yup.string().nullable().required('Address line 1 is required.'),\n  countryAddress: yup.object().nullable().required('Country is require.'),\n  stateAddress: yup.object().nullable().required('State is require.'),\n  city: yup.string().required('City is required.'),\n  zipcode: yup\n    .string()\n    .nullable()\n    .notOneOf(\n      ['00000'],\n      'Should be in XXXXX format.Cannot containt all zeroes.'\n    )\n    .min(5, 'Should be in XXXXX format.')\n    .max(5, 'Zip-code should be 5 digits.')\n    .required('Zip-code is required.'),\n  stateOfIncorportation: yup\n    .object()\n    .nullable()\n    .required('State of incorporation is required.'),\n  dateOfIncorportation: yup\n    .string()\n    .nullable()\n    .required('Date of incorporation is required.'),\n  bankruptcy: yup.string().nullable().required('Prior bankruptcy is required.'),\n  dateOfDischarge: yup.string().when('bankruptcy', {\n    is: (bankruptcy) => bankruptcy === 'yes',\n    then: yup.string().nullable().required('Date of discharge is required.'),\n  }),\n  averageSales: yup\n    .string()\n    .required('Estimated average sales volume on shopdot is required.'),\n  averageSalePrice: yup\n    .string()\n    .required('Estimated average sale price on shopdot is required.'),\n  averageDeliveryTime: yup\n    .object()\n    .nullable()\n    .required('Average delivery time is required.'),\n  merchantCategoryCode: yup\n    .object()\n    .nullable()\n    .required('Merchant category code is required.'),\n  salesMethod: yup.object().nullable().required('Sales method is required.'),\n  productionDescription: yup\n    .string()\n    .required('Product description is required.'),\n  // phone: yup\n  //     .string()\n  //     .matches(/^\\d{10}$/, 'Phone number must be 10 digits')\n  //     .transform((value, originalValue) => {\n  //         if (!originalValue) return originalValue;\n  //         const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n  //         const phoneNumberLength = phoneNumber.length;\n  //         if (phoneNumberLength < 4) return phoneNumber;\n  //         if (phoneNumberLength < 7) {\n  //             return `${phoneNumber.slice(0, 3)}-${phoneNumber.slice(3)}`;\n  //         }\n  //         return `${phoneNumber.slice(0, 3)}-${phoneNumber.slice(\n  //             3,\n  //             6\n  //         )}-${phoneNumber.slice(6)}`;\n  //     }),\n  // phone: yup\n  //     .string()\n  //     .matches(phoneRegExp, 'Phone number is not in the correct format')\n  //     .transform((value, originalValue) => {\n  //         const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n  //         const hasNonRepeatedConsecutiveNumbers = !/(.)\\1{2,}/.test(\n  //             phoneNumber\n  //         );\n  //         console.log(\n  //             'phoneNumber',\n  //             hasNonRepeatedConsecutiveNumbers,\n  //             phoneNumber,\n  //             value\n  //         );\n  //         if (hasNonRepeatedConsecutiveNumbers) {\n  //             const newNumber = `${phoneNumber.slice(\n  //                 0,\n  //                 3\n  //             )}-${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n  //             console.log('newNumber-------------------', newNumber);\n  //             return newNumber;\n  //         }\n  //         return originalValue;\n  //     }),\n\n  // phone: yup\n  //     .string()\n  //     .required('Phone number is required')\n  //     .transform((value, originalValue) => {\n  //         // If value is not undefined, remove all non-digit characters and format\n  //         if (value) {\n  //             const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n  //             const newNumber = `${phoneNumber.slice(\n  //                 0,\n  //                 3\n  //             )}-${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n  //             return newNumber;\n  //         }\n\n  // const rawValue = value.replace(/[^\\d]/g, ''); // Remove all non-digits\n  // let formattedValue = '';\n  // if (rawValue.length < 4) {\n  //     formattedValue = rawValue;\n  // } else if (rawValue.length < 7) {\n  //     formattedValue = `${rawValue.slice(0, 3)}-${rawValue.slice(3)}`;\n  // } else {\n  //     formattedValue = `${rawValue.slice(0, 3)}-${rawValue.slice(\n  //         3,\n  //         6\n  //     )}-${rawValue.slice(6, 10)}`;\n  // }\n  // If value is undefined, return empty string\n  //     return '';\n  // })\n  // .matches(/^\\d{10}$/, 'Phone number must be 10 digits'),\n\n  // phone: yup\n  //     .string()\n  //     .matches(/^\\d{10}$/, 'Phone number must be 10 digits')\n  //     .transform((value) =>\n  //         value ? value.replace(/(\\d{2})(\\d{3})(\\d{4})/, '$1-$2-$3') : ''\n  //     )\n  //     .nullable()\n  //     .required('Phone number is required'),\n\n  // phone: yup\n  //     .string()\n  //     .matches(phoneRegExp, 'Phone number must be 10 digits')\n  //     .transform((value, originalValue) =>\n  //         originalValue\n  //             ? originalValue.replace(/^(\\d{2})(\\d{3})(\\d{4})$/, '$1-$2-$3')\n  //             : ''\n  //     )\n  //     .nullable()\n  //     .required('Phone number is required'),\n});\n\nexport const getRepresentativeValidation = () => {\n  // Get the store data\n  const storeData = store.getState();\n  const { gettingPaid } = storeData;\n  const { businessDetails } = gettingPaid;\n\n  return yup.object().shape({\n    representativeDetails: yup.array().of(\n      yup.object().shape({\n        fname: yup\n          .string()\n          .nullable()\n          .required('Legal person first name is required.'),\n        lname: yup\n          .string()\n          .nullable()\n          .required('Legal person last name is required.'),\n        phoneNumber: yup\n          .string()\n          .nullable()\n          .required('Phone number is required.')\n          .min(12, 'Phone should be 10 digits.'),\n        ssn: yup\n          .string()\n          .nullable()\n          .required('SSN is required.')\n          .min(11, 'SSN should be 9 digit.'),\n        dob: yup.string().nullable().required('Date of birth is required.'),\n        email: yup\n          .string()\n          .email('Must be a valid email.')\n          .max(255)\n          .required('Email address is required.'),\n        countryAddress: yup.object().nullable().required('Country is require.'),\n        stateAddress: yup.object().nullable().required('State is require.'),\n        addressLine1: yup\n          .string()\n          .nullable()\n          .required('Address line 1 is required.'),\n        city: yup.string().required('City is required.'),\n        zipcode: yup\n          .string()\n          .nullable()\n          .notOneOf(\n            ['00000'],\n            'Should be in XXXXX format.Cannot containt all zeroes.'\n          )\n          .min(5, 'Should be in XXXXX format.')\n          .max(5, 'Zip-code should be 5 digits.')\n          .required('Zip-code is required.'),\n        secondaryIdentificationType: yup\n          .object()\n          .nullable()\n          .required('Secondary identification is required.'),\n        soInsurence: yup\n          .object()\n          .nullable()\n          .when('secondaryIdentificationType', {\n            is: (secondaryIdentificationType) =>\n              secondaryIdentificationType?.value === 'dl',\n            then: yup\n              .object()\n              .nullable()\n              .required('State of issuance is required.'),\n          }),\n        idNumber: yup.string().nullable().required('Id number is required.'),\n        percentageOwnership: yup\n          .mixed()\n          .required('Ownership percentage must be 100%.')\n          .test(\n            'is-valid-settings',\n            'Ownership percentage must be 100%.',\n            (value, context) => {\n              console.log('context', context);\n              // Custom validation function for the 'percentageOwnership' field\n              if (businessDetails?.businessCategory?.value === 'partnership') {\n                if (\n                  value !== '' &&\n                  !isNaN(value) &&\n                  (Number(value) === 100 ||\n                    (Number(value) >= 25 && Number(value) <= 100))\n                ) {\n                  return true;\n                }\n                return context.createError({\n                  message:\n                    Number(value) > 100\n                      ? 'Ownership percentage is invalid!'\n                      : 'Ownership percentage must be 25% or more',\n                  path: context.path,\n                });\n              } else if (\n                businessDetails?.businessCategory?.value ===\n                  'single_member_llc' ||\n                businessDetails?.businessCategory?.value === 'sole_proprietor'\n              ) {\n                if (value !== '' && !isNaN(value) && Number(value) === 100) {\n                  return true;\n                }\n                return false;\n              }\n              if (\n                value !== '' &&\n                !isNaN(value) &&\n                (Number(value) === 100 ||\n                  (Number(value) >= 25 && Number(value) <= 100))\n              ) {\n                return true;\n              }\n              return context.createError({\n                message:\n                  Number(value) > 100\n                    ? 'Ownership percentage is invalid!'\n                    : 'Ownership percentage must be 25% or more',\n                path: context.path,\n              });\n            }\n          ),\n      })\n    ),\n  });\n};\n\nexport const BusinessRepresentativeValidationSchema = yup.object().shape({\n  representativeDetails: yup.array().of(\n    yup.object().shape({\n      fname: yup\n        .string()\n        .nullable()\n        .required('Legal person first name is required.'),\n      lname: yup\n        .string()\n        .nullable()\n        .required('Legal person last name is required.'),\n      // phoneNumber: yup\n      //     .string()\n      // .matches(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/, 'Invalid phone number')\n      // .notOneOf(['00000'], 'Should be in XXX-XXX-XXXX format and Cannot be all zeroes.')\n      // .min(10, 'Phone should be 10 digits.')\n      // .max(10, 'Phone should be 10 digits.')\n      // .required('Phone number is required.'),\n      phoneNumber: yup\n        .string()\n        .nullable()\n        .required('Phone number is required.')\n        .min(12, 'Phone should be 10 digits.'),\n      ssn: yup\n        .string()\n        .nullable()\n        .required('SSN is required.')\n        .min(11, 'SSN should be 9 digit.')\n        .max(11, 'SSN should be 9 digit.'),\n      dob: yup.string().nullable().required('Date of birth is required.'),\n      email: yup\n        .string()\n        .email('Must be a valid email.')\n        .max(255)\n        .required('Email address is required.'),\n      countryAddress: yup.object().nullable().required('Country is require.'),\n      stateAddress: yup.object().nullable().required('State is require.'),\n      addressLine1: yup\n        .string()\n        .nullable()\n        .required('Address line 1 is required.'),\n      city: yup.string().required('City is required.'),\n      zipcode: yup\n        .string()\n        .nullable()\n        .notOneOf(\n          ['00000'],\n          'Should be in XXXXX format.Cannot containt all zeroes.'\n        )\n        .min(5, 'Should be in XXXXX format.')\n        .max(5, 'Zip-code should be 5 digits.')\n        .required('Zip-code is required.'),\n      secondaryIdentificationType: yup\n        .object()\n        .nullable()\n        .required('Secondary identification is required.'),\n      soInsurence: yup\n        .object()\n        .nullable()\n        .when('secondaryIdentificationType', {\n          is: (secondaryIdentificationType) =>\n            secondaryIdentificationType?.value === 'dl',\n          then: yup\n            .object()\n            .nullable()\n            .required('State of issuance is required.'),\n        }),\n      idNumber: yup.string().nullable().required('Id number is required.'),\n    })\n  ),\n});\n\nexport const BankDetailsValidationSchema = yup.object().shape({\n  accountHolderName: yup\n    .string()\n    .required('Bank account holder name is required.'),\n  accountType: yup\n    .object()\n    .nullable()\n    .required('Bank account type is required.'),\n  accountRole: yup.object().nullable().required('Purpose is required.'),\n  accountNumber: yup\n    .string()\n    .required('Account number is required.')\n    .max(8, 'Account number should be 8 digits.')\n    .min(8, 'Account number should be 8 digits.'),\n  routingNumber: yup\n    .string()\n    .required('Routing number is require')\n    .max(9, 'Routing number should be 9 digits.')\n    .min(9, 'Routing number should be 9 digits.'),\n});\n\nexport const SummaryValidationSchema = yup.object().shape({\n  confirmation: yup\n    .boolean()\n    .oneOf([true], 'uou need to accept the confirm details'),\n  tnc: yup\n    .boolean()\n    .oneOf([true], 'you need to accept the terms and conditions'),\n});\n\nexport const shippingValidationSchema = yup.object().shape({\n  address1: yup.string().required('Address 1 is required.'),\n  daystofulfill: yup\n    .object()\n    .nullable()\n    .required('Days to fultill  is required.'),\n  state: yup\n    .object()\n    .shape({\n      label: yup.string().required('State is required.'),\n      value: yup.string().required('State is required.'),\n    })\n    .nullable()\n    .required('State is required.'),\n  country: yup\n    .object()\n    .shape({\n      label: yup.string().required('Country is required.'),\n      value: yup.string().required('Country is required.'),\n    })\n    .nullable()\n    .required('Country is required.'),\n  city: yup.string().required('City is required.'),\n  shippingfee: yup.string().required('Shipping fee is required.'),\n  incrementalfee: yup.string().required('Incremental fee is required.'),\n  zip: yup.string().required('Zip-code is required.'),\n});\n\nexport const brandProfileValidationSchema = yup.object().shape({\n  company_name: yup.string().required('Company name is required.'),\n  company_email_address: yup\n    .string()\n    .email('Must be a valid email.')\n    .max(255)\n    .required('Contact email is required.'),\n  company_phone_number: yup\n    .string()\n    .nullable()\n    .required('Contact phone number is required.')\n    .min(12, 'Contact phone should be 10 digits.'),\n  store_name: yup.string().required('Brand name is required.'),\n  store_website: yup\n    .string()\n    .url('Please enter a valid URL')\n    .required('Brand website is required.'),\n  brand_categories: yup\n    .array()\n    .min(1, 'At least 1 category required')\n    .max(3, 'Select max 3 category.')\n    .nullable()\n    .required('Select max 3 category.'),\n  brand_values: yup.array(),\n  brand_story: yup.string().required('About the brand is required.'),\n  brand_promo: yup.string().url('Please enter a valid URL'),\n});\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Info from '../../images/icons/info.svg';\nimport { Controller, useForm, useWatch } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { shippingValidationSchema } from '../Paid/ValidationSchema';\nimport Select from 'react-select';\nimport {\n  selectShippingData,\n  shippingTime,\n} from '../../../../redux/Brand/Shipping/shippingPaidSelector';\nimport { selectUserDetails } from '../../../../redux/user/userSelector';\nimport {\n  getBrandShippingAction,\n  getBrandShippingTime,\n  updateShipping,\n} from '../../../../actions/brandActions';\nimport {\n  getCountriesAction,\n  getStatesAction,\n} from '../../../../actions/generalActions';\nimport { selectBrandProfileDetails } from '../../../../redux/Brand/Profile/brandProfileSelectors';\nimport { selectCountries } from '../../../../redux/General/Countries/getCountriesSelector';\nimport { selectStates } from '../../../../redux/General/States/getStatesSelector';\nimport { ToastContainer } from 'react-toastify';\nimport { map } from 'lodash';\n\nconst categoryStyle = {\n  control: (styles) => {\n    return {\n      ...styles,\n      marginTop: '6px',\n      boxShadow: 'none',\n      minHeight: '40px',\n      '&:hover': {\n        boxShadow: 'none',\n      },\n    };\n  },\n  container: (style) => {\n    return {\n      ...style,\n      marginTop: '5xp',\n      marginRight: '1px',\n    };\n  },\n};\n\nexport default function Shipping() {\n  const countriesOption = useSelector(selectCountries);\n  const transformCountriesOption = countriesOption?.map((el) => {\n    return { value: el.id, label: el.name };\n  });\n  const statesOption = useSelector(selectStates);\n  const transformStatesOption = statesOption?.map((el) => {\n    return { label: el.name, value: el.country_id };\n  });\n\n  const defaultValues = {\n    // statelist: transformStatesOption ? transformStatesOption[0] : null,\n    // countrylist: transformCountriesOption ? transformCountriesOption[0] : null,\n    shippingfee: '0.00',\n    incrementalfee: '0.00',\n  };\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    formState: { errors },\n  } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(shippingValidationSchema),\n    defaultValues,\n  });\n\n  const watchCountry = useWatch({ name: 'country', control: control });\n\n  const dispatch = useDispatch();\n  const shippingDetailsRes = useSelector(selectShippingData);\n  const shippingTimes = useSelector(shippingTime);\n  const userDetails = useSelector(selectUserDetails);\n  const brandProfileDetails = useSelector(selectBrandProfileDetails);\n\n  const formatShippingTime = () => {\n    if (shippingTimes && shippingTimes.length > 0) {\n      return shippingTimes.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n    } else {\n      return [{ value: '', label: '' }];\n    }\n  };\n\n  useEffect(() => {\n    dispatch(getBrandShippingAction(brandProfileDetails?.brand_profile?.id));\n  }, []);\n\n  useEffect(() => {\n    if (watchCountry && watchCountry.value) {\n      dispatch(getStatesAction(watchCountry?.value));\n    }\n  }, [watchCountry]);\n\n  const initalCall = () => {\n    if (shippingDetailsRes?.shippingDetails?.brand_details && shippingTimes) {\n      const shippingDetails =\n        shippingDetailsRes?.shippingDetails?.brand_details?.shipping_rate;\n      if (shippingTimes && shippingTimes.length) {\n        // map(shippingTimes,(ship)=>{\n        //   if(){\n        //   }\n        // })\n      }\n      reset({\n        address1: shippingDetails?.shipping_address?.street_address_1,\n        address2: shippingDetails?.shipping_address?.street_address_2,\n        country: transformCountriesOption\n          ? transformCountriesOption?.find((country) => {\n              return (\n                shippingDetails?.shipping_address?.country === country.label\n              );\n            })\n          : '',\n        state: transformStatesOption\n          ? transformStatesOption?.find((state) => {\n              return shippingDetails?.shipping_address?.state === state.label;\n            })\n          : '',\n        city: shippingDetails?.shipping_address?.city,\n        zip: shippingDetails?.shipping_address?.zip,\n        shippingfee: shippingDetails?.shipping_cost,\n        incrementalfee: shippingDetails?.incremental_fee,\n        daystofulfill: shippingDetails?.shipping_address?.shipping_time_id\n          ? formatShippingTime()?.find(\n              (item) =>\n                item.value ===\n                shippingDetails?.shipping_address?.shipping_time_id\n            )\n          : false,\n      });\n    }\n  };\n\n  useEffect(() => {\n    initalCall();\n  }, [shippingDetailsRes, shippingTimes]);\n\n  const onSubmit = (data) => {\n    dispatch(\n      updateShipping(\n        {\n          brand_id: brandProfileDetails?.brand_profile?.id,\n          user_id: userDetails.id,\n          street_address_1: data.address1,\n          street_address_2: data.address2 ? data.address2 : null,\n          country: data.country.label,\n          state: data.state.label,\n          city: data.city,\n          zip: data.zip,\n          shipping_cost: parseFloat(data.shippingfee).toFixed(2),\n          incremental_fee: parseFloat(data.incrementalfee).toFixed(2),\n          shipping_time_id: data.daystofulfill.value,\n        },\n        shippingDetailsRes?.shippingDetails?.id\n      )\n    );\n    reset();\n  };\n\n  const formatCurrency = (value) => {\n    const containsDot = value.includes('.');\n    let result;\n    if (containsDot) {\n      const splits = value.split('.');\n      const integerValue = `${splits[0]}`;\n      let decimalValue;\n      if (splits[1].length >= 2) {\n        decimalValue = splits[1].substr(0, 2);\n      } else {\n        decimalValue = `${splits[1]}0`;\n      }\n      result = `${integerValue}.${decimalValue}`;\n    } else {\n      const _result = value.substr(0, 2);\n      result = `${_result}.00`;\n    }\n    return result;\n  };\n\n  return (\n    <div className=\"pc_tabs-content tabs_body\">\n      <div className=\"tab active\" data-target=\"Shipping\">\n        <div className=\"products_content\">\n          <div className=\"products_head mp-head\">\n            <div className=\"products_head-content\">\n              <div className=\"title\">\n                <h1>Shipping Information</h1>\n              </div>\n            </div>\n          </div>\n          <div className=\"products_body \">\n            <div className=\"content_area\">\n              <div id=\"shipping\">\n                <form onSubmit={handleSubmit(onSubmit)}>\n                  <div className=\"shipping_info\">\n                    <h2>Shipping Location</h2>\n                    <div className=\"form-area\">\n                      <div className=\"form-input mb-4\">\n                        <label className=\"form-label\">\n                          Address 1&nbsp;\n                          <span className=\"asterisk-red\">*</span>\n                        </label>\n                        <input\n                          type=\"text\"\n                          className=\"form-control mb-0\"\n                          id=\"\"\n                          name=\"address1\"\n                          placeholder=\"\"\n                          {...register('address1', {\n                            required: true,\n                          })}\n                        />\n                        {errors.address1 && (\n                          <span className=\"error-text\">\n                            {errors.address1?.message}\n                          </span>\n                        )}\n                      </div>\n                      <div className=\"form-input mb-4\">\n                        <label className=\"form-label\">Address 2</label>\n                        <input\n                          type=\"text\"\n                          className=\"form-control \"\n                          name=\"address2\"\n                          {...register('address2', {\n                            required: false,\n                          })}\n                        />\n                      </div>\n                      <div className=\"category-form-input\">\n                        <div className=\"form-input\">\n                          <label className=\"form-label\">\n                            Country &nbsp;\n                            <span className=\"asterisk-red\">*</span>\n                          </label>\n                          <Controller\n                            name=\"country\"\n                            control={control}\n                            render={({ field }) => (\n                              <Select\n                                {...field}\n                                className=\"basic-single\"\n                                classNamePrefix=\"select\"\n                                menuPortalTarget={document.body}\n                                styles={categoryStyle}\n                                components={{\n                                  IndicatorSeparator: () => null,\n                                }}\n                                theme={(theme) => ({\n                                  ...theme,\n                                  colors: {\n                                    ...theme.colors,\n                                    primary25: '#fbf5f0',\n                                    primary: '#bd6f34',\n                                  },\n                                })}\n                                options={transformCountriesOption}\n                              />\n                            )}\n                          />\n                          {errors.country && (\n                            <span className=\"error-text\">\n                              {errors.country?.message}\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"form-input\">\n                          <label className=\"form-label\">\n                            State <span className=\"asterisk-red\">*</span>\n                          </label>\n                          <Controller\n                            name=\"state\"\n                            control={control}\n                            render={({ field }) => (\n                              <Select\n                                {...field}\n                                className=\"basic-single\"\n                                classNamePrefix=\"select\"\n                                menuPortalTarget={document.body}\n                                styles={categoryStyle}\n                                components={{\n                                  IndicatorSeparator: () => null,\n                                }}\n                                theme={(theme) => ({\n                                  ...theme,\n                                  colors: {\n                                    ...theme.colors,\n                                    primary25: '#fbf5f0',\n                                    primary: '#bd6f34',\n                                  },\n                                })}\n                                options={transformStatesOption}\n                              />\n                            )}\n                          />\n                          {errors.state && (\n                            <span className=\"error-text\">\n                              {errors.state?.message}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"category-form-input mt-4\">\n                        <div className=\"form-input\">\n                          <label className=\"form-label\">\n                            City&nbsp;\n                            <span className=\"asterisk-red\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            className=\"form-control mb-0\"\n                            name=\"city\"\n                            placeholder=\"\"\n                            {...register('city', {\n                              required: true,\n                            })}\n                          />\n                          {errors.city && (\n                            <span className=\"error-text\">\n                              {errors.city?.message}\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"form-input\">\n                          <label className=\"form-label\">\n                            ZIP&nbsp;\n                            <span className=\"asterisk-red\">*</span>\n                          </label>\n                          <input\n                            type=\"number\"\n                            className=\"form-control mb-0\"\n                            name=\"zip\"\n                            placeholder=\"\"\n                            {...register('zip', {\n                              required: true,\n                            })}\n                          />\n                          {errors.zip && (\n                            <span className=\"error-text\">\n                              {errors.zip?.message}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"default_shipping_info\">\n                    <h2>Flat Shipping Rate</h2>\n\n                    <div className=\"form-area\">\n                      <div className=\"form-input preferences-item\">\n                        <p>\n                          Flat shipping rate is applied on each order from a\n                          retailer.\n                        </p>\n                      </div>\n\n                      <div className=\"category-form-input tooltip-input mt-4\">\n                        <div className=\"form-input\">\n                          <label className=\"form-label\">\n                            Shipping fee <span className=\"asterisk-red\">*</span>\n                            <div className=\"tooltip\">\n                              <div className=\"tooltip-icon\">\n                                <img src={Info} className=\"icon\" />\n                              </div>\n                              <div className=\"tooltip_text\">\n                                <p>\n                                  This is the flat shipping fee to ship the\n                                  product.\n                                </p>\n                              </div>\n                            </div>\n                          </label>\n                          <div className=\"input-wrapper\">\n                            <div className=\"prefix\">$</div>\n                            <input\n                              className=\"currency-input mb-0\"\n                              name=\"shippingfee\"\n                              {...register('shippingfee', {\n                                required: true,\n                                onBlur: (e) => {\n                                  const value = e.target.value;\n                                  if (value) {\n                                    const result = formatCurrency(value);\n                                    setValue('shippingfee', result);\n                                  } else {\n                                    setValue('shippingfee', `0.00`);\n                                  }\n                                },\n                              })}\n                            />\n                          </div>\n                          {errors.shippingfee && (\n                            <span className=\"error-text\">\n                              {errors.shippingfee?.message}\n                            </span>\n                          )}\n                        </div>\n\n                        <div className=\"form-input\">\n                          <label className=\"form-label\">\n                            Incremental fee{' '}\n                            <span className=\"asterisk-red\">*</span>\n                            <div className=\"tooltip\">\n                              <div className=\"tooltip-icon\">\n                                <img src={Info} className=\"icon\" />\n                              </div>\n                              <div className=\"tooltip_text\">\n                                <p>\n                                  This is the cost for every additional item of\n                                  the same product in an order. For example, if\n                                  the shipping cost for Product A is $5 and the\n                                  incremental fee for Product A is $2 and there\n                                  are 2 units of the same product purchased in\n                                  the same order, the shipping fee will be $7.\n                                </p>\n                              </div>\n                            </div>\n                          </label>\n                          <div className=\"input-wrapper\">\n                            <div className=\"prefix\">$</div>\n                            <input\n                              className=\"currency-input mb-0\"\n                              name=\"incrementalfee\"\n                              {...register('incrementalfee', {\n                                required: true,\n                                onBlur: (e) => {\n                                  const value = e.target.value;\n                                  if (value) {\n                                    const result = formatCurrency(value);\n                                    setValue('incrementalfee', result);\n                                  } else {\n                                    setValue('incrementalfee', `0.00`);\n                                  }\n                                },\n                              })}\n                            />\n                          </div>\n\n                          {errors.incrementalfee && (\n                            <span className=\"error-text\">\n                              {errors.incrementalfee?.message}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"default_shipping_info\">\n                    <h2>Default Days to Fulfill</h2>\n                    <div className=\"form-area\">\n                      <div className=\"form-input preferences-item\">\n                        <p>\n                          You can use this section to set default days to\n                          fulfill for your products. You will be able to modify\n                          this information on a product level.\n                        </p>\n                      </div>\n                      <div className=\"category-form-input tooltip-input mt-4\">\n                        <div className=\"form-input\">\n                          <label className=\"form-label\">\n                            Default Days to Fulfill\n                            <span className=\"asterisk-red\">*</span>\n                            <div className=\"tooltip\">\n                              <div className=\"tooltip-icon\">\n                                <img src={Info} className=\"icon\" />\n                              </div>\n                              <div className=\"tooltip_text\">\n                                <p>\n                                  Number of business days to process and ship\n                                  product.\n                                </p>\n                              </div>\n                            </div>\n                          </label>\n                          <Controller\n                            name=\"daystofulfill\"\n                            control={control}\n                            render={({ field }) => (\n                              <Select\n                                {...field}\n                                className=\"basic-single\"\n                                classNamePrefix=\"select\"\n                                placeholder=\"Days to Fulfill\"\n                                styles={categoryStyle}\n                                components={{\n                                  IndicatorSeparator: () => null,\n                                }}\n                                theme={(theme) => ({\n                                  ...theme,\n                                  colors: {\n                                    ...theme.colors,\n                                    primary25: '#fbf5f0',\n                                    primary: '#bd6f34',\n                                  },\n                                })}\n                                options={formatShippingTime()}\n                              />\n                            )}\n                          />\n                          {errors.daystofulfill && (\n                            <span className=\"error-text\">\n                              {errors.daystofulfill?.message}\n                            </span>\n                          )}\n                          {/* <Controller\n                                                    name=\"daystofulfill\"\n                                                    control={control}\n                                                    render={({ field }) => (\n                                                        <Select\n                                                            {...field}\n                                                            className=\"basic-single\"\n                                                            classNamePrefix=\"select\"\n                                                            styles={\n                                                                categoryStyle\n                                                            }\n                                                            placeholder=\"Days to Fulfill\"\n                                                            components={{\n                                                                IndicatorSeparator:\n                                                                    () => null,\n                                                            }}\n                                                            theme={(theme) => ({\n                                                                ...theme,\n                                                                colors: {\n                                                                    ...theme.colors,\n                                                                    primary25:\n                                                                        '#fbf5f0',\n                                                                    primary:\n                                                                        '#bd6f34',\n                                                                },\n                                                            })}\n                                                            options={daysOption}\n                                                        />\n                                                    )}\n                                                />\n                                                {errors.daystofulfill && (\n                                                    <span className=\"error-text\">\n                                                        {\n                                                            errors.daystofulfill\n                                                                ?.message\n                                                        }\n                                                    </span>\n                                                )} */}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"form-area\">\n                    <div className=\"form-input form-submit mt-4\">\n                      <button\n                        // disabled={shippingDetails.shippingLoading}\n                        onClick={() => reset()}\n                        className=\"button button-grey cancel\"\n                      >\n                        Cancel\n                      </button>\n                      <button\n                        type=\"submit\"\n                        // disabled={shippingDetails.shippingLoading}\n                        className=\"button\"\n                      >\n                        Save\n                      </button>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <ToastContainer />\n    </div>\n  );\n}\n","export const selectShippingData = (state) => state.shipping.shippingData;\nexport const shippingTime = (state) => state.shipping.shippingTimes;\n","export const selectCountries = (state) => state.countries.countries;\n","export const selectStates = (state) => state.states.states;\n"],"names":["BusinessDetailsValidationSchema","yup","shape","businessName","required","businessAs","test","business","this","parent","website","url","businessEmail","email","max","businessCategory","nullable","textIdType","when","is","value","then","phoneNumber","min","addressLine1","countryAddress","stateAddress","city","zipcode","notOneOf","stateOfIncorportation","dateOfIncorportation","bankruptcy","dateOfDischarge","averageSales","averageSalePrice","averageDeliveryTime","merchantCategoryCode","salesMethod","productionDescription","getRepresentativeValidation","businessDetails","store","gettingPaid","representativeDetails","of","fname","lname","ssn","dob","secondaryIdentificationType","soInsurence","idNumber","percentageOwnership","context","_businessDetails$busi","_businessDetails$busi2","_businessDetails$busi3","console","log","isNaN","Number","createError","message","path","BusinessRepresentativeValidationSchema","BankDetailsValidationSchema","accountHolderName","accountType","accountRole","accountNumber","routingNumber","SummaryValidationSchema","confirmation","oneOf","tnc","shippingValidationSchema","address1","daystofulfill","state","label","country","shippingfee","incrementalfee","zip","brandProfileValidationSchema","company_name","company_email_address","company_phone_number","store_name","store_website","brand_categories","brand_values","brand_story","brand_promo","categoryStyle","control","styles","_objectSpread","marginTop","boxShadow","minHeight","container","style","marginRight","Shipping","_errors$address","_errors$country","_errors$state","_errors$city","_errors$zip","_errors$shippingfee","_errors$incrementalfe","_errors$daystofulfill","countriesOption","useSelector","selectCountries","transformCountriesOption","map","el","id","name","statesOption","selectStates","transformStatesOption","country_id","_useForm","useForm","mode","resolver","yupResolver","defaultValues","register","handleSubmit","reset","setValue","errors","formState","watchCountry","useWatch","dispatch","useDispatch","shippingDetailsRes","selectShippingData","shippingTimes","shippingTime","userDetails","selectUserDetails","brandProfileDetails","selectBrandProfileDetails","formatShippingTime","length","item","useEffect","_brandProfileDetails$","getBrandShippingAction","brand_profile","getStatesAction","_shippingDetailsRes$s","shippingDetails","brand_details","_shippingDetailsRes$s2","_shippingDetailsRes$s3","_shippingDetails$ship","_shippingDetails$ship2","_shippingDetails$ship5","_shippingDetails$ship6","_shippingDetails$ship7","_formatShippingTime","shipping_rate","shipping_address","street_address_1","address2","street_address_2","find","_shippingDetails$ship3","_shippingDetails$ship4","shipping_cost","incremental_fee","shipping_time_id","_shippingDetails$ship8","initalCall","formatCurrency","result","includes","decimalValue","splits","split","integerValue","concat","substr","_result","_jsxs","className","children","_jsx","onSubmit","data","_brandProfileDetails$2","_shippingDetailsRes$s4","updateShipping","brand_id","user_id","parseFloat","toFixed","type","placeholder","Controller","render","_ref","field","Select","classNamePrefix","menuPortalTarget","document","body","components","IndicatorSeparator","theme","colors","primary25","primary","options","_ref2","src","Info","onBlur","e","target","_ref3","onClick","ToastContainer","shipping","shippingData","countries","states"],"sourceRoot":""}