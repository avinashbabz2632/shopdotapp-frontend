{"version":3,"file":"static/js/1616.3e0613c4.chunk.js","mappings":"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","sources":["pages/Brand/Settings/Paid/EditBankDetails.js","pages/Brand/Settings/Paid/ValidationSchema.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectBankDetails } from '../../../../redux/Brand/GettingPaid/gettingPaidSelector';\nimport { setBankDetails } from '../../../../redux/Brand/GettingPaid/gettingPaidSlice';\nimport Select from 'react-select';\nimport { BankDetailsValidationSchema } from './ValidationSchema';\n\nconst accountTypeOption = [\n    {\n        value: 'saving',\n        label: 'Savings',\n    },\n    { value: 'current', label: 'Current' },\n];\n\nconst accountRoleOption = [\n    {\n        value: 'personal',\n        label: 'Personal',\n    },\n    { value: 'business', label: 'Business' },\n];\n\nconst categoryStyle = {\n    control: (styles) => {\n        return {\n            ...styles,\n            borderColor: '#ebbca2',\n            boxShadow: 'none',\n            minHeight: '40px',\n            '&:hover': {\n                boxShadow: 'none',\n            },\n        };\n    },\n    container: (style) => {\n        return {\n            ...style,\n            marginTop: '5xp',\n            marginRight: '1px',\n        };\n    },\n};\n\nconst defaultValues = {\n    accountType: accountTypeOption[0],\n    accountRole: accountRoleOption[0],\n};\n\nexport default function EditBankDetail({ setEditBankDetails }) {\n    const {\n        register,\n        handleSubmit,\n        control,\n        setValue,\n        formState: { errors },\n    } = useForm({\n        mode: 'onChange',\n        resolver: yupResolver(BankDetailsValidationSchema),\n        defaultValues,\n    });\n\n    const bankDetails = useSelector(selectBankDetails);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const fields = [\n            'accountHolderName',\n            'accountType',\n            'accountRole',\n            'accountNumber',\n            'routingNumber',\n        ];\n\n        fields.forEach((field) => setValue(field, bankDetails[field]));\n    }, []);\n\n    const onSubmit = (data) => {\n        dispatch(setBankDetails(data));\n        // setEditBankDetails(false);\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <h2 className=\"mt-5\">Bank Details</h2>\n                <div className=\"form-area\">\n                    <div className=\"form-input mb-4\">\n                        <label htmlFor=\"\" className=\"form-label\">\n                            Name of the bank account holder&nbsp;\n                            <span className=\"asterisk-red\">*</span>\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control mb-0\"\n                            name=\"accountHolderName\"\n                            placeholder=\"Jane Doe\"\n                            {...register('accountHolderName', {\n                                required: true,\n                            })}\n                        />\n                        {errors.accountHolderName && (\n                            <span className=\"error-text\">\n                                {errors.accountHolderName?.message}\n                            </span>\n                        )}\n                    </div>\n                    <div className=\"form-input mb-4\">\n                        <label htmlFor=\"\" className=\"form-label\">\n                            Bank account type&nbsp;\n                            <span className=\"asterisk-red\">*</span>\n                        </label>\n                        <Controller\n                            name=\"accountType\"\n                            control={control}\n                            render={({ field }) => (\n                                <Select\n                                    {...field}\n                                    className=\"basic-single\"\n                                    classNamePrefix=\"select\"\n                                    styles={categoryStyle}\n                                    components={{\n                                        IndicatorSeparator: () => null,\n                                    }}\n                                    theme={(theme) => ({\n                                        ...theme,\n                                        colors: {\n                                            ...theme.colors,\n                                            primary25: '#fbf5f0',\n                                            primary: '#bd6f34',\n                                        },\n                                    })}\n                                    options={accountTypeOption}\n                                />\n                            )}\n                        />\n                        {errors.accountType && (\n                            <span className=\"error-text\">\n                                {errors.accountType?.message}\n                            </span>\n                        )}\n                    </div>\n\n                    <div className=\"form-input mb-4\">\n                        <label htmlFor=\"\" className=\"form-label\">\n                            Purpose&nbsp;<span className=\"asterisk-red\">*</span>\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control mb-0\"\n                            name=\"accountRole\"\n                            placeholder=\"\"\n                            disabled\n                            {...register('accountRole', { required: true })}\n                        />\n                        {errors.accountRole && (\n                            <span className=\"error-text\">\n                                {errors.accountRole?.message}\n                            </span>\n                        )}\n                    </div>\n\n                    <div className=\"form-input mb-4\">\n                        <label htmlFor=\"\" className=\"form-label\">\n                            Account number&nbsp;\n                            <span className=\"asterisk-red\">*</span>\n                        </label>\n                        <input\n                            type=\"number\"\n                            className=\"form-control mb-0\"\n                            name=\"accountNumber\"\n                            placeholder=\"12345678\"\n                            {...register('accountNumber', { required: true })}\n                        />\n                        {errors.accountNumber && (\n                            <span className=\"error-text\">\n                                {errors.accountNumber?.message}\n                            </span>\n                        )}\n                    </div>\n\n                    <div className=\"form-input mb-4\">\n                        <label htmlFor=\"\" className=\"form-label\">\n                            Routing number&nbsp;\n                            <span className=\"asterisk-red\">*</span>\n                        </label>\n                        <input\n                            type=\"number\"\n                            className=\"form-control mb-0\"\n                            name=\"routingNumber\"\n                            placeholder=\"123456789\"\n                            {...register('routingNumber', { required: true })}\n                        />\n                        {errors.routingNumber && (\n                            <span className=\"error-text\">\n                                {errors.routingNumber?.message}\n                            </span>\n                        )}\n                        <small>\n                            9-digit Routing Number of the account used for ACH\n                            transactions.\n                        </small>\n                    </div>\n                </div>\n                <div className=\"form-area\">\n                    <div className=\"form-input form-submit\">\n                        <button className=\"button w-100\">Save</button>\n                    </div>\n                </div>\n            </form>\n        </>\n    );\n}\n\nEditBankDetail.propTypes = {\n    setEditBankDetails: PropTypes.func,\n};\n","import * as yup from 'yup';\nimport { store } from '../../../../redux/store';\n\nexport const BusinessDetailsValidationSchema = yup.object().shape({\n    businessName: yup.string().required('Legal business name is required.'),\n    businessAs: yup\n        .string()\n        .required('Doing business is required.')\n        .test(\n            'businessname',\n            'doing business is different than the legal name',\n            function (business) {\n                return business ? business !== this.parent.businessName : true;\n            }\n        ),\n    website: yup\n        .string()\n        .url('Please enter a valid URL')\n        .required('Business website address is required.'),\n    businessEmail: yup\n        .string()\n        .email('Must be a valid email.')\n        .max(255)\n        .required('Business email address is required.'),\n    businessCategory: yup\n        .object()\n        .nullable()\n        .required('Business category is required.'),\n    textIdType: yup.object().when('businessCategory', {\n        is: (businessCategory) =>\n            businessCategory?.value === 'single_member_llc' ||\n            businessCategory?.value === 'sole_proprietor',\n        then: yup.object().nullable().required('TextID is required'),\n    }),\n    // employerIdentificationNumber: yup\n    //     .object()\n    //     .nullable()\n    //     .required('Employer identification number is required'),\n    // socialSecurityNumber: yup\n    //     .object()\n    //     .nullable()\n    //     .required('Social security number is required'),\n    // employerIdentificationNumber: yup.string().when('businessCategory', {\n    //     is: (businessCategory) =>\n    //         businessCategory?.value !== 'single_member_llc' ||\n    //         businessCategory?.value !== 'sole_proprietor',\n    //     then: yup\n    //         .string()\n    //         .required('Employer identification number is required'),\n    // }),\n    // socialSecurityNumber: yup\n    //     .string()\n    //     .when('textIdType', {\n    //         is: (textIdType) => textIdType?.value === 'ssn',\n    //         then: yup.string().required('Social security number is required'),\n    //     })\n    //     .when('businessCategory', {\n    //         is: (businessCategory) =>\n    //             businessCategory?.value === 'single_member_llc' ||\n    //             businessCategory?.value === 'sole_proprietor',\n    //         then: yup.string().required('Social security number is required'),\n    //     }),\n    phoneNumber: yup\n        .string()\n        .nullable()\n        .required('Phone number is required.')\n        .min(12, 'Phone should be 10 digits.'),\n    addressLine1: yup\n        .string()\n        .nullable()\n        .required('Address line 1 is required.'),\n    countryAddress: yup.object().nullable().required('Country is require.'),\n    stateAddress: yup.object().nullable().required('State is require.'),\n    city: yup.string().required('City is required.'),\n    zipcode: yup\n        .string()\n        .nullable()\n        .notOneOf(\n            ['00000'],\n            'Should be in XXXXX format.Cannot containt all zeroes.'\n        )\n        .min(5, 'Should be in XXXXX format.')\n        .max(5, 'Zip-code should be 5 digits.')\n        .required('Zip-code is required.'),\n    stateOfIncorportation: yup\n        .object()\n        .nullable()\n        .required('State of incorporation is required.'),\n    dateOfIncorportation: yup\n        .string()\n        .nullable()\n        .required('Date of incorporation is required.'),\n    bankruptcy: yup\n        .string()\n        .nullable()\n        .required('Prior bankruptcy is required.'),\n    dateOfDischarge: yup.string().when('bankruptcy', {\n        is: (bankruptcy) => bankruptcy === 'yes',\n        then: yup\n            .string()\n            .nullable()\n            .required('Date of discharge is required.'),\n    }),\n    averageSales: yup\n        .string()\n        .required('Estimated average sales volume on shopdot is required.'),\n    averageSalePrice: yup\n        .string()\n        .required('Estimated average sale price on shopdot is required.'),\n    averageDeliveryTime: yup\n        .object()\n        .nullable()\n        .required('Average delivery time is required.'),\n    merchantCategoryCode: yup\n        .object()\n        .nullable()\n        .required('Merchant category code is required.'),\n    salesMethod: yup.object().nullable().required('Sales method is required.'),\n    productionDescription: yup\n        .string()\n        .required('Product description is required.'),\n    // phone: yup\n    //     .string()\n    //     .matches(/^\\d{10}$/, 'Phone number must be 10 digits')\n    //     .transform((value, originalValue) => {\n    //         if (!originalValue) return originalValue;\n    //         const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n    //         const phoneNumberLength = phoneNumber.length;\n    //         if (phoneNumberLength < 4) return phoneNumber;\n    //         if (phoneNumberLength < 7) {\n    //             return `${phoneNumber.slice(0, 3)}-${phoneNumber.slice(3)}`;\n    //         }\n    //         return `${phoneNumber.slice(0, 3)}-${phoneNumber.slice(\n    //             3,\n    //             6\n    //         )}-${phoneNumber.slice(6)}`;\n    //     }),\n    // phone: yup\n    //     .string()\n    //     .matches(phoneRegExp, 'Phone number is not in the correct format')\n    //     .transform((value, originalValue) => {\n    //         const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n    //         const hasNonRepeatedConsecutiveNumbers = !/(.)\\1{2,}/.test(\n    //             phoneNumber\n    //         );\n    //         console.log(\n    //             'phoneNumber',\n    //             hasNonRepeatedConsecutiveNumbers,\n    //             phoneNumber,\n    //             value\n    //         );\n    //         if (hasNonRepeatedConsecutiveNumbers) {\n    //             const newNumber = `${phoneNumber.slice(\n    //                 0,\n    //                 3\n    //             )}-${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n    //             console.log('newNumber-------------------', newNumber);\n    //             return newNumber;\n    //         }\n    //         return originalValue;\n    //     }),\n\n    // phone: yup\n    //     .string()\n    //     .required('Phone number is required')\n    //     .transform((value, originalValue) => {\n    //         // If value is not undefined, remove all non-digit characters and format\n    //         if (value) {\n    //             const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n    //             const newNumber = `${phoneNumber.slice(\n    //                 0,\n    //                 3\n    //             )}-${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n    //             return newNumber;\n    //         }\n\n    // const rawValue = value.replace(/[^\\d]/g, ''); // Remove all non-digits\n    // let formattedValue = '';\n    // if (rawValue.length < 4) {\n    //     formattedValue = rawValue;\n    // } else if (rawValue.length < 7) {\n    //     formattedValue = `${rawValue.slice(0, 3)}-${rawValue.slice(3)}`;\n    // } else {\n    //     formattedValue = `${rawValue.slice(0, 3)}-${rawValue.slice(\n    //         3,\n    //         6\n    //     )}-${rawValue.slice(6, 10)}`;\n    // }\n    // If value is undefined, return empty string\n    //     return '';\n    // })\n    // .matches(/^\\d{10}$/, 'Phone number must be 10 digits'),\n\n    // phone: yup\n    //     .string()\n    //     .matches(/^\\d{10}$/, 'Phone number must be 10 digits')\n    //     .transform((value) =>\n    //         value ? value.replace(/(\\d{2})(\\d{3})(\\d{4})/, '$1-$2-$3') : ''\n    //     )\n    //     .nullable()\n    //     .required('Phone number is required'),\n\n    // phone: yup\n    //     .string()\n    //     .matches(phoneRegExp, 'Phone number must be 10 digits')\n    //     .transform((value, originalValue) =>\n    //         originalValue\n    //             ? originalValue.replace(/^(\\d{2})(\\d{3})(\\d{4})$/, '$1-$2-$3')\n    //             : ''\n    //     )\n    //     .nullable()\n    //     .required('Phone number is required'),\n});\n\nexport const getRepresentativeValidation = () => {\n    // Get the store data\n    const storeData = store.getState();\n    const { gettingPaid } = storeData;\n    const { businessDetails } = gettingPaid;\n\n    return yup.object().shape({\n        representativeDetails: yup.array().of(\n            yup.object().shape({\n                fname: yup\n                    .string()\n                    .nullable()\n                    .required('Legal person first name is required.'),\n                lname: yup\n                    .string()\n                    .nullable()\n                    .required('Legal person last name is required.'),\n                phoneNumber: yup\n                    .string()\n                    .nullable()\n                    .required('Phone number is required.')\n                    .min(12, 'Phone should be 10 digits.'),\n                ssn: yup\n                    .string()\n                    .nullable()\n                    .required('SSN is required.')\n                    .min(11, 'SSN should be 9 digit.'),\n                dob: yup\n                    .string()\n                    .nullable()\n                    .required('Date of birth is required.'),\n                email: yup\n                    .string()\n                    .email('Must be a valid email.')\n                    .max(255)\n                    .required('Email address is required.'),\n                countryAddress: yup\n                    .object()\n                    .nullable()\n                    .required('Country is require.'),\n                stateAddress: yup\n                    .object()\n                    .nullable()\n                    .required('State is require.'),\n                addressLine1: yup\n                    .string()\n                    .nullable()\n                    .required('Address line 1 is required.'),\n                city: yup.string().required('City is required.'),\n                zipcode: yup\n                    .string()\n                    .nullable()\n                    .notOneOf(\n                        ['00000'],\n                        'Should be in XXXXX format.Cannot containt all zeroes.'\n                    )\n                    .min(5, 'Should be in XXXXX format.')\n                    .max(5, 'Zip-code should be 5 digits.')\n                    .required('Zip-code is required.'),\n                secondaryIdentificationType: yup\n                    .object()\n                    .nullable()\n                    .required('Secondary identification is required.'),\n                soInsurence: yup\n                    .object()\n                    .nullable()\n                    .when('secondaryIdentificationType', {\n                        is: (secondaryIdentificationType) =>\n                            secondaryIdentificationType?.value === 'dl',\n                        then: yup\n                            .object()\n                            .nullable()\n                            .required('State of issuance is required.'),\n                    }),\n                idNumber: yup\n                    .string()\n                    .nullable()\n                    .required('Id number is required.'),\n                percentageOwnership: yup\n                    .mixed()\n                    .required('Ownership percentage must be 100%.')\n                    .test(\n                        'is-valid-settings',\n                        'Ownership percentage must be 100%.',\n                        (value, context) => {\n                            console.log('context', context);\n                            // Custom validation function for the 'percentageOwnership' field\n                            if (\n                                businessDetails?.businessCategory?.value ===\n                                'partnership'\n                            ) {\n                                if (\n                                    value !== '' &&\n                                    !isNaN(value) &&\n                                    (Number(value) === 100 ||\n                                        (Number(value) >= 25 &&\n                                            Number(value) <= 100))\n                                ) {\n                                    return true;\n                                }\n                                return context.createError({\n                                    message:\n                                        Number(value) > 100\n                                            ? 'Ownership percentage is invalid!'\n                                            : 'Ownership percentage must be 25% or more',\n                                    path: context.path,\n                                });\n                            } else if (\n                                businessDetails?.businessCategory?.value ===\n                                    'single_member_llc' ||\n                                businessDetails?.businessCategory?.value ===\n                                    'sole_proprietor'\n                            ) {\n                                if (\n                                    value !== '' &&\n                                    !isNaN(value) &&\n                                    Number(value) === 100\n                                ) {\n                                    return true;\n                                }\n                                return false;\n                            }\n                            if (\n                                value !== '' &&\n                                !isNaN(value) &&\n                                (Number(value) === 100 ||\n                                    (Number(value) >= 25 &&\n                                        Number(value) <= 100))\n                            ) {\n                                return true;\n                            }\n                            return context.createError({\n                                message:\n                                    Number(value) > 100\n                                        ? 'Ownership percentage is invalid!'\n                                        : 'Ownership percentage must be 25% or more',\n                                path: context.path,\n                            });\n                        }\n                    ),\n            })\n        ),\n    });\n};\n\nexport const BusinessRepresentativeValidationSchema = yup.object().shape({\n    representativeDetails: yup.array().of(\n        yup.object().shape({\n            fname: yup\n                .string()\n                .nullable()\n                .required('Legal person first name is required.'),\n            lname: yup\n                .string()\n                .nullable()\n                .required('Legal person last name is required.'),\n            // phoneNumber: yup\n            //     .string()\n            // .matches(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/, 'Invalid phone number')\n            // .notOneOf(['00000'], 'Should be in XXX-XXX-XXXX format and Cannot be all zeroes.')\n            // .min(10, 'Phone should be 10 digits.')\n            // .max(10, 'Phone should be 10 digits.')\n            // .required('Phone number is required.'),\n            phoneNumber: yup\n                .string()\n                .nullable()\n                .required('Phone number is required.')\n                .min(12, 'Phone should be 10 digits.'),\n            ssn: yup\n                .string()\n                .nullable()\n                .required('SSN is required.')\n                .min(11, 'SSN should be 9 digit.')\n                .max(11, 'SSN should be 9 digit.'),\n            dob: yup.string().nullable().required('Date of birth is required.'),\n            email: yup\n                .string()\n                .email('Must be a valid email.')\n                .max(255)\n                .required('Email address is required.'),\n            countryAddress: yup\n                .object()\n                .nullable()\n                .required('Country is require.'),\n            stateAddress: yup.object().nullable().required('State is require.'),\n            addressLine1: yup\n                .string()\n                .nullable()\n                .required('Address line 1 is required.'),\n            city: yup.string().required('City is required.'),\n            zipcode: yup\n                .string()\n                .nullable()\n                .notOneOf(\n                    ['00000'],\n                    'Should be in XXXXX format.Cannot containt all zeroes.'\n                )\n                .min(5, 'Should be in XXXXX format.')\n                .max(5, 'Zip-code should be 5 digits.')\n                .required('Zip-code is required.'),\n            secondaryIdentificationType: yup\n                .object()\n                .nullable()\n                .required('Secondary identification is required.'),\n            soInsurence: yup\n                .object()\n                .nullable()\n                .when('secondaryIdentificationType', {\n                    is: (secondaryIdentificationType) =>\n                        secondaryIdentificationType?.value === 'dl',\n                    then: yup\n                        .object()\n                        .nullable()\n                        .required('State of issuance is required.'),\n                }),\n            idNumber: yup\n                .string()\n                .nullable()\n                .required('Id number is required.'),\n        })\n    ),\n});\n\nexport const BankDetailsValidationSchema = yup.object().shape({\n    accountHolderName: yup\n        .string()\n        .required('Bank account holder name is required.'),\n    accountType: yup\n        .object()\n        .nullable()\n        .required('Bank account type is required.'),\n    accountRole: yup.object().nullable().required('Purpose is required.'),\n    accountNumber: yup\n        .string()\n        .required('Account number is required.')\n        .max(8, 'Account number should be 8 digits.')\n        .min(8, 'Account number should be 8 digits.'),\n    routingNumber: yup\n        .string()\n        .required('Routing number is require')\n        .max(9, 'Routing number should be 9 digits.')\n        .min(9, 'Routing number should be 9 digits.'),\n});\n\nexport const SummaryValidationSchema = yup.object().shape({\n    confirmation: yup\n        .boolean()\n        .oneOf([true], 'uou need to accept the confirm details'),\n    tnc: yup\n        .boolean()\n        .oneOf([true], 'you need to accept the terms and conditions'),\n});\n\nexport const shippingValidationSchema = yup.object().shape({\n    address1: yup.string().required('Address 1 is required.'),\n    daystofulfill: yup\n        .object()\n        .nullable()\n        .required('Days to fultill  is required.'),\n    statelist: yup\n        .object()\n        .shape({\n            label: yup.string().required('State category is required.'),\n            value: yup.string().required('State category is required.'),\n        })\n        .nullable()\n        .required('State category is required.'),\n    country: yup.string().required('Country is required.'),\n    city: yup.string().required('City is required.'),\n    shippingfee: yup.string().required('Shipping fee is require.'),\n    incrementalfee: yup.string().required('Incremental fee is require.'),\n    zip: yup.string().required('Zip-code is required.'),\n});\n\nexport const brandProfileValidationSchema = yup.object().shape({\n    companyName: yup.string().required('Company name is required.'),\n    contactEmail: yup\n        .string()\n        .email('Must be a valid email.')\n        .max(255)\n        .required('Contact email is required.'),\n    contactPhone: yup.string().required('Contact phone number is required.'),\n    brandName: yup.string().required('Brand name is required.'),\n    brandWebsite: yup\n        .string()\n        .url('Please enter a valid URL')\n        .required('Brand website is required.'),\n    brandCategory: yup\n        .array()\n        .min(1, 'At least 1 category required')\n        .max(3, 'Select max 3 category.')\n        .nullable()\n        .required('Select max 3 category.'),\n    aboutTheBrand: yup.string().required('About the brand is required.'),\n    videoLink: yup.string().required('Please enter valid website.'),\n});\n"],"names":["accountTypeOption","value","label","categoryStyle","control","styles","_objectSpread","borderColor","boxShadow","minHeight","container","style","marginTop","marginRight","defaultValues","accountType","accountRole","EditBankDetail","_ref","setEditBankDetails","_errors$accountHolder","_errors$accountType","_errors$accountRole","_errors$accountNumber","_errors$routingNumber","_useForm","useForm","mode","resolver","yupResolver","BankDetailsValidationSchema","register","handleSubmit","setValue","errors","formState","bankDetails","useSelector","selectBankDetails","dispatch","useDispatch","useEffect","forEach","field","_jsx","_Fragment","children","_jsxs","onSubmit","data","setBankDetails","className","htmlFor","type","name","placeholder","required","accountHolderName","message","Controller","render","_ref2","Select","classNamePrefix","components","IndicatorSeparator","theme","colors","primary25","primary","options","disabled","accountNumber","routingNumber","BusinessDetailsValidationSchema","yup","shape","businessName","businessAs","test","business","this","parent","website","url","businessEmail","email","max","businessCategory","nullable","textIdType","when","is","then","phoneNumber","min","addressLine1","countryAddress","stateAddress","city","zipcode","notOneOf","stateOfIncorportation","dateOfIncorportation","bankruptcy","dateOfDischarge","averageSales","averageSalePrice","averageDeliveryTime","merchantCategoryCode","salesMethod","productionDescription","getRepresentativeValidation","businessDetails","store","gettingPaid","representativeDetails","of","fname","lname","ssn","dob","secondaryIdentificationType","soInsurence","idNumber","percentageOwnership","context","_businessDetails$busi","_businessDetails$busi2","_businessDetails$busi3","console","log","isNaN","Number","createError","path","BusinessRepresentativeValidationSchema","SummaryValidationSchema","confirmation","oneOf","tnc","shippingValidationSchema","address1","daystofulfill","statelist","country","shippingfee","incrementalfee","zip","brandProfileValidationSchema","companyName","contactEmail","contactPhone","brandName","brandWebsite","brandCategory","aboutTheBrand","videoLink"],"sourceRoot":""}