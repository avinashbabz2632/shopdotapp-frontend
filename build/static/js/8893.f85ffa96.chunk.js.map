{"version":3,"file":"static/js/8893.f85ffa96.chunk.js","mappings":"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","sources":["components/common/Input/divStyled.js","pages/Retailer/Settings/Security/index.js","../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","../node_modules/@hookform/resolvers/src/toNestError.ts","../node_modules/@hookform/resolvers/yup/src/yup.ts"],"sourcesContent":["import styled from 'styled-components';\nimport {\n    orange100,\n    inputTransitionSpeed,\n    inputBackground,\n    inuputHeight,\n    inputPadding,\n    inputBorderRadius,\n    inputBorderColor,\n    inputFonstSize,\n    inputFontFamily,\n    inputColor,\n    inputFocusBorderColor,\n    inputFocusBackgroundColor,\n    inputValidBorderColor,\n    inputValidBackgroundColor,\n} from '../../../theme/variables';\n\nconst Input = styled.input`\n    // display: flex;\n    // align-items: center;\n    // align-content: center;\n    // z-index: 0;\n    // -webkit-appearance: none;\n    // appearance: none;\n    // width: 100%;\n    // box-sizing: border-box;\n    // font-family: ${inputFontFamily};\n    // font-size: ${inputFonstSize};\n    // font-weight: 400;\n    // border: 0.1rem solid ${inputBorderColor};\n    // border-radius: ${inputBorderRadius};\n    // padding: ${inputPadding};\n    // height: ${inuputHeight};\n    // outline: none;\n    // background-color: ${inputBackground};\n    // transition: all ${inputTransitionSpeed} ease;\n    // caret-color: ${orange100};\n    //\n    // &::place-holder {\n    //     color: ${inputColor};\n    //     opacity: 0.64;\n    // }\n    //\n    // &.invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus:required:invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:required:valid {\n    //     border-color: var(--orange-tint-10);\n    //     background-color: var(--white);\n    // }\n    //\n    // &.valid {\n    //     border-color: ${inputValidBorderColor};\n    //     background-color: ${inputValidBackgroundColor};\n    // }\n\n    background: #fffcf9;\n    border: 1px solid #f3e0d2;\n    border-radius: 4px;\n    height: 4rem;\n    padding: 1rem 1.2rem;\n    display: block;\n    width: 100%;\n    margin-top: 0.6rem;\n    appearance: none;\n    box-sizing: border-box;\n    font-family: 'Mulish', sans-serif;\n    outline: none;\n\n    &.invalid {\n        border-color: #eb5757;\n    }\n`;\n\nexport default Input;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport Input from '../../../../components/common/Input/divStyled';\n\nconst validationSchema = yup\n  .object()\n  .shape({\n    password: yup.string().required('Password is required.'),\n    newpassword: yup\n      .string()\n      .required('Password is required.')\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\n        'Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character.'\n      ),\n    confirmNewPassword: yup\n      .string()\n      .oneOf([yup.ref('newpassword'), null], 'Passwords must match.')\n      .required('Password confirm is required.'),\n  })\n  .required();\n\nexport default function RetailerSecurity() {\n  const [passwordType, setPasswordType] = useState(true);\n  const [passwordTypeNew, setPasswordTypeNew] = useState(true);\n  const [passwordTypeConfirmNew, setPasswordTypeConfirmNew] = useState(true);\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(validationSchema), onChange: true });\n\n  const onSubmit = (data) => {\n    reset();\n  };\n\n  return (\n    <div className=\"products_content\">\n      <div className=\"products_head mp-head\">\n        <div className=\"products_head-content\">\n          <div className=\"title\">\n            <h1>Security</h1>\n          </div>\n        </div>\n      </div>\n      <div className=\"products_body\">\n        <div className=\"content_area\">\n          <div id=\"security\">\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"security_info\">\n                <h2>Change Password</h2>\n                <div className=\"form-area\">\n                  <div className=\"form-input mb-4\">\n                    <label className=\"form-label\">\n                      Old password\n                    </label>\n                    <Input\n                      className={`${errors?.password\n                          ? 'is-invalid'\n                          : ''\n                        } form-control password`}\n                      type={\n                        passwordType\n                          ? 'password'\n                          : 'text'\n                      }\n                      name=\"password\"\n                      {...register('password', {\n                        required: true,\n                      })}\n                    />\n                    <span\n                      className={`password-show ${passwordType ? '' : 'active'\n                        }`}\n                      onClick={() =>\n                        setPasswordType(!passwordType)\n                      }\n                    />\n                    {errors?.password && (\n                      <small className=\"invalid-feedback mb-0\">\n                        {errors?.password?.message}\n                      </small>\n                    )}\n                  </div>\n                  <div className=\"form-input mb-4 password-tooltip\">\n                    <label className=\"form-label\">\n                      New password\n                    </label>\n                    <Input\n                      className={`${errors?.newpassword\n                          ? 'is-invalid'\n                          : ''\n                        } form-control password`}\n                      type={\n                        passwordTypeNew\n                          ? 'password'\n                          : 'text'\n                      }\n                      name=\"newpassword\"\n                      {...register('newpassword', {\n                        required: true,\n                      })}\n                    />\n                    <span\n                      className={`password-show ${passwordTypeNew ? '' : 'active'\n                        }`}\n                      onClick={() =>\n                        setPasswordTypeNew(\n                          !passwordTypeNew\n                        )\n                      }\n                    />\n                    {errors?.newpassword && (\n                      <small className=\"invalid-feedback mb-0\">\n                        {errors?.newpassword?.message}\n                      </small>\n                    )}\n                    <div className=\"tooltip\">\n                      <div className=\"tooltip-icon\"></div>\n                      <div className=\"tooltip_text\">\n                        <div className=\"tooltip-arrow\"></div>\n                        <div className=\"pwd-info-title\">\n                          Password must:\n                        </div>\n                        <div className=\"pwd-info\">\n                          <label>\n                            - have at least 1 number\n                          </label>\n                          <label>\n                            - have at least 1\n                            uppercase character\n                          </label>\n                          <label>\n                            - have at least 1\n                            lowercase character\n                          </label>\n                          <label>\n                            - have at least 1\n                            special character\n                          </label>\n                          <label>\n                            - have 8 characters\n                            minimum\n                          </label>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"form-input mb-4\">\n                    <label className=\"form-label\">\n                      Confirm new password\n                    </label>\n                    <Input\n                      className={`${errors?.confirmNewPassword\n                          ? 'is-invalid'\n                          : ''\n                        } form-control password`}\n                      type={\n                        passwordTypeConfirmNew\n                          ? 'password'\n                          : 'text'\n                      }\n                      name=\"confirmNewPassword\"\n                      {...register('confirmNewPassword', {\n                        required: true,\n                      })}\n                    />\n                    <span\n                      className={`password-show ${passwordTypeConfirmNew\n                          ? ''\n                          : 'active'\n                        }`}\n                      onClick={() =>\n                        setPasswordTypeConfirmNew(\n                          !passwordTypeConfirmNew\n                        )\n                      }\n                    />\n                    {errors?.confirmNewPassword && (\n                      <small className=\"invalid-feedback mb-0\">\n                        {\n                          errors?.confirmNewPassword\n                            ?.message\n                        }\n                      </small>\n                    )}\n                  </div>\n                </div>\n                <div className=\"form-area\">\n                  <div className=\"form-input form-submit mt-4\">\n                    <button\n                      onClick={() => reset()}\n                      className=\"button button-grey cancel\"\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      type=\"submit\"\n                      className=\"button\"\n                    >\n                      Save\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n","import * as Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.rawValues ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"],"names":["Input","styled","_templateObject","_taggedTemplateLiteral","inputFontFamily","inputFonstSize","inputBorderColor","inputBorderRadius","inputPadding","inuputHeight","inputBackground","inputTransitionSpeed","orange100","inputColor","inputFocusBorderColor","inputFocusBackgroundColor","inputValidBorderColor","inputValidBackgroundColor","validationSchema","yup","shape","password","required","newpassword","matches","confirmNewPassword","oneOf","RetailerSecurity","_errors$password","_errors$newpassword","_errors$confirmNewPas","_useState","useState","_useState2","_slicedToArray","passwordType","setPasswordType","_useState3","_useState4","passwordTypeNew","setPasswordTypeNew","_useState5","_useState6","passwordTypeConfirmNew","setPasswordTypeConfirmNew","_useForm","useForm","resolver","yupResolver","onChange","register","handleSubmit","reset","errors","formState","_jsxs","className","children","_jsx","id","onSubmit","data","_objectSpread","concat","type","name","onClick","message","e","i","t","f","r","setCustomValidity","reportValidity","fields","ref","refs","forEach","shouldUseNativeValidation","o","a","n","Object","assign","s","c","Promise","resolve","u","context","mode","abortEarly","then","values","rawValues","inner","criteriaMode","reduce","path","types","reject"],"sourceRoot":""}