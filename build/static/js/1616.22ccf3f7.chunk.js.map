{"version":3,"file":"static/js/1616.22ccf3f7.chunk.js","mappings":"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","sources":["pages/Brand/Settings/Paid/EditBankDetails.js","pages/Brand/Settings/Paid/ValidationSchema.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectBankDetails } from '../../../../redux/Brand/GettingPaid/gettingPaidSelector';\nimport { setBankDetails } from '../../../../redux/Brand/GettingPaid/gettingPaidSlice';\nimport Select from 'react-select';\nimport { BankDetailsValidationSchema } from './ValidationSchema';\nimport { brandBankDetailsAction } from '../../../../actions/brandActions';\n\nconst accountTypeOption = [\n  { value: 'CHECKING', label: 'Current' },\n  {\n    value: 'SAVINGS',\n    label: 'Savings',\n  },\n];\n\nconst accountRoleOption = [\n  { value: 'CORPORATE', label: 'Business' },\n  {\n    value: 'CONSUMER',\n    label: 'Personal',\n  },\n];\n\nconst categoryStyle = {\n  control: (styles) => {\n    return {\n      ...styles,\n      borderColor: '#ebbca2',\n      boxShadow: 'none',\n      minHeight: '40px',\n      '&:hover': {\n        boxShadow: 'none',\n      },\n    };\n  },\n  container: (style) => {\n    return {\n      ...style,\n      marginTop: '5xp',\n      marginRight: '1px',\n    };\n  },\n};\n\nconst defaultValues = {\n  account_type: accountTypeOption[0],\n  purpose: accountRoleOption[0],\n};\n\nexport default function EditBankDetail({ setEditBankDetails, customerId }) {\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: { errors },\n  } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(BankDetailsValidationSchema),\n    defaultValues,\n  });\n\n  const bankDetails = useSelector(selectBankDetails);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fields = [\n      'account_holder_name',\n      'account_type',\n      'purpose',\n      'account_number',\n      'routing_number',\n    ];\n\n    fields.forEach((field) => setValue(field, bankDetails[field]));\n  }, []);\n\n  const onSubmit = (data) => {\n    dispatch(\n      brandBankDetailsAction({\n        ...data,\n        account_type: data.account_type.value,\n        purpose: data.purpose.value,\n        customer_id: customerId,\n      })\n    );\n    // dispatch(setBankDetails(data));\n    // setEditBankDetails(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <h2 className=\"mt-5\">Bank Details</h2>\n      <div className=\"form-area\">\n        <div className=\"form-input mb-4\">\n          <label htmlFor=\"\" className=\"form-label\">\n            Name of the bank account holder&nbsp;\n            <span className=\"asterisk-red\">*</span>\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control mb-0\"\n            name=\"account_holder_name\"\n            placeholder=\"Jane Doe\"\n            {...register('account_holder_name', { required: true })}\n          />\n          {errors.account_holder_name && (\n            <span className=\"error-text\">\n              {errors.account_holder_name?.message}\n            </span>\n          )}\n        </div>\n        <div className=\"form-input mb-4\">\n          <label htmlFor=\"\" className=\"form-label\">\n            Bank account type&nbsp;\n            <span className=\"asterisk-red\">*</span>\n          </label>\n          <Controller\n            name=\"account_type\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                {...field}\n                className=\"basic-single\"\n                classNamePrefix=\"select\"\n                styles={categoryStyle}\n                components={{ IndicatorSeparator: () => null }}\n                theme={(theme) => ({\n                  ...theme,\n                  colors: {\n                    ...theme.colors,\n                    primary25: '#fbf5f0',\n                    primary: '#bd6f34',\n                  },\n                })}\n                options={accountTypeOption}\n              />\n            )}\n          />\n          {errors.account_type && (\n            <span className=\"error-text\">{errors.account_type?.message}</span>\n          )}\n        </div>\n\n        <div className=\"form-input mb-4\">\n          <label htmlFor=\"\" className=\"form-label\">\n            Purpose&nbsp;<span className=\"asterisk-red\">*</span>\n          </label>\n          <Controller\n            name=\"purpose\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                {...field}\n                className=\"basic-single\"\n                classNamePrefix=\"select\"\n                styles={categoryStyle}\n                components={{ IndicatorSeparator: () => null }}\n                theme={(theme) => ({\n                  ...theme,\n                  colors: {\n                    ...theme.colors,\n                    primary25: '#fbf5f0',\n                    primary: '#bd6f34',\n                  },\n                })}\n                options={accountRoleOption}\n              />\n            )}\n          />\n          {errors.purpose && (\n            <span className=\"error-text\">{errors.purpose?.message}</span>\n          )}\n        </div>\n\n        <div className=\"form-input mb-4\">\n          <label htmlFor=\"\" className=\"form-label\">\n            Account number&nbsp;\n            <span className=\"asterisk-red\">*</span>\n          </label>\n          <input\n            type=\"number\"\n            className=\"form-control mb-0\"\n            name=\"account_number\"\n            placeholder=\"12345678\"\n            {...register('account_number', { required: true })}\n          />\n          {errors.account_number && (\n            <span className=\"error-text\">{errors.account_number?.message}</span>\n          )}\n        </div>\n\n        <div className=\"form-input mb-4\">\n          <label htmlFor=\"\" className=\"form-label\">\n            Routing number&nbsp;\n            <span className=\"asterisk-red\">*</span>\n          </label>\n          <input\n            type=\"number\"\n            className=\"form-control mb-0\"\n            name=\"routing_number\"\n            placeholder=\"123456789\"\n            {...register('routing_number', { required: true })}\n          />\n          {errors.routing_number && (\n            <span className=\"error-text\">{errors.routing_number?.message}</span>\n          )}\n          <small>\n            9-digit Routing Number of the account used for ACH transactions.\n          </small>\n        </div>\n      </div>\n      <div className=\"form-area\">\n        <div className=\"form-input form-submit\">\n          <button className=\"button w-100\">Submit</button>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nEditBankDetail.propTypes = {\n  setEditBankDetails: PropTypes.func,\n};\n","import * as yup from 'yup';\n\nexport const BusinessDetailsValidationSchema = yup.object().shape({\n  legal_name: yup.string().required('Legal Business name is required.'),\n  doing_business_as: yup\n    .string()\n    .required('Doing Business is required.')\n    .test(\n      'legal_name',\n      'Doing Business is different than the legal name',\n      function (business) {\n        return business ? business !== this.parent.legal_name : true;\n      }\n    ),\n  business_category: yup\n    .object()\n    .shape({\n      label: yup.string().required('Business Category is required.'),\n      value: yup.string().required('Business Category is required.'),\n    })\n    .nullable()\n    .required('Business Category is required.'),\n  textIdType: yup.object().when('businessCategory', {\n    is: (businessCategory) => businessCategory?.value === 'signle_member_llc',\n    then: yup.object().nullable().required('TextID is required'),\n  }),\n  ein: yup.string().when('textIdType', {\n    is: (textIdType) => textIdType?.value === 'ein',\n    then: yup.string().required('Employer Identification Number is required'),\n  }),\n  // .when('businessCategory', {\n  //     is: (businessCategory) =>\n  //         businessCategory?.value !== 'solo_proprietor',\n  //     then: yup\n  //         .string()\n  //         .required('Employer Identification Number is required'),\n  // }),\n  ssn: yup\n    .string()\n    .when('textIdType', {\n      is: (textIdType) => textIdType?.value === 'ssn',\n      then: yup.string().required('Social Security Number is required.'),\n    })\n    .when('businessCategory', {\n      is: (businessCategory) => businessCategory?.value === 'solo_proprietor',\n      then: yup.string().required('Social Security Number is required.'),\n    }),\n  state_of_incorporation: yup\n    .object()\n    .shape({\n      label: yup.string().required('State of Incorporation is required.'),\n      value: yup.string().required('State of Incorporation is required.'),\n    })\n    .nullable()\n    .required('State of Incorporation is required.'),\n  date_of_incorporation: yup\n    .string()\n    .required('Date of Incorporation is required.'),\n  prior_bankruptcy: yup\n    .string()\n    .nullable()\n    .required('Prior Bankruptcy is required.'),\n  dateOfDischarge: yup.string().when('prior_bankruptcy', {\n    is: (prior_bankruptcy) => prior_bankruptcy === true,\n    then: yup.string().required('Date of Discharge is required.'),\n  }),\n  average_sales_volume: yup\n    .string()\n    .required('Estimated Average Sales Volume on ShopDot is required.'),\n  average_purchase: yup\n    .string()\n    .required('Estimated Average Sale Price on ShopDot is required.'),\n  average_delivery_time: yup\n    .object()\n    .shape({\n      label: yup.string().required('Average Delivery Time is required.'),\n      value: yup.string().required('Average Delivery Time is required.'),\n    })\n    .nullable()\n    .required('Average Delivery Time is required.'),\n\n  merchant_category_code: yup\n    .object()\n    .shape({\n      label: yup.string().required('Merchant Category Code is required.'),\n      value: yup.string().required('Merchant Category Code is required.'),\n    })\n    .nullable()\n    .required('Merchant Category Code is required.'),\n\n  sales_method: yup\n    .object()\n    .shape({\n      label: yup.string().required('Sales Method is required.'),\n      value: yup.string().required('Sales Method is required.'),\n    })\n    .nullable()\n    .required('Sales Method is required.'),\n  product_description: yup\n    .string()\n    .required('Product Description is required.'),\n});\n\nexport const BusinessRepresentativeValidationSchema = yup.object().shape({\n  owner_first_name: yup\n    .string()\n    .required('Legal Person first name is required.'),\n  owner_last_name: yup.string().required('Legal Person last name is required.'),\n  owner_phone: yup.string().required('Phone number is required.'),\n  // ssn: yup.string().required('SSN is required.'),\n  owner_dob: yup.string().required('Date of birth is required.'),\n  countryAddress: yup\n    .object()\n    .shape({\n      label: yup.string().required('Country is require.'),\n      value: yup.string().required('Country is require.'),\n    })\n    .nullable()\n    .required('Address State is require.'),\n  state: yup\n    .object()\n    .shape({\n      label: yup.string().required('Address State is require.'),\n      value: yup.string().required('Address State is require.'),\n    })\n    .nullable()\n    .required('Address State is require.'),\n  address_line_1: yup.string().required('Address line 1 is required.'),\n  address_line_2: yup.string(),\n  city: yup.string().required('City is required.'),\n  // citySelect: yup\n  //   .object()\n  //   .shape({\n  //     label: yup.string().required('City is required.'),\n  //     value: yup.string().required('City is required.'),\n  //   })\n  //   .nullable()\n  //   .required('City is required'),\n  zip: yup.string().required('Zip-code is required.'),\n\n  secondary_identification_type: yup\n    .object()\n    .nullable()\n    .required('Secondary Identification is required.'),\n\n  identification_state_of_issuance: yup\n    .object()\n    .when('secondary_identification_type', {\n      is: (secondary_identification_type) =>\n        secondary_identification_type?.value !== 'dl',\n      then: yup\n        .object()\n        .nullable()\n        .required('Country of issuance is required.'),\n    }),\n  // identification_state_of_issuance: yup\n  //   .object()\n  //   .when('identification_state_of_issuance', {\n  //     is: (identification_state_of_issuance) =>\n  //       identification_state_of_issuance?.value === 'dl',\n  //     then: yup.object().nullable().required('State of issuance is required.'),\n  //   }),\n\n  identification_id: yup.string().required('Id number is required.'),\n});\n\nexport const BankDetailsValidationSchema = yup.object().shape({\n  account_holder_name: yup\n    .string()\n    .required('Bank Account holder name is required.'),\n  account_type: yup\n    .object()\n    .nullable()\n    .required('Bank Account type is required.'),\n  purpose: yup.object().nullable().required('Purpose is required.'),\n  account_number: yup.string().required('Account number is required.'),\n  routing_number: yup.string().required('Routing number is require'),\n});\n\nexport const SummaryValidationSchema = yup.object().shape({\n  confirmation: yup\n    .boolean()\n    .oneOf([true], 'You need to accept the confirm details'),\n  tnc: yup\n    .boolean()\n    .oneOf([true], 'You need to accept the terms and conditions'),\n});\n\nexport const shippingValidationSchema = yup.object().shape({\n  address1: yup.string().required('Address 1 is required.'),\n  daystofulfill: yup\n    .object()\n    .nullable()\n    .required('Days to fultill  is required.'),\n  statelist: yup\n    .object()\n    .shape({\n      label: yup.string().required('State Category is required.'),\n      value: yup.string().required('State Category is required.'),\n    })\n    .nullable()\n    .required('State Category is required.'),\n  country: yup.string().required('Country is required.'),\n  city: yup.string().required('City is required.'),\n  shippingfee: yup.string().required('Shipping fee is require.'),\n  incrementalfee: yup.string().required('Incremental fee is require.'),\n  zip: yup.string().required('Zip-code is required.'),\n});\n\nexport const brandProfileValidationSchema = yup.object().shape({\n  company_name: yup.string().required('Company name is required.'),\n  company_email_address: yup\n    .string()\n    .email('Must be a valid email.')\n    .max(255)\n    .required('Contact email is required.'),\n  company_phone_number: yup\n    .string()\n    .required('Contact phone number is required.'),\n  store_name: yup.string().required('Brand name is required.'),\n  store_website: yup.string().required('Brand website is required.'),\n  brand_categories: yup\n    .array()\n    .min(1, 'At least 1 category required')\n    .max(3, 'Select max 3 category.')\n    .nullable()\n    .required('Select max 3 category.'),\n  brand_values: yup\n    .array()\n    .min(1, 'At least 1 value required')\n    .max(3, 'Select max 3 values.')\n    .nullable()\n    .required('Select max 3 values.'),\n  brand_story: yup.string().required('About the brand is required.'),\n  brand_promo: yup.string().required('Please enter valid website.'),\n});\n"],"names":["accountTypeOption","value","label","accountRoleOption","categoryStyle","control","styles","_objectSpread","borderColor","boxShadow","minHeight","container","style","marginTop","marginRight","defaultValues","account_type","purpose","EditBankDetail","_ref","setEditBankDetails","_errors$account_holde","_errors$account_type","_errors$purpose","_errors$account_numbe","_errors$routing_numbe","customerId","_useForm","useForm","mode","resolver","yupResolver","BankDetailsValidationSchema","register","handleSubmit","setValue","errors","formState","bankDetails","useSelector","selectBankDetails","dispatch","useDispatch","useEffect","forEach","field","_jsxs","onSubmit","data","brandBankDetailsAction","customer_id","children","_jsx","className","htmlFor","type","name","placeholder","required","account_holder_name","message","Controller","render","_ref2","Select","classNamePrefix","components","IndicatorSeparator","theme","colors","primary25","primary","options","_ref3","account_number","routing_number","BusinessDetailsValidationSchema","yup","shape","legal_name","doing_business_as","test","business","this","parent","business_category","nullable","textIdType","when","is","businessCategory","then","ein","ssn","state_of_incorporation","date_of_incorporation","prior_bankruptcy","dateOfDischarge","average_sales_volume","average_purchase","average_delivery_time","merchant_category_code","sales_method","product_description","BusinessRepresentativeValidationSchema","owner_first_name","owner_last_name","owner_phone","owner_dob","countryAddress","state","address_line_1","address_line_2","city","zip","secondary_identification_type","identification_state_of_issuance","identification_id","SummaryValidationSchema","confirmation","oneOf","tnc","shippingValidationSchema","address1","daystofulfill","statelist","country","shippingfee","incrementalfee","brandProfileValidationSchema","company_name","company_email_address","email","max","company_phone_number","store_name","store_website","brand_categories","min","brand_values","brand_story","brand_promo"],"sourceRoot":""}