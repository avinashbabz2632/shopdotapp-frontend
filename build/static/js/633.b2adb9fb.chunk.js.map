{"version":3,"file":"static/js/633.b2adb9fb.chunk.js","mappings":"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","sources":["components/common/Input/divStyled.js","redux/Brand/Security/securitySelector.js","pages/Brand/Settings/Security/index.js","../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","../node_modules/@hookform/resolvers/src/toNestError.ts","../node_modules/@hookform/resolvers/yup/src/yup.ts"],"sourcesContent":["import styled from 'styled-components';\nimport {\n    orange100,\n    inputTransitionSpeed,\n    inputBackground,\n    inuputHeight,\n    inputPadding,\n    inputBorderRadius,\n    inputBorderColor,\n    inputFonstSize,\n    inputFontFamily,\n    inputColor,\n    inputFocusBorderColor,\n    inputFocusBackgroundColor,\n    inputValidBorderColor,\n    inputValidBackgroundColor,\n} from '../../../theme/variables';\n\nconst Input = styled.input`\n    // display: flex;\n    // align-items: center;\n    // align-content: center;\n    // z-index: 0;\n    // -webkit-appearance: none;\n    // appearance: none;\n    // width: 100%;\n    // box-sizing: border-box;\n    // font-family: ${inputFontFamily};\n    // font-size: ${inputFonstSize};\n    // font-weight: 400;\n    // border: 0.1rem solid ${inputBorderColor};\n    // border-radius: ${inputBorderRadius};\n    // padding: ${inputPadding};\n    // height: ${inuputHeight};\n    // outline: none;\n    // background-color: ${inputBackground};\n    // transition: all ${inputTransitionSpeed} ease;\n    // caret-color: ${orange100};\n    //\n    // &::place-holder {\n    //     color: ${inputColor};\n    //     opacity: 0.64;\n    // }\n    //\n    // &.invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:focus:required:invalid {\n    //     border-color: ${inputFocusBorderColor};\n    //     background-color: ${inputFocusBackgroundColor};\n    // }\n    //\n    // &:required:valid {\n    //     border-color: var(--orange-tint-10);\n    //     background-color: var(--white);\n    // }\n    //\n    // &.valid {\n    //     border-color: ${inputValidBorderColor};\n    //     background-color: ${inputValidBackgroundColor};\n    // }\n\n    background: #fffcf9;\n    border: 1px solid #f3e0d2;\n    border-radius: 4px;\n    height: 4rem;\n    padding: 1rem 1.2rem;\n    display: block;\n    width: 100%;\n    margin-top: 0.6rem;\n    appearance: none;\n    box-sizing: border-box;\n    font-family: 'Mulish', sans-serif;\n    outline: none;\n\n    &.invalid {\n        border-color: #eb5757;\n    }\n`;\n\nexport default Input;\n","export const securityDetails = (state) => state.security;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport Input from '../../../../components/common/Input/divStyled';\nimport { changePassword } from '../../../../actions/brandActions';\nimport { securityDetails } from '../../../../redux/Brand/Security/securitySelector';\nimport { selectUserDetails } from '../../../../redux/user/userSelector';\nimport { ToastContainer } from 'react-toastify';\nimport { isEmpty } from 'lodash';\n\nconst validationSchema = yup\n  .object()\n  .shape({\n    password: yup.string().required('Password is required.'),\n    newpassword: yup\n      .string()\n      .required('Password is required.')\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\n        'Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character.'\n      ),\n    confirmNewPassword: yup\n      .string()\n      .oneOf([yup.ref('newpassword'), null], 'Passwords must match.')\n      .required('Password confirm is required.'),\n  })\n  .required();\n\nexport default function BrandSecurity() {\n  const [passwordType, setPasswordType] = useState(true);\n  const [passwordTypeNew, setPasswordTypeNew] = useState(true);\n  const [passwordTypeConfirmNew, setPasswordTypeConfirmNew] = useState(true);\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(validationSchema), onBlur: true });\n\n  const dispatch = useDispatch();\n\n  const security = useSelector(securityDetails);\n  const userDetails = useSelector(selectUserDetails);\n\n  const onSubmit = (data) => {\n    if (!isEmpty(data.password)) {\n      dispatch(\n        changePassword(\n          {\n            old_password: data.password,\n            password: data.newpassword,\n            confirm_password: data.confirmNewPassword,\n          },\n          userDetails.id\n        )\n      );\n      reset();\n    }\n  };\n\n  return (\n    <div className=\"products_content\">\n      <div className=\"products_head mp-head\">\n        <div className=\"products_head-content\">\n          <div className=\"title\">\n            <h1>Security</h1>\n          </div>\n        </div>\n      </div>\n      <div className=\"products_body\">\n        <div className=\"content_area\">\n          <div id=\"security\">\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"security_info\">\n                <h2>Change Password</h2>\n                <div className=\"form-area\">\n                  <div className=\"form-input mb-4\">\n                    <label className=\"form-label\">Old password</label>\n                    <Input\n                      className={`${\n                        errors?.password ? 'is-invalid' : ''\n                      } form-control password`}\n                      type={passwordType ? 'password' : 'text'}\n                      name=\"password\"\n                      {...register('password', {\n                        required: true,\n                      })}\n                    />\n                    <span\n                      className={`password-show ${\n                        passwordType ? '' : 'active'\n                      }`}\n                      onClick={() => setPasswordType(!passwordType)}\n                    />\n                    {errors?.password && (\n                      <small className=\"invalid-feedback mb-0\">\n                        {errors?.password?.message}\n                      </small>\n                    )}\n                  </div>\n                  <div className=\"form-input mb-4 password-tooltip\">\n                    <label className=\"form-label\">New password</label>\n                    <Input\n                      className={`${\n                        errors?.newpassword ? 'is-invalid' : ''\n                      } form-control password`}\n                      type={passwordTypeNew ? 'password' : 'text'}\n                      name=\"newpassword\"\n                      {...register('newpassword', {\n                        required: true,\n                      })}\n                    />\n                    <span\n                      className={`password-show ${\n                        passwordTypeNew ? '' : 'active'\n                      }`}\n                      onClick={() => setPasswordTypeNew(!passwordTypeNew)}\n                    />\n                    {errors?.newpassword && (\n                      <small className=\"invalid-feedback mb-0\">\n                        {errors?.newpassword?.message}\n                      </small>\n                    )}\n                    <div className=\"tooltip\">\n                      <div className=\"tooltip-icon\"></div>\n                      <div className=\"tooltip_text\">\n                        <div className=\"tooltip-arrow\"></div>\n                        <div className=\"pwd-info-title\">Password must:</div>\n                        <div className=\"pwd-info\">\n                          <label>- have at least 1 number</label>\n                          <label>- have at least 1 uppercase character</label>\n                          <label>- have at least 1 lowercase character</label>\n                          <label>- have at least 1 special character</label>\n                          <label>- have 8 characters minimum</label>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"form-input mb-4\">\n                    <label className=\"form-label\">Confirm new password</label>\n                    <Input\n                      className={`${\n                        errors?.confirmNewPassword ? 'is-invalid' : ''\n                      } form-control password`}\n                      type={passwordTypeConfirmNew ? 'password' : 'text'}\n                      name=\"confirmNewPassword\"\n                      {...register('confirmNewPassword', {\n                        required: true,\n                      })}\n                    />\n                    <span\n                      className={`password-show ${\n                        passwordTypeConfirmNew ? '' : 'active'\n                      }`}\n                      onClick={() =>\n                        setPasswordTypeConfirmNew(!passwordTypeConfirmNew)\n                      }\n                    />\n                    {errors?.confirmNewPassword && (\n                      <small className=\"invalid-feedback mb-0\">\n                        {errors?.confirmNewPassword?.message}\n                      </small>\n                    )}\n                  </div>\n                </div>\n                <div className=\"form-area\">\n                  <div className=\"form-input form-submit mt-4\">\n                    <button\n                      onClick={() => reset()}\n                      className=\"button button-grey cancel\"\n                      // disabled={security.changePasswordLoading}\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      type=\"submit\"\n                      className=\"button\"\n                      // disabled={security.changePasswordLoading}\n                    >\n                      Save\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n      <ToastContainer />\n    </div>\n  );\n}\n","import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n","import * as Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.rawValues ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"],"names":["Input","styled","_templateObject","_taggedTemplateLiteral","inputFontFamily","inputFonstSize","inputBorderColor","inputBorderRadius","inputPadding","inuputHeight","inputBackground","inputTransitionSpeed","orange100","inputColor","inputFocusBorderColor","inputFocusBackgroundColor","inputValidBorderColor","inputValidBackgroundColor","securityDetails","state","security","validationSchema","yup","shape","password","required","newpassword","matches","confirmNewPassword","oneOf","BrandSecurity","_errors$password","_errors$newpassword","_errors$confirmNewPas","_useState","useState","_useState2","_slicedToArray","passwordType","setPasswordType","_useState3","_useState4","passwordTypeNew","setPasswordTypeNew","_useState5","_useState6","passwordTypeConfirmNew","setPasswordTypeConfirmNew","_useForm","useForm","resolver","yupResolver","onBlur","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","userDetails","useSelector","selectUserDetails","_jsxs","className","children","_jsx","id","onSubmit","data","isEmpty","changePassword","old_password","confirm_password","_objectSpread","concat","type","name","onClick","message","ToastContainer","e","i","t","f","r","setCustomValidity","reportValidity","fields","ref","refs","forEach","shouldUseNativeValidation","o","a","n","Object","assign","s","c","Promise","resolve","u","context","mode","abortEarly","then","values","rawValues","inner","criteriaMode","reduce","path","types","reject"],"sourceRoot":""}