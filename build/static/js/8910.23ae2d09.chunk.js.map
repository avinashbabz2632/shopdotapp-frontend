{"version":3,"file":"static/js/8910.23ae2d09.chunk.js","mappings":"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","sources":["pages/Brand/images/edit.svg","pages/Brand/Settings/Paid/Summary.js","pages/Brand/Settings/Paid/ValidationSchema.js"],"sourcesContent":["var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgEdit(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M2 14.0017H4.5L11.8733 6.62833L9.37333 4.12833L2 11.5017V14.0017ZM3.33333 12.055L9.37333 6.015L9.98667 6.62833L3.94667 12.6683H3.33333V12.055Z\",\n    fill: \"white\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.2467 2.195C11.9867 1.935 11.5667 1.935 11.3067 2.195L10.0867 3.415L12.5867 5.915L13.8067 4.695C14.0667 4.435 14.0667 4.015 13.8067 3.755L12.2467 2.195Z\",\n    fill: \"white\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgEdit);\nexport default __webpack_public_path__ + \"static/media/edit.d79cc2345a4faa8e651274e42f5df856.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport EditIcon from '../../images/edit.svg';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { get, map } from 'lodash';\nimport merchantServices from '../../../../../src/assets/merchant.pdf';\nimport {\n  selectBankDetails,\n  selectBusinessDetails,\n  selectRepresentativeDetails,\n  selectGettingPaidPreferance,\n} from '../../../../redux/Brand/GettingPaid/gettingPaidSelector';\nimport { SummaryValidationSchema } from './ValidationSchema';\nimport '../../Style/brand.style.scss';\nimport '../../Style/brand.media.scss';\nimport '../../Style/brand.dev.scss';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { selectUserDetails } from '../../../../redux/user/userSelector';\nimport {\n  brandAsCustomerAction,\n  brandBankDetailsAction,\n  getBrandBankDetailsAction,\n  getBrandProfileAction,\n} from '../../../../actions/brandActions';\nimport { ToastContainer } from 'react-toastify';\nimport { setProfileCompleted } from '../../../../redux/Brand/Profile/brandProfileSlice';\nimport { gettingPaidResetToInitial } from '../../../../redux/Brand/GettingPaid2/gettingPaidSlice';\n\nexport default function Summary({\n  handleChangeTab,\n  setIsCompleteApplication,\n  setIsEdited,\n  handleConfirmationModelClose,\n}) {\n  const bankDetails = useSelector(selectBankDetails);\n  const representativeDetails = useSelector(selectRepresentativeDetails);\n  const businessDetails = useSelector(selectBusinessDetails);\n  const paidPreferance = useSelector(selectGettingPaidPreferance);\n  const useDetails = useSelector(selectUserDetails);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    watch,\n    formState: { errors, isValid },\n  } = useForm({ resolver: yupResolver(SummaryValidationSchema) });\n\n  const renderEditTab = (tabCode) => {\n    // persistor.pause();\n    // persistor.flush().then(() => {\n    //     return persistor.purge();\n    // });\n    handleChangeTab(tabCode);\n    setIsEdited(true);\n  };\n  const onSubmit = async (data) => {\n    console.log('representativeDetails', representativeDetails);\n    let representativeArray = [];\n    map(representativeDetails, (rep, key) => {\n      const data = {\n        firstName: rep?.fname,\n        lastName: rep?.lname,\n        ssn: rep?.ssn,\n        dob: moment(rep?.dob).format('MM/DD/YYYY'),\n        workPhone: rep?.phoneNumber,\n        email: rep?.email,\n        mailingAddress: [\n          {\n            addressLine1: rep?.addressLine1,\n            addressLine2: rep?.addressLine2,\n            city: rep?.city,\n            state: rep?.stateAddress.value,\n            zip: rep?.zipcode,\n            // isPrimary: key === 0,\n            isPrimary: true,\n          },\n        ],\n        actAsAuthorizedSignatory: key === 0,\n        secondaryIdentification: {\n          type: rep?.secondaryIdentificationType.value,\n          id: rep?.idNumber,\n          stateOfIssuance: rep?.soInsurence?.value,\n          countryOfIssuance: 'US',\n          //   \"countryOfIssuance\": \"US\"\n        },\n        isUSCitizen: rep?.UScitizen === 'yes',\n        businessDetails: {\n          title: 'Secretary',\n          ownershipPercentage:\n            rep?.percentageOwnership !== ''\n              ? businessDetails?.businessCategory?.value ==\n                  'SINGLE_MEMBER_LLC' ||\n                businessDetails?.businessCategory?.value == 'SOLE_PROPRIETOR'\n                ? 100\n                : paidPreferance.publiclyTraded === 'yes'\n                ? 0\n                : rep?.percentageOwnership\n              : 0,\n        },\n      };\n\n      if (data.secondaryIdentification.type === 'ALIEN_REGISTRATION_CARD') {\n        delete data.secondaryIdentification.stateOfIssuance;\n      }\n      if (data.secondaryIdentification.type === 'DRIVER_LICENSE') {\n        delete data.secondaryIdentification.countryOfIssuance;\n      }\n      if (data.secondaryIdentification.type === 'PASSPORT') {\n        delete data.secondaryIdentification.stateOfIssuance;\n      }\n\n      representativeArray.push(data);\n    });\n\n    const formData = {\n      legal_name: businessDetails.businessName,\n      doing_business_as: businessDetails.businessAs,\n      business_email: businessDetails.businessEmail,\n      business_website: businessDetails.website,\n      business_category: businessDetails?.businessCategory?.value,\n      ein: businessDetails.employerIdentificationNumber,\n      ssn: businessDetails?.socialSecurityNumber,\n      state_of_incorporation: businessDetails?.stateOfIncorportation?.value,\n      date_of_incorporation: moment(\n        businessDetails?.dateOfIncorportation\n      ).format('MM/DD/YYYY'),\n      taxIdType: businessDetails?.textIdType?.value ?? 'ein',\n      prior_bankruptcy: businessDetails?.bankruptcy === 'true' ? true : false,\n      date_of_discharge: moment(businessDetails?.dateOfDischarge).format(\n        'MM/DD/YYYY'\n      ),\n      average_sales_volume: businessDetails?.averageSales,\n      average_purchase: businessDetails?.averageSalePrice,\n      average_delivery_time: businessDetails?.averageDeliveryTime?.value,\n      merchant_category_code: businessDetails?.merchantCategoryCode?.value,\n      sales_method: businessDetails?.merchantCategoryCode?.label,\n      product_description: businessDetails?.productionDescription,\n      brand_user_id: useDetails.id,\n      account_type: 'SAVINGS',\n      purpose: 'CONSUMER',\n      countryOfIssuance: businessDetails?.countryAddress?.label,\n      C_Corp_publicly_traded_or_non_profit:\n        paidPreferance.publiclyTraded === 'yes' ? 'Yes' : 'No',\n      business_owner: paidPreferance.authorizedSign === 'yes' ? 'Yes' : 'No',\n      representatives: representativeArray,\n    };\n    console.log(bankDetails, 'bankDetails');\n\n    const bankFormData = {\n      account_holder_name: bankDetails.accountHolderName,\n      account_type: bankDetails.accountType.value,\n      purpose: bankDetails.accountRole.value,\n      routing_number: bankDetails.routingNumber,\n      account_number: bankDetails.accountNumber,\n    };\n\n    if (!formData.taxIdType) {\n      delete formData.taxIdType;\n    }\n    if (\n      !formData.date_of_discharge ||\n      formData.date_of_discharge === 'Invalid date'\n    ) {\n      delete formData.date_of_discharge;\n    }\n    if (!formData.ssn) {\n      delete formData.ssn;\n    }\n\n    const res = await brandAsCustomerAction(formData, bankFormData);\n    if (res.isSuccess) {\n      const res2 = await brandBankDetailsAction(\n        {\n          ...bankFormData,\n          customer_id: Number(res.data.customer_id),\n        },\n        false,\n        null,\n        formData.brand_user_id\n      );\n      if (res2.isSuccess) {\n        setIsCompleteApplication(true);\n        dispatch(\n          getBrandBankDetailsAction(\n            Number(res.data.customer_id),\n            Number(response.data.data.external_account_id)\n          )\n        );\n        dispatch(getBrandProfileAction(useDetails.id));\n        dispatch(setProfileCompleted({ paid: true }));\n        dispatch(gettingPaidResetToInitial());\n      }\n    }\n\n    // reset();\n    // setIsCompleteApplication(true);\n  };\n\n  const tnc = watch('tnc');\n  const confirmation = watch('confirmation');\n\n  return (\n    <>\n      <form className=\"gp-right\" onSubmit={handleSubmit(onSubmit)}>\n        <h3 className=\"heading\">Summary</h3>\n        <p>Review and confirm your application details. </p>\n        <div className=\"form-area\">\n          <div className=\"summary-area\">\n            <div className=\"summary-item\">\n              <div className=\"summary-title\">\n                <h4>\n                  Business Details\n                  <button\n                    className=\"button button-dark\"\n                    onClick={() => renderEditTab('1')}\n                  >\n                    <img src={EditIcon} />\n                    Edit Business Details\n                  </button>\n                </h4>\n              </div>\n              <div className=\"sm-item\">\n                <label>Legal name of business</label>\n                <label>{get(businessDetails, 'businessName', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Doing business as</label>\n                <label>{get(businessDetails, 'businessAs', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Business website address</label>\n                <label>{get(businessDetails, 'website', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Business email address</label>\n                <label>{get(businessDetails, 'businessEmail', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Business category</label>\n                <label>\n                  {get(businessDetails, 'businessCategory.label', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Business phone number</label>\n                <label>{get(businessDetails, 'phoneNumber', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>C_Corp - Publicly Traded or Non-Profit</label>\n                <label>{get(paidPreferance, 'publiclyTraded', '-')}</label>\n              </div>\n              {paidPreferance?.publiclyTraded === 'no' && (\n                <div className=\"sm-item\">\n                  <label>Tax ID type</label>\n                  <label>{get(businessDetails, 'textIdType.label', '-')}</label>\n                </div>\n              )}\n\n              {paidPreferance?.publiclyTraded === 'no' &&\n              businessDetails?.textIdType?.value === 'ssn' ? (\n                <div className=\"sm-item\">\n                  <label>Social Security Number (SSN)</label>\n                  <label>\n                    {get(businessDetails, 'socialSecurityNumber', '-')}\n                  </label>\n                </div>\n              ) : (\n                <div className=\"sm-item\">\n                  <label>Employer identification number (EIN)</label>\n                  <label>\n                    {get(businessDetails, 'employerIdentificationNumber', '-')}\n                  </label>\n                </div>\n              )}\n              <div className=\"sm-item\">\n                <label>Address</label>\n                <label>\n                  {get(businessDetails, 'countryAddress.label', '-')}\n                  <br />\n                  {get(businessDetails, 'stateAddress.label', '-')}\n                  <br />\n                  {get(businessDetails, 'addressLine1', '-')}\n                  <br />\n                  {get(businessDetails, 'addressLine2', '-')}\n                  <br />\n                  {get(businessDetails, 'city', '-')}{' '}\n                  {get(businessDetails, 'zipcode', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>State of incorporation</label>\n                <label>\n                  {get(businessDetails, 'stateOfIncorportation.label', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Date of incorporation</label>\n                <label>\n                  {get(businessDetails, 'dateOfIncorportation', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Prior bankruptcy</label>\n                <label>{get(businessDetails, 'bankruptcy', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>\n                  Estimated average sales volume on ShopDot (Monthly)\n                </label>\n                <label>${get(businessDetails, 'averageSales', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>\n                  Estimated average wholesale price on ShopDot (per item)\n                </label>\n                <label>${get(businessDetails, 'averageSalePrice', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Average delivery time</label>\n                <label>\n                  {get(businessDetails, 'averageDeliveryTime.label', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Merchant category code</label>\n                <label>\n                  {get(businessDetails, 'merchantCategoryCode.label', '-')}\n                </label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Sales method</label>\n                <label>{get(businessDetails, 'salesMethod.label', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Product description</label>\n                <label>\n                  {get(businessDetails, 'productionDescription', '-')}\n                </label>\n              </div>\n            </div>\n            {representativeDetails.length > 0 &&\n              representativeDetails.map((item, index) => {\n                return (\n                  <div className=\"summary-item mt-3\" key={index}>\n                    <div className=\"summary-title\">\n                      <h4>\n                        Business Representative <span>#{index + 1}</span>\n                        <button\n                          className=\"button button-dark\"\n                          onClick={() => renderEditTab('2')}\n                        >\n                          <img src={EditIcon} />\n                          Edit Business Representative\n                        </button>\n                      </h4>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Legal name of business representative</label>\n                      <label>\n                        {get(item, 'fname', '-')} {get(item, 'lname', '-')}\n                      </label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Phone number</label>\n                      <label>{get(item, 'phoneNumber', '-')}</label>\n                    </div>\n\n                    <div className=\"sm-item\">\n                      <label>Social Security Number (SSN)</label>\n                      <label>{get(item, 'ssn', '-')}</label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Date of birth</label>\n                      <label>{get(item, 'dob', '-')}</label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Email address</label>\n                      <label>{get(item, 'email', '-')}</label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Address</label>\n                      <label>\n                        {get(item, 'stateAddress.label', '-')}\n                        <br />\n                        {get(item, 'addressLine1', '-')}\n                        <br />\n                        {get(item, 'addressLine2', '-')}\n                        <br />\n                        {get(item, 'city', '-')} {get(item, 'zipcode', '-')}\n                      </label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label className=\"sm-sub-title\">\n                        Secondary Identification\n                      </label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Identification type</label>\n                      <label>\n                        {get(item, 'secondaryIdentificationType.label', '-')}\n                      </label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>ID number</label>\n                      <label>{get(item, 'idNumber', '-')}</label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>State of issuance</label>\n                      <label>\n                        {get(item, 'soInsurence.label', null) ??\n                          get(item, 'stateAddress.label', '-')}\n                      </label>\n                    </div>\n                    {index === 0 && (\n                      <div className=\"sm-item\">\n                        <label>Authorized signer</label>\n                        <label>\n                          {get(paidPreferance, 'authorizedSign', '-')}\n                        </label>\n                      </div>\n                    )}\n                    <div className=\"sm-item\">\n                      <label>Business owner</label>\n                      <label>\n                        {get(paidPreferance, 'businessOwner', 'yes')}\n                      </label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>U.S. citizen</label>\n                      <label>{get(item, 'UScitizen', '-')}</label>\n                    </div>\n                    <div className=\"sm-item\">\n                      <label>Percentage ownership</label>\n                      <label>\n                        {' '}\n                        {get(item, 'percentageOwnership', 0)\n                          ? get(item, 'percentageOwnership')\n                          : 0}\n                        %\n                      </label>\n                    </div>\n                  </div>\n                );\n              })}\n\n            <div className=\"summary-item mt-3\">\n              <div className=\"summary-title\">\n                <h4>\n                  Bank Details\n                  <button\n                    className=\"button button-dark\"\n                    onClick={() => renderEditTab('3')}\n                  >\n                    <img src={EditIcon} />\n                    Edit Bank Details\n                  </button>\n                </h4>\n              </div>\n              <div className=\"sm-item\">\n                <label>Name of the bank account holder</label>\n                <label>{get(bankDetails, 'accountHolderName', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Bank account type</label>\n                <label>{get(bankDetails, 'accountType.label', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Purpose</label>\n                <label>{get(bankDetails, 'accountRole.label', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Account number</label>\n                <label>{get(bankDetails, 'accountNumber', '-')}</label>\n              </div>\n              <div className=\"sm-item\">\n                <label>Routing number</label>\n                <label>{get(bankDetails, 'routingNumber', '-')}</label>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"form-area check-box summary-checklist\">\n          <label htmlFor=\"check-a\" className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              name=\"cehck-a\"\n              id=\"check-a\"\n              {...register('confirmation', { required: true })}\n            />\n            <div className=\"checkbox-text\">\n              <span>I confirm that the details I have entered are true.</span>\n            </div>\n            {errors.confirmation && (\n              <span className=\"error-text\">{errors.confirmation?.message}</span>\n            )}\n          </label>\n          <label htmlFor=\"check-b\" className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              name=\"check-b\"\n              id=\"check-b\"\n              {...register('tnc', { required: true })}\n            />\n            <div className=\"checkbox-text\">\n              <span>\n                I agree with the{' '}\n                <Link to={merchantServices} target=\"_blank\">\n                  Terms and Conditions\n                </Link>{' '}\n                set by Priority Technology Holdings, Inc. (&quot;PRTH&quot;)\n              </span>\n            </div>\n            {errors.tnc && (\n              <span className=\"error-text\">{errors.tnc?.message}</span>\n            )}\n          </label>\n        </div>\n        <div className=\"form-area\">\n          <div className=\"form-input form-submit\">\n            <button\n              type=\"button\"\n              onClick={() => handleConfirmationModelClose()}\n              className=\"button button-grey cancel\"\n            >\n              Back\n            </button>\n            <button\n              disabled={!isValid}\n              type=\"submit\"\n              className=\"button summary-icon\"\n            >\n              Submit\n            </button>\n          </div>\n        </div>\n      </form>\n      <ToastContainer />\n    </>\n  );\n}\n\nSummary.propTypes = {\n  handleChangeTab: PropTypes.func,\n  setIsCompleteApplication: PropTypes.func,\n  setIsEdited: PropTypes.func,\n  handleConfirmationModelClose: PropTypes.func,\n};\n","import * as yup from 'yup';\nimport { store } from '../../../../redux/store';\n\nexport const BusinessDetailsValidationSchema = yup.object().shape({\n  businessName: yup.string().required('Legal business name is required.'),\n  // businessAs: yup\n  //   .string()\n  //   .required('Doing business is required.')\n  //   .test(\n  //     'businessname',\n  //     'doing business is different than the legal name',\n  //     function (business) {\n  //       return business ? business !== this.parent.businessName : true;\n  //     }\n  //   ),\n  website: yup\n    .string()\n    .matches(\n        /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\n        'Please enter correct website url!'\n    )\n    .required('Business website address is required.'),\n  businessEmail: yup\n    .string()\n    .email('Must be a valid email.')\n    .max(255)\n    .required('Business email address is required.'),\n  businessCategory: yup\n    .object()\n    .nullable()\n    .required('Business category is required.'),\n  textIdType: yup.object().when('businessCategory', {\n    is: (businessCategory) =>\n      businessCategory?.value === 'single_member_llc' ||\n      businessCategory?.value === 'sole_proprietor',\n    then: yup.object().nullable().required('TextID is required'),\n  }),\n  // employerIdentificationNumber: yup\n  //     .object()\n  //     .nullable()\n  //     .required('Employer identification number is required'),\n  // socialSecurityNumber: yup\n  //     .object()\n  //     .nullable()\n  //     .required('Social security number is required'),\n  // employerIdentificationNumber: yup.string().when('businessCategory', {\n  //     is: (businessCategory) =>\n  //         businessCategory?.value !== 'single_member_llc' ||\n  //         businessCategory?.value !== 'sole_proprietor',\n  //     then: yup\n  //         .string()\n  //         .required('Employer identification number is required'),\n  // }),\n  // socialSecurityNumber: yup\n  //     .string()\n  //     .when('textIdType', {\n  //         is: (textIdType) => textIdType?.value === 'ssn',\n  //         then: yup.string().required('Social security number is required'),\n  //     })\n  //     .when('businessCategory', {\n  //         is: (businessCategory) =>\n  //             businessCategory?.value === 'single_member_llc' ||\n  //             businessCategory?.value === 'sole_proprietor',\n  //         then: yup.string().required('Social security number is required'),\n  //     }),\n  phoneNumber: yup\n    .string()\n    .nullable()\n    .required('Phone number is required.')\n    .min(12, 'Phone should be 10 digits.'),\n  addressLine1: yup.string().nullable().required('Address line 1 is required.'),\n  countryAddress: yup.object().nullable().required('Country is require.'),\n  stateAddress: yup.object().nullable().required('State is require.'),\n  city: yup.string().required('City is required.'),\n  zipcode: yup\n    .string()\n    .nullable()\n    .notOneOf(\n      ['00000'],\n      'Should be in XXXXX format.Cannot containt all zeroes.'\n    )\n    .min(5)\n    .max(5)\n    .required('Zipcode must be atleast 5 characters'),\n  stateOfIncorportation: yup\n    .object()\n    .nullable()\n    .required('State of incorporation is required.'),\n  dateOfIncorportation: yup\n    .string()\n    .nullable()\n    .required('Date of incorporation is required.'),\n  bankruptcy: yup.string().nullable().required('Prior bankruptcy is required.'),\n  dateOfDischarge: yup.string().when('bankruptcy', {\n    is: (bankruptcy) => bankruptcy === 'yes',\n    then: yup.string().nullable().required('Date of discharge is required.'),\n  }),\n  averageSales: yup\n    .string()\n    .required('Estimated average sales volume on shopdot is required.'),\n  averageSalePrice: yup\n    .string()\n    .required('Estimated average sale price on shopdot is required.'),\n  averageDeliveryTime: yup\n    .object()\n    .nullable()\n    .required('Average delivery time is required.'),\n  merchantCategoryCode: yup\n    .object()\n    .nullable()\n    .required('Merchant category code is required.'),\n  salesMethod: yup.object().nullable().required('Sales method is required.'),\n  productionDescription: yup\n    .string()\n    .required('Product description is required.'),\n  // phone: yup\n  //     .string()\n  //     .matches(/^\\d{10}$/, 'Phone number must be 10 digits')\n  //     .transform((value, originalValue) => {\n  //         if (!originalValue) return originalValue;\n  //         const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n  //         const phoneNumberLength = phoneNumber.length;\n  //         if (phoneNumberLength < 4) return phoneNumber;\n  //         if (phoneNumberLength < 7) {\n  //             return `${phoneNumber.slice(0, 3)}-${phoneNumber.slice(3)}`;\n  //         }\n  //         return `${phoneNumber.slice(0, 3)}-${phoneNumber.slice(\n  //             3,\n  //             6\n  //         )}-${phoneNumber.slice(6)}`;\n  //     }),\n  // phone: yup\n  //     .string()\n  //     .matches(phoneRegExp, 'Phone number is not in the correct format')\n  //     .transform((value, originalValue) => {\n  //         const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n  //         const hasNonRepeatedConsecutiveNumbers = !/(.)\\1{2,}/.test(\n  //             phoneNumber\n  //         );\n  //         console.log(\n  //             'phoneNumber',\n  //             hasNonRepeatedConsecutiveNumbers,\n  //             phoneNumber,\n  //             value\n  //         );\n  //         if (hasNonRepeatedConsecutiveNumbers) {\n  //             const newNumber = `${phoneNumber.slice(\n  //                 0,\n  //                 3\n  //             )}-${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n  //             console.log('newNumber-------------------', newNumber);\n  //             return newNumber;\n  //         }\n  //         return originalValue;\n  //     }),\n\n  // phone: yup\n  //     .string()\n  //     .required('Phone number is required')\n  //     .transform((value, originalValue) => {\n  //         // If value is not undefined, remove all non-digit characters and format\n  //         if (value) {\n  //             const phoneNumber = originalValue.replace(/[^\\d]/g, '');\n  //             const newNumber = `${phoneNumber.slice(\n  //                 0,\n  //                 3\n  //             )}-${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n  //             return newNumber;\n  //         }\n\n  // const rawValue = value.replace(/[^\\d]/g, ''); // Remove all non-digits\n  // let formattedValue = '';\n  // if (rawValue.length < 4) {\n  //     formattedValue = rawValue;\n  // } else if (rawValue.length < 7) {\n  //     formattedValue = `${rawValue.slice(0, 3)}-${rawValue.slice(3)}`;\n  // } else {\n  //     formattedValue = `${rawValue.slice(0, 3)}-${rawValue.slice(\n  //         3,\n  //         6\n  //     )}-${rawValue.slice(6, 10)}`;\n  // }\n  // If value is undefined, return empty string\n  //     return '';\n  // })\n  // .matches(/^\\d{10}$/, 'Phone number must be 10 digits'),\n\n  // phone: yup\n  //     .string()\n  //     .matches(/^\\d{10}$/, 'Phone number must be 10 digits')\n  //     .transform((value) =>\n  //         value ? value.replace(/(\\d{2})(\\d{3})(\\d{4})/, '$1-$2-$3') : ''\n  //     )\n  //     .nullable()\n  //     .required('Phone number is required'),\n\n  // phone: yup\n  //     .string()\n  //     .matches(phoneRegExp, 'Phone number must be 10 digits')\n  //     .transform((value, originalValue) =>\n  //         originalValue\n  //             ? originalValue.replace(/^(\\d{2})(\\d{3})(\\d{4})$/, '$1-$2-$3')\n  //             : ''\n  //     )\n  //     .nullable()\n  //     .required('Phone number is required'),\n});\n\nexport const getRepresentativeValidation = () => {\n  // Get the store data\n  const storeData = store.getState();\n  const { gettingPaid } = storeData;\n  const { businessDetails } = gettingPaid;\n\n  return yup.object().shape({\n    representativeDetails: yup.array().of(\n      yup.object().shape({\n        fname: yup\n          .string()\n          .nullable()\n          .required('Legal person first name is required.'),\n        lname: yup\n          .string()\n          .nullable()\n          .required('Legal person last name is required.'),\n        phoneNumber: yup\n          .string()\n          .nullable()\n          .required('Phone number is required.')\n          .min(12, 'Phone should be 10 digits.'),\n        ssn: yup\n          .string()\n          .nullable()\n          .required('SSN is required.')\n          .min(11, 'SSN should be 9 digit.'),\n        dob: yup.string().nullable().required('Date of birth is required.'),\n        email: yup\n          .string()\n          .email('Must be a valid email.')\n          .max(255)\n          .required('Email address is required.'),\n        countryAddress: yup.object().nullable().required('Country is require.'),\n        stateAddress: yup.object().nullable().required('State is require.'),\n        addressLine1: yup\n          .string()\n          .nullable()\n          .required('Address line 1 is required.'),\n        city: yup.string().required('City is required.'),\n        zipcode: yup\n          .string()\n          .nullable()\n          .notOneOf(\n            ['00000'],\n            'Should be in XXXXX format.Cannot containt all zeroes.'\n          )\n          .min(5)\n          .max(5)\n          .required('Zipcode must be atleast 5 characters'),\n        secondaryIdentificationType: yup\n          .object()\n          .nullable()\n          .required('Secondary identification is required.'),\n        soInsurence: yup\n          .object()\n          .nullable()\n          .when('secondaryIdentificationType', {\n            is: (secondaryIdentificationType) =>\n              secondaryIdentificationType?.value === 'dl',\n            then: yup\n              .object()\n              .nullable()\n              .required('State of issuance is required.'),\n          }),\n        idNumber: yup.string().nullable().required('Id number is required.'),\n        percentageOwnership: yup\n          .mixed()\n          .required('Ownership percentage must be 100%.')\n          .test(\n            'is-valid-settings',\n            'Ownership percentage must be 100%.',\n            (value, context) => {\n              console.log('context', context);\n              // Custom validation function for the 'percentageOwnership' field\n              if (businessDetails?.businessCategory?.value === 'partnership') {\n                if (\n                  value !== '' &&\n                  !isNaN(value) &&\n                  (Number(value) === 100 ||\n                    (Number(value) >= 25 && Number(value) <= 100))\n                ) {\n                  return true;\n                }\n                return context.createError({\n                  message:\n                    Number(value) > 100\n                      ? 'Ownership percentage is invalid!'\n                      : 'Ownership percentage must be 25% or more',\n                  path: context.path,\n                });\n              } else if (\n                businessDetails?.businessCategory?.value ===\n                  'single_member_llc' ||\n                businessDetails?.businessCategory?.value === 'sole_proprietor'\n              ) {\n                if (value !== '' && !isNaN(value) && Number(value) === 100) {\n                  return true;\n                }\n                return false;\n              }\n              if (\n                value !== '' &&\n                !isNaN(value) &&\n                (Number(value) === 100 ||\n                  (Number(value) >= 25 && Number(value) <= 100))\n              ) {\n                return true;\n              }\n              return context.createError({\n                message:\n                  Number(value) > 100\n                    ? 'Ownership percentage is invalid!'\n                    : 'Ownership percentage must be 25% or more',\n                path: context.path,\n              });\n            }\n          ),\n      })\n    ),\n  });\n};\n\nexport const BusinessRepresentativeValidationSchema = yup.object().shape({\n  representativeDetails: yup.array().of(\n    yup.object().shape({\n      fname: yup\n        .string()\n        .nullable()\n        .required('Legal person first name is required.'),\n      lname: yup\n        .string()\n        .nullable()\n        .required('Legal person last name is required.'),\n      // phoneNumber: yup\n      //     .string()\n      // .matches(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/, 'Invalid phone number')\n      // .notOneOf(['00000'], 'Should be in XXX-XXX-XXXX format and Cannot be all zeroes.')\n      // .min(10, 'Phone should be 10 digits.')\n      // .max(10, 'Phone should be 10 digits.')\n      // .required('Phone number is required.'),\n      phoneNumber: yup\n        .string()\n        .nullable()\n        .required('Phone number is required.')\n        .min(12, 'Phone should be 10 digits.'),\n      ssn: yup\n        .string()\n        .nullable()\n        .required('SSN is required.')\n        .min(11, 'SSN should be 9 digit.')\n        .max(11, 'SSN should be 9 digit.'),\n      dob: yup.string().nullable().required('Date of birth is required.'),\n      email: yup\n        .string()\n        .email('Must be a valid email.')\n        .max(255)\n        .required('Email address is required.'),\n      countryAddress: yup.object().nullable().required('Country is require.'),\n      stateAddress: yup.object().nullable().required('State is require.'),\n      addressLine1: yup\n        .string()\n        .nullable()\n        .required('Address line 1 is required.'),\n      city: yup.string().required('City is required.'),\n      zipcode: yup\n        .string()\n        .nullable()\n        .notOneOf(\n          ['00000'],\n          'Should be in XXXXX format.Cannot containt all zeroes.'\n        )\n        .min(5)\n        .max(5)\n        .required('Zipcode must be atleast 5 characters'),\n      secondaryIdentificationType: yup\n        .object()\n        .nullable()\n        .required('Secondary identification is required.'),\n      soInsurence: yup\n        .object()\n        .nullable()\n        .when('secondaryIdentificationType', {\n          is: (secondaryIdentificationType) =>\n            secondaryIdentificationType?.value === 'dl',\n          then: yup\n            .object()\n            .nullable()\n            .required('State of issuance is required.'),\n        }),\n      idNumber: yup.string().nullable().required('Id number is required.'),\n    })\n  ),\n});\n\nexport const BankDetailsValidationSchema = yup.object().shape({\n  accountHolderName: yup\n    .string()\n    .required('Bank account holder name is required.'),\n  accountType: yup\n    .object()\n    .nullable()\n    .required('Bank account type is required.'),\n  accountRole: yup.object().nullable().required('Purpose is required.'),\n  accountNumber: yup\n    .string()\n    .required('Account number is required.')\n    .max(8, 'Account number should be 8 digits.')\n    .min(8, 'Account number should be 8 digits.'),\n  routingNumber: yup\n    .string()\n    .required('Routing number is require')\n    .max(9, 'Routing number should be 9 digits.')\n    .min(9, 'Routing number should be 9 digits.'),\n});\n\nexport const SummaryValidationSchema = yup.object().shape({\n  confirmation: yup\n    .boolean()\n    .oneOf([true], 'uou need to accept the confirm details'),\n  tnc: yup\n    .boolean()\n    .oneOf([true], 'you need to accept the terms and conditions'),\n});\n\nexport const shippingValidationSchema = yup.object().shape({\n  address1: yup.string().required('Address 1 is required.'),\n  daystofulfill: yup\n    .object()\n    .nullable()\n    .required('Days to fultill  is required.'),\n  state: yup\n    .object()\n    .shape({\n      label: yup.string().required('State is required.'),\n      value: yup.string().required('State is required.'),\n    })\n    .nullable()\n    .required('State is required.'),\n  country: yup\n    .object()\n    .shape({\n      label: yup.string().required('Country is required.'),\n      value: yup.string().required('Country is required.'),\n    })\n    .nullable()\n    .required('Country is required.'),\n  city: yup.string().required('City is required.'),\n  shippingfee: yup.string().required('Shipping fee is required.'),\n  incrementalfee: yup.string().required('Incremental fee is required.'),\n  zip: yup.string().required('Zipcode must be atleast 5 characters'),\n});\n\nexport const brandProfileValidationSchema = yup.object().shape({\n  company_name: yup.string().required('Company name is required.'),\n  company_email_address: yup\n    .string()\n    .email('Must be a valid email.')\n    .max(255)\n    .required('Contact email is required.'),\n  company_phone_number: yup\n    .string()\n    .nullable()\n    .required('Contact phone number is required.')\n    .min(12, 'Contact phone should be 10 digits.'),\n  store_name: yup.string().required('Brand name is required.'),\n  store_website: yup\n    .string()\n    .url('Please enter a valid URL')\n    .required('Brand website is required.'),\n  brand_categories: yup\n    .array()\n    .min(1, 'At least 1 category required')\n    .max(3, 'Select max 3 category.')\n    .nullable()\n    .required('Select max 3 category.'),\n  brand_values: yup.array(),\n  brand_story: yup.string().required('About the brand is required.'),\n  brand_promo: yup.string().url('Please enter a valid URL'),\n});\n"],"names":["Summary","_ref","_businessDetails$text3","_errors$confirmation","_errors$tnc","handleChangeTab","setIsCompleteApplication","setIsEdited","handleConfirmationModelClose","bankDetails","useSelector","selectBankDetails","representativeDetails","selectRepresentativeDetails","businessDetails","selectBusinessDetails","paidPreferance","selectGettingPaidPreferance","useDetails","selectUserDetails","dispatch","useDispatch","_useForm","useForm","resolver","yupResolver","SummaryValidationSchema","register","handleSubmit","watch","reset","_useForm$formState","formState","errors","isValid","renderEditTab","tabCode","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","_businessDetails$busi3","_businessDetails$stat","_businessDetails$text","_businessDetails$text2","_businessDetails$aver","_businessDetails$merc","_businessDetails$merc2","_businessDetails$coun","representativeArray","formData","bankFormData","res","wrap","_context","prev","next","console","log","map","rep","key","_rep$soInsurence","_businessDetails$busi","_businessDetails$busi2","firstName","fname","lastName","lname","ssn","dob","moment","format","workPhone","phoneNumber","email","mailingAddress","addressLine1","addressLine2","city","state","stateAddress","value","zip","zipcode","isPrimary","actAsAuthorizedSignatory","secondaryIdentification","type","secondaryIdentificationType","id","idNumber","stateOfIssuance","soInsurence","countryOfIssuance","isUSCitizen","UScitizen","title","ownershipPercentage","percentageOwnership","businessCategory","publiclyTraded","push","legal_name","businessName","doing_business_as","businessAs","business_email","businessEmail","business_website","website","business_category","ein","employerIdentificationNumber","socialSecurityNumber","state_of_incorporation","stateOfIncorportation","date_of_incorporation","dateOfIncorportation","taxIdType","textIdType","prior_bankruptcy","bankruptcy","date_of_discharge","dateOfDischarge","average_sales_volume","averageSales","average_purchase","averageSalePrice","average_delivery_time","averageDeliveryTime","merchant_category_code","merchantCategoryCode","sales_method","label","product_description","productionDescription","brand_user_id","account_type","purpose","countryAddress","C_Corp_publicly_traded_or_non_profit","business_owner","authorizedSign","representatives","account_holder_name","accountHolderName","accountType","accountRole","routing_number","routingNumber","account_number","accountNumber","brandAsCustomerAction","sent","isSuccess","brandBankDetailsAction","_objectSpread","customer_id","Number","getBrandBankDetailsAction","response","external_account_id","getBrandProfileAction","setProfileCompleted","paid","gettingPaidResetToInitial","stop","_x","apply","arguments","_jsxs","_Fragment","children","className","_jsx","onClick","src","EditIcon","get","length","item","index","_get","htmlFor","name","required","confirmation","message","Link","to","merchantServices","target","tnc","disabled","ToastContainer","BusinessDetailsValidationSchema","yup","shape","matches","max","nullable","when","is","then","min","notOneOf","salesMethod","getRepresentativeValidation","store","getState","gettingPaid","of","test","context","isNaN","createError","path","BusinessRepresentativeValidationSchema","BankDetailsValidationSchema","oneOf","shippingValidationSchema","address1","daystofulfill","country","shippingfee","incrementalfee","brandProfileValidationSchema","company_name","company_email_address","company_phone_number","store_name","store_website","url","brand_categories","brand_values","brand_story","brand_promo"],"sourceRoot":""}