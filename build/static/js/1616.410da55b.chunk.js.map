{"version":3,"file":"static/js/1616.410da55b.chunk.js","mappings":"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","sources":["pages/Brand/Settings/Paid/EditBankDetails.js","pages/Brand/Settings/Paid/ValidationSchema.js","redux/Brand/GettingPaid/gettingPaidSlice.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectBankDetails } from '../../../../redux/Brand/GettingPaid/gettingPaidSelector';\nimport { setBankDetails } from '../../../../redux/Brand/GettingPaid/gettingPaidSlice';\nimport Select from 'react-select';\nimport { BankDetailsValidationSchema } from './ValidationSchema';\n\nconst accountTypeOption = [\n    {\n        value: 'saving',\n        label: 'Savings',\n    },\n    { value: 'current', label: 'Current' },\n];\n\nconst accountRoleOption = [\n    {\n        value: 'personal',\n        label: 'Personal',\n    },\n    { value: 'business', label: 'Business' },\n];\n\nconst categoryStyle = {\n    control: (styles) => {\n        return {\n            ...styles,\n            borderColor: '#ebbca2',\n            boxShadow: 'none',\n            minHeight: '40px',\n            '&:hover': {\n                boxShadow: 'none',\n            },\n        };\n    },\n    container: (style) => {\n        return {\n            ...style,\n            marginTop: '5xp',\n            marginRight: '1px',\n        };\n    },\n};\n\nconst defaultValues = {\n    accountType: accountTypeOption[0],\n    accountRole: accountRoleOption[0],\n};\n\nexport default function EditBankDetail({ setEditBankDetails }) {\n    const {\n        register,\n        handleSubmit,\n        control,\n        setValue,\n        formState: { errors },\n    } = useForm({\n        mode: 'onChange',\n        resolver: yupResolver(BankDetailsValidationSchema),\n        defaultValues,\n    });\n\n    const bankDetails = useSelector(selectBankDetails);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const fields = [\n            'accountHolderName',\n            'accountType',\n            'accountRole',\n            'accountNumber',\n            'routingNumber',\n        ];\n\n        fields.forEach((field) => setValue(field, bankDetails[field]));\n    }, []);\n\n    const onSubmit = (data) => {\n        dispatch(setBankDetails(data));\n        // setEditBankDetails(false);\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <h2 className=\"mt-5\">Bank Details</h2>\n                <div className=\"form-area\">\n                    <div className=\"form-input mb-4\">\n                        <label htmlFor=\"\" className=\"form-label\">\n                            Name of the bank account holder&nbsp;\n                            <span className=\"asterisk-red\">*</span>\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control mb-0\"\n                            name=\"accountHolderName\"\n                            placeholder=\"Jane Doe\"\n                            {...register('accountHolderName', {\n                                required: true,\n                            })}\n                        />\n                        {errors.accountHolderName && (\n                            <span className=\"error-text\">\n                                {errors.accountHolderName?.message}\n                            </span>\n                        )}\n                    </div>\n                    <div className=\"form-input mb-4\">\n                        <label htmlFor=\"\" className=\"form-label\">\n                            Bank account type&nbsp;\n                            <span className=\"asterisk-red\">*</span>\n                        </label>\n                        <Controller\n                            name=\"accountType\"\n                            control={control}\n                            render={({ field }) => (\n                                <Select\n                                    {...field}\n                                    className=\"basic-single\"\n                                    classNamePrefix=\"select\"\n                                    styles={categoryStyle}\n                                    components={{\n                                        IndicatorSeparator: () => null,\n                                    }}\n                                    theme={(theme) => ({\n                                        ...theme,\n                                        colors: {\n                                            ...theme.colors,\n                                            primary25: '#fbf5f0',\n                                            primary: '#bd6f34',\n                                        },\n                                    })}\n                                    options={accountTypeOption}\n                                />\n                            )}\n                        />\n                        {errors.accountType && (\n                            <span className=\"error-text\">\n                                {errors.accountType?.message}\n                            </span>\n                        )}\n                    </div>\n\n                    <div className=\"form-input mb-4\">\n                        <label htmlFor=\"\" className=\"form-label\">\n                            Purpose&nbsp;<span className=\"asterisk-red\">*</span>\n                        </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control mb-0\"\n                            name=\"accountRole\"\n                            placeholder=\"\"\n                            disabled\n                            {...register('accountRole', { required: true })}\n                        />\n                        {errors.accountRole && (\n                            <span className=\"error-text\">\n                                {errors.accountRole?.message}\n                            </span>\n                        )}\n                    </div>\n\n                    <div className=\"form-input mb-4\">\n                        <label htmlFor=\"\" className=\"form-label\">\n                            Account number&nbsp;\n                            <span className=\"asterisk-red\">*</span>\n                        </label>\n                        <input\n                            type=\"number\"\n                            className=\"form-control mb-0\"\n                            name=\"accountNumber\"\n                            placeholder=\"12345678\"\n                            {...register('accountNumber', { required: true })}\n                        />\n                        {errors.accountNumber && (\n                            <span className=\"error-text\">\n                                {errors.accountNumber?.message}\n                            </span>\n                        )}\n                    </div>\n\n                    <div className=\"form-input mb-4\">\n                        <label htmlFor=\"\" className=\"form-label\">\n                            Routing number&nbsp;\n                            <span className=\"asterisk-red\">*</span>\n                        </label>\n                        <input\n                            type=\"number\"\n                            className=\"form-control mb-0\"\n                            name=\"routingNumber\"\n                            placeholder=\"123456789\"\n                            {...register('routingNumber', { required: true })}\n                        />\n                        {errors.routingNumber && (\n                            <span className=\"error-text\">\n                                {errors.routingNumber?.message}\n                            </span>\n                        )}\n                        <small>\n                            9-digit Routing Number of the account used for ACH\n                            transactions.\n                        </small>\n                    </div>\n                </div>\n                <div className=\"form-area\">\n                    <div className=\"form-input form-submit\">\n                        <button className=\"button w-100\">Save</button>\n                    </div>\n                </div>\n            </form>\n        </>\n    );\n}\n\nEditBankDetail.propTypes = {\n    setEditBankDetails: PropTypes.func,\n};\n","import * as yup from 'yup';\r\nimport { store } from '../../../../redux/store';\r\n\r\nexport const BusinessDetailsValidationSchema = yup.object().shape({\r\n  businessName: yup.string().required('Legal business name is required.'),\r\n  // businessAs: yup\r\n  //   .string()\r\n  //   .required('Doing business is required.')\r\n  //   .test(\r\n  //     'businessname',\r\n  //     'doing business is different than the legal name',\r\n  //     function (business) {\r\n  //       return business ? business !== this.parent.businessName : true;\r\n  //     }\r\n  //   ),\r\n  website: yup\r\n    .string()\r\n    .matches(\r\n        /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n        'Please enter correct website url!'\r\n    )\r\n    .required('Business website address is required.'),\r\n  businessEmail: yup\r\n    .string()\r\n    .email('Must be a valid email.')\r\n    .max(255)\r\n    .required('Business email address is required.'),\r\n  businessCategory: yup\r\n    .object()\r\n    .nullable()\r\n    .required('Business category is required.'),\r\n  textIdType: yup.object().when('businessCategory', {\r\n    is: (businessCategory) =>\r\n      businessCategory?.value === 'single_member_llc' ||\r\n      businessCategory?.value === 'sole_proprietor',\r\n    then: yup.object().nullable().required('TextID is required'),\r\n  }),\r\n  // employerIdentificationNumber: yup\r\n  //     .object()\r\n  //     .nullable()\r\n  //     .required('Employer identification number is required'),\r\n  // socialSecurityNumber: yup\r\n  //     .object()\r\n  //     .nullable()\r\n  //     .required('Social security number is required'),\r\n  // employerIdentificationNumber: yup.string().when('businessCategory', {\r\n  //     is: (businessCategory) =>\r\n  //         businessCategory?.value !== 'single_member_llc' ||\r\n  //         businessCategory?.value !== 'sole_proprietor',\r\n  //     then: yup\r\n  //         .string()\r\n  //         .required('Employer identification number is required'),\r\n  // }),\r\n  // socialSecurityNumber: yup\r\n  //     .string()\r\n  //     .when('textIdType', {\r\n  //         is: (textIdType) => textIdType?.value === 'ssn',\r\n  //         then: yup.string().required('Social security number is required'),\r\n  //     })\r\n  //     .when('businessCategory', {\r\n  //         is: (businessCategory) =>\r\n  //             businessCategory?.value === 'single_member_llc' ||\r\n  //             businessCategory?.value === 'sole_proprietor',\r\n  //         then: yup.string().required('Social security number is required'),\r\n  //     }),\r\n  phoneNumber: yup\r\n    .string()\r\n    .nullable()\r\n    .required('Phone number is required.')\r\n    .min(12, 'Phone should be 10 digits.'),\r\n  addressLine1: yup.string().nullable().required('Address line 1 is required.'),\r\n  countryAddress: yup.object().nullable().required('Country is require.'),\r\n  stateAddress: yup.object().nullable().required('State is require.'),\r\n  city: yup.string().required('City is required.'),\r\n  zipcode: yup\r\n    .string()\r\n    .nullable()\r\n    .notOneOf(\r\n      ['00000'],\r\n      'Should be in XXXXX format.Cannot containt all zeroes.'\r\n    )\r\n    .min(5)\r\n    .max(5)\r\n    .required('Zipcode must be atleast 5 characters'),\r\n  stateOfIncorportation: yup\r\n    .object()\r\n    .nullable()\r\n    .required('State of incorporation is required.'),\r\n  dateOfIncorportation: yup\r\n    .string()\r\n    .nullable()\r\n    .required('Date of incorporation is required.'),\r\n  bankruptcy: yup.string().nullable().required('Prior bankruptcy is required.'),\r\n  dateOfDischarge: yup.string().when('bankruptcy', {\r\n    is: (bankruptcy) => bankruptcy === 'yes',\r\n    then: yup.string().nullable().required('Date of discharge is required.'),\r\n  }),\r\n  averageSales: yup\r\n    .string()\r\n    .required('Estimated average sales volume on shopdot is required.'),\r\n  averageSalePrice: yup\r\n    .string()\r\n    .required('Estimated average sale price on shopdot is required.'),\r\n  averageDeliveryTime: yup\r\n    .object()\r\n    .nullable()\r\n    .required('Average delivery time is required.'),\r\n  merchantCategoryCode: yup\r\n    .object()\r\n    .nullable()\r\n    .required('Merchant category code is required.'),\r\n  salesMethod: yup.object().nullable().required('Sales method is required.'),\r\n  productionDescription: yup\r\n    .string()\r\n    .required('Product description is required.'),\r\n  // phone: yup\r\n  //     .string()\r\n  //     .matches(/^\\d{10}$/, 'Phone number must be 10 digits')\r\n  //     .transform((value, originalValue) => {\r\n  //         if (!originalValue) return originalValue;\r\n  //         const phoneNumber = originalValue.replace(/[^\\d]/g, '');\r\n  //         const phoneNumberLength = phoneNumber.length;\r\n  //         if (phoneNumberLength < 4) return phoneNumber;\r\n  //         if (phoneNumberLength < 7) {\r\n  //             return `${phoneNumber.slice(0, 3)}-${phoneNumber.slice(3)}`;\r\n  //         }\r\n  //         return `${phoneNumber.slice(0, 3)}-${phoneNumber.slice(\r\n  //             3,\r\n  //             6\r\n  //         )}-${phoneNumber.slice(6)}`;\r\n  //     }),\r\n  // phone: yup\r\n  //     .string()\r\n  //     .matches(phoneRegExp, 'Phone number is not in the correct format')\r\n  //     .transform((value, originalValue) => {\r\n  //         const phoneNumber = originalValue.replace(/[^\\d]/g, '');\r\n  //         const hasNonRepeatedConsecutiveNumbers = !/(.)\\1{2,}/.test(\r\n  //             phoneNumber\r\n  //         );\r\n  //         console.log(\r\n  //             'phoneNumber',\r\n  //             hasNonRepeatedConsecutiveNumbers,\r\n  //             phoneNumber,\r\n  //             value\r\n  //         );\r\n  //         if (hasNonRepeatedConsecutiveNumbers) {\r\n  //             const newNumber = `${phoneNumber.slice(\r\n  //                 0,\r\n  //                 3\r\n  //             )}-${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\r\n  //             console.log('newNumber-------------------', newNumber);\r\n  //             return newNumber;\r\n  //         }\r\n  //         return originalValue;\r\n  //     }),\r\n\r\n  // phone: yup\r\n  //     .string()\r\n  //     .required('Phone number is required')\r\n  //     .transform((value, originalValue) => {\r\n  //         // If value is not undefined, remove all non-digit characters and format\r\n  //         if (value) {\r\n  //             const phoneNumber = originalValue.replace(/[^\\d]/g, '');\r\n  //             const newNumber = `${phoneNumber.slice(\r\n  //                 0,\r\n  //                 3\r\n  //             )}-${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\r\n  //             return newNumber;\r\n  //         }\r\n\r\n  // const rawValue = value.replace(/[^\\d]/g, ''); // Remove all non-digits\r\n  // let formattedValue = '';\r\n  // if (rawValue.length < 4) {\r\n  //     formattedValue = rawValue;\r\n  // } else if (rawValue.length < 7) {\r\n  //     formattedValue = `${rawValue.slice(0, 3)}-${rawValue.slice(3)}`;\r\n  // } else {\r\n  //     formattedValue = `${rawValue.slice(0, 3)}-${rawValue.slice(\r\n  //         3,\r\n  //         6\r\n  //     )}-${rawValue.slice(6, 10)}`;\r\n  // }\r\n  // If value is undefined, return empty string\r\n  //     return '';\r\n  // })\r\n  // .matches(/^\\d{10}$/, 'Phone number must be 10 digits'),\r\n\r\n  // phone: yup\r\n  //     .string()\r\n  //     .matches(/^\\d{10}$/, 'Phone number must be 10 digits')\r\n  //     .transform((value) =>\r\n  //         value ? value.replace(/(\\d{2})(\\d{3})(\\d{4})/, '$1-$2-$3') : ''\r\n  //     )\r\n  //     .nullable()\r\n  //     .required('Phone number is required'),\r\n\r\n  // phone: yup\r\n  //     .string()\r\n  //     .matches(phoneRegExp, 'Phone number must be 10 digits')\r\n  //     .transform((value, originalValue) =>\r\n  //         originalValue\r\n  //             ? originalValue.replace(/^(\\d{2})(\\d{3})(\\d{4})$/, '$1-$2-$3')\r\n  //             : ''\r\n  //     )\r\n  //     .nullable()\r\n  //     .required('Phone number is required'),\r\n});\r\n\r\nexport const getRepresentativeValidation = () => {\r\n  // Get the store data\r\n  const storeData = store.getState();\r\n  const { gettingPaid } = storeData;\r\n  const { businessDetails } = gettingPaid;\r\n\r\n  return yup.object().shape({\r\n    representativeDetails: yup.array().of(\r\n      yup.object().shape({\r\n        fname: yup\r\n          .string()\r\n          .nullable()\r\n          .required('Legal person first name is required.'),\r\n        lname: yup\r\n          .string()\r\n          .nullable()\r\n          .required('Legal person last name is required.'),\r\n        phoneNumber: yup\r\n          .string()\r\n          .nullable()\r\n          .required('Phone number is required.')\r\n          .min(12, 'Phone should be 10 digits.'),\r\n        ssn: yup\r\n          .string()\r\n          .nullable()\r\n          .required('SSN is required.')\r\n          .min(11, 'SSN should be 9 digit.'),\r\n        dob: yup.string().nullable().required('Date of birth is required.'),\r\n        email: yup\r\n          .string()\r\n          .email('Must be a valid email.')\r\n          .max(255)\r\n          .required('Email address is required.'),\r\n        countryAddress: yup.object().nullable().required('Country is require.'),\r\n        stateAddress: yup.object().nullable().required('State is require.'),\r\n        addressLine1: yup\r\n          .string()\r\n          .nullable()\r\n          .required('Address line 1 is required.'),\r\n        city: yup.string().required('City is required.'),\r\n        zipcode: yup\r\n          .string()\r\n          .nullable()\r\n          .notOneOf(\r\n            ['00000'],\r\n            'Should be in XXXXX format.Cannot containt all zeroes.'\r\n          )\r\n          .min(5)\r\n          .max(5)\r\n          .required('Zipcode must be atleast 5 characters'),\r\n        secondaryIdentificationType: yup\r\n          .object()\r\n          .nullable()\r\n          .required('Secondary identification is required.'),\r\n        soInsurence: yup\r\n          .object()\r\n          .nullable()\r\n          .when('secondaryIdentificationType', {\r\n            is: (secondaryIdentificationType) =>\r\n              secondaryIdentificationType?.value === 'dl',\r\n            then: yup\r\n              .object()\r\n              .nullable()\r\n              .required('State of issuance is required.'),\r\n          }),\r\n        idNumber: yup.string().nullable().required('Id number is required.'),\r\n        percentageOwnership: yup\r\n          .mixed()\r\n          .required('Ownership percentage must be 100%.')\r\n          .test(\r\n            'is-valid-settings',\r\n            'Ownership percentage must be 100%.',\r\n            (value, context) => {\r\n              console.log('context', context);\r\n              // Custom validation function for the 'percentageOwnership' field\r\n              if (businessDetails?.businessCategory?.value === 'partnership') {\r\n                if (\r\n                  value !== '' &&\r\n                  !isNaN(value) &&\r\n                  (Number(value) === 100 ||\r\n                    (Number(value) >= 25 && Number(value) <= 100))\r\n                ) {\r\n                  return true;\r\n                }\r\n                return context.createError({\r\n                  message:\r\n                    Number(value) > 100\r\n                      ? 'Ownership percentage is invalid!'\r\n                      : 'Ownership percentage must be 25% or more',\r\n                  path: context.path,\r\n                });\r\n              } else if (\r\n                businessDetails?.businessCategory?.value ===\r\n                  'single_member_llc' ||\r\n                businessDetails?.businessCategory?.value === 'sole_proprietor'\r\n              ) {\r\n                if (value !== '' && !isNaN(value) && Number(value) === 100) {\r\n                  return true;\r\n                }\r\n                return false;\r\n              }\r\n              if (\r\n                value !== '' &&\r\n                !isNaN(value) &&\r\n                (Number(value) === 100 ||\r\n                  (Number(value) >= 25 && Number(value) <= 100))\r\n              ) {\r\n                return true;\r\n              }\r\n              return context.createError({\r\n                message:\r\n                  Number(value) > 100\r\n                    ? 'Ownership percentage is invalid!'\r\n                    : 'Ownership percentage must be 25% or more',\r\n                path: context.path,\r\n              });\r\n            }\r\n          ),\r\n      })\r\n    ),\r\n  });\r\n};\r\n\r\nexport const BusinessRepresentativeValidationSchema = yup.object().shape({\r\n  representativeDetails: yup.array().of(\r\n    yup.object().shape({\r\n      fname: yup\r\n        .string()\r\n        .nullable()\r\n        .required('Legal person first name is required.'),\r\n      lname: yup\r\n        .string()\r\n        .nullable()\r\n        .required('Legal person last name is required.'),\r\n      // phoneNumber: yup\r\n      //     .string()\r\n      // .matches(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/, 'Invalid phone number')\r\n      // .notOneOf(['00000'], 'Should be in XXX-XXX-XXXX format and Cannot be all zeroes.')\r\n      // .min(10, 'Phone should be 10 digits.')\r\n      // .max(10, 'Phone should be 10 digits.')\r\n      // .required('Phone number is required.'),\r\n      phoneNumber: yup\r\n        .string()\r\n        .nullable()\r\n        .required('Phone number is required.')\r\n        .min(12, 'Phone should be 10 digits.'),\r\n      ssn: yup\r\n        .string()\r\n        .nullable()\r\n        .required('SSN is required.')\r\n        .min(11, 'SSN should be 9 digit.')\r\n        .max(11, 'SSN should be 9 digit.'),\r\n      dob: yup.string().nullable().required('Date of birth is required.'),\r\n      email: yup\r\n        .string()\r\n        .email('Must be a valid email.')\r\n        .max(255)\r\n        .required('Email address is required.'),\r\n      countryAddress: yup.object().nullable().required('Country is require.'),\r\n      stateAddress: yup.object().nullable().required('State is require.'),\r\n      addressLine1: yup\r\n        .string()\r\n        .nullable()\r\n        .required('Address line 1 is required.'),\r\n      city: yup.string().required('City is required.'),\r\n      zipcode: yup\r\n        .string()\r\n        .nullable()\r\n        .notOneOf(\r\n          ['00000'],\r\n          'Should be in XXXXX format.Cannot containt all zeroes.'\r\n        )\r\n        .min(5)\r\n        .max(5)\r\n        .required('Zipcode must be atleast 5 characters'),\r\n      secondaryIdentificationType: yup\r\n        .object()\r\n        .nullable()\r\n        .required('Secondary identification is required.'),\r\n      soInsurence: yup\r\n        .object()\r\n        .nullable()\r\n        .when('secondaryIdentificationType', {\r\n          is: (secondaryIdentificationType) =>\r\n            secondaryIdentificationType?.value === 'dl',\r\n          then: yup\r\n            .object()\r\n            .nullable()\r\n            .required('State of issuance is required.'),\r\n        }),\r\n      idNumber: yup.string().nullable().required('Id number is required.'),\r\n    })\r\n  ),\r\n});\r\n\r\nexport const BankDetailsValidationSchema = yup.object().shape({\r\n  accountHolderName: yup\r\n    .string()\r\n    .required('Bank account holder name is required.'),\r\n  accountType: yup\r\n    .object()\r\n    .nullable()\r\n    .required('Bank account type is required.'),\r\n  accountRole: yup.object().nullable().required('Purpose is required.'),\r\n  accountNumber: yup\r\n    .string()\r\n    .required('Account number is required.')\r\n    .max(8, 'Account number should be 8 digits.')\r\n    .min(8, 'Account number should be 8 digits.'),\r\n  routingNumber: yup\r\n    .string()\r\n    .required('Routing number is require')\r\n    .max(9, 'Routing number should be 9 digits.')\r\n    .min(9, 'Routing number should be 9 digits.'),\r\n});\r\n\r\nexport const SummaryValidationSchema = yup.object().shape({\r\n  confirmation: yup\r\n    .boolean()\r\n    .oneOf([true], 'uou need to accept the confirm details'),\r\n  tnc: yup\r\n    .boolean()\r\n    .oneOf([true], 'you need to accept the terms and conditions'),\r\n});\r\n\r\nexport const shippingValidationSchema = yup.object().shape({\r\n  address1: yup.string().required('Address 1 is required.'),\r\n  daystofulfill: yup\r\n    .object()\r\n    .nullable()\r\n    .required('Days to fultill  is required.'),\r\n  state: yup\r\n    .object()\r\n    .shape({\r\n      label: yup.string().required('State is required.'),\r\n      value: yup.string().required('State is required.'),\r\n    })\r\n    .nullable()\r\n    .required('State is required.'),\r\n  country: yup\r\n    .object()\r\n    .shape({\r\n      label: yup.string().required('Country is required.'),\r\n      value: yup.string().required('Country is required.'),\r\n    })\r\n    .nullable()\r\n    .required('Country is required.'),\r\n  city: yup.string().required('City is required.'),\r\n  shippingfee: yup.string().required('Shipping fee is required.'),\r\n  incrementalfee: yup.string().required('Incremental fee is required.'),\r\n  zip: yup.string().min(5, 'Zipcode must be atleast 5 characters').max(5, 'Zipcode must be 5 characters').required('Zipcode is required'),\r\n});\r\n\r\nexport const brandProfileValidationSchema = yup.object().shape({\r\n  company_name: yup.string().required('Company name is required.'),\r\n  company_email_address: yup\r\n    .string()\r\n    .email('Must be a valid email.')\r\n    .max(255)\r\n    .required('Contact email is required.'),\r\n  company_phone_number: yup\r\n    .string()\r\n    .nullable()\r\n    .required('Contact phone number is required.')\r\n    .min(12, 'Contact phone should be 10 digits.'),\r\n  store_name: yup.string().required('Brand name is required.'),\r\n  store_website: yup\r\n    .string()\r\n    .url('Please enter a valid URL')\r\n    .required('Brand website is required.'),\r\n  brand_categories: yup\r\n    .array()\r\n    .min(1, 'At least 1 category required')\r\n    .max(3, 'Select max 3 category.')\r\n    .nullable()\r\n    .required('Select max 3 category.'),\r\n  brand_values: yup.array(),\r\n  brand_story: yup.string().required('About the brand is required.'),\r\n  brand_promo: yup.string().url('Please enter a valid URL'),\r\n});\r\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  businessDetails: {},\n  representativeDetails: [],\n  bankDetails: {},\n  gettingPaidPreferance: {},\n};\n\nconst gettingPaidSlice = createSlice({\n  name: 'gettingPaid',\n  initialState,\n  reducers: {\n    setBusinessDetails: (state, action) => {\n      state.businessDetails = action.payload;\n    },\n    setRepresentativeDetails: (state, action) => {\n      state.representativeDetails = action.payload;\n    },\n    setBankDetails: (state, action) => {\n      state.bankDetails = action.payload;\n    },\n    resetToInitial: (state) => {\n      state.businessDetails = {};\n      state.representativeDetails = [];\n      state.bankDetails = {};\n      state.gettingPaidPreferance = {};\n    },\n\n    setGettingPaidPreferance: (state, action) => {\n      state.gettingPaidPreferance = action.payload;\n    },\n    clearPaidLogout: (state) => {\n      state = initialState;\n    },\n  },\n});\n\n/**\n * Actions\n */\nexport const {\n  setBusinessDetails,\n  setRepresentativeDetails,\n  setBankDetails,\n  resetToInitial,\n  setGettingPaidPreferance,\n  clearPaidLogout,\n} = gettingPaidSlice.actions;\n\n/**\n * Reducers\n */\nexport const gettingPaidReducer = gettingPaidSlice.reducer;\n"],"names":["accountTypeOption","value","label","categoryStyle","control","styles","_objectSpread","borderColor","boxShadow","minHeight","container","style","marginTop","marginRight","defaultValues","accountType","accountRole","EditBankDetail","_ref","setEditBankDetails","_errors$accountHolder","_errors$accountType","_errors$accountRole","_errors$accountNumber","_errors$routingNumber","_useForm","useForm","mode","resolver","yupResolver","BankDetailsValidationSchema","register","handleSubmit","setValue","errors","formState","bankDetails","useSelector","selectBankDetails","dispatch","useDispatch","useEffect","forEach","field","_jsx","_Fragment","children","_jsxs","onSubmit","data","setBankDetails","className","htmlFor","type","name","placeholder","required","accountHolderName","message","Controller","render","_ref2","Select","classNamePrefix","components","IndicatorSeparator","theme","colors","primary25","primary","options","disabled","accountNumber","routingNumber","BusinessDetailsValidationSchema","yup","shape","businessName","website","matches","businessEmail","email","max","businessCategory","nullable","textIdType","when","is","then","phoneNumber","min","addressLine1","countryAddress","stateAddress","city","zipcode","notOneOf","stateOfIncorportation","dateOfIncorportation","bankruptcy","dateOfDischarge","averageSales","averageSalePrice","averageDeliveryTime","merchantCategoryCode","salesMethod","productionDescription","getRepresentativeValidation","businessDetails","store","getState","gettingPaid","representativeDetails","of","fname","lname","ssn","dob","secondaryIdentificationType","soInsurence","idNumber","percentageOwnership","test","context","_businessDetails$busi","_businessDetails$busi2","_businessDetails$busi3","console","log","isNaN","Number","createError","path","BusinessRepresentativeValidationSchema","SummaryValidationSchema","confirmation","oneOf","tnc","shippingValidationSchema","address1","daystofulfill","state","country","shippingfee","incrementalfee","zip","brandProfileValidationSchema","company_name","company_email_address","company_phone_number","store_name","store_website","url","brand_categories","brand_values","brand_story","brand_promo","initialState","gettingPaidPreferance","gettingPaidSlice","createSlice","reducers","setBusinessDetails","action","payload","setRepresentativeDetails","resetToInitial","setGettingPaidPreferance","clearPaidLogout","_gettingPaidSlice$act","actions","reducer"],"sourceRoot":""}